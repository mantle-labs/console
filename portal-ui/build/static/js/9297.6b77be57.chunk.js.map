{"version":3,"file":"static/js/9297.6b77be57.chunk.js","mappings":"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","sources":["screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/DirectPV/FormatErrorsResult.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  deleteDialogStyles,\r\n  snackBarCommon,\r\n} from \"../FormComponents/common/styleLibrary\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport MainError from \"../MainError/MainError\";\r\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\r\n\r\ninterface IModalProps {\r\n  classes: any;\r\n  onClose: () => void;\r\n  modalOpen: boolean;\r\n  title: string | React.ReactNode;\r\n  children: any;\r\n  wideLimit?: boolean;\r\n  noContentPadding?: boolean;\r\n  titleIcon?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...deleteDialogStyles,\r\n    content: {\r\n      padding: 25,\r\n      paddingBottom: 0,\r\n    },\r\n    customDialogSize: {\r\n      width: \"100%\",\r\n      maxWidth: 765,\r\n    },\r\n    ...snackBarCommon,\r\n  });\r\n\r\nconst ModalWrapper = ({\r\n  onClose,\r\n  modalOpen,\r\n  title,\r\n  children,\r\n  classes,\r\n  wideLimit = true,\r\n  noContentPadding,\r\n  titleIcon = null,\r\n}: IModalProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n\r\n  const modalSnackMessage = useSelector(\r\n    (state: AppState) => state.system.modalSnackBar\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (modalSnackMessage) {\r\n      if (modalSnackMessage.message === \"\") {\r\n        setOpenSnackbar(false);\r\n        return;\r\n      }\r\n      // Open SnackBar\r\n      if (modalSnackMessage.type !== \"error\") {\r\n        setOpenSnackbar(true);\r\n      }\r\n    }\r\n  }, [modalSnackMessage]);\r\n\r\n  const closeSnackBar = () => {\r\n    setOpenSnackbar(false);\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  };\r\n\r\n  const customSize = wideLimit\r\n    ? {\r\n        classes: {\r\n          paper: classes.customDialogSize,\r\n        },\r\n      }\r\n    : { maxWidth: \"lg\" as const, fullWidth: true };\r\n\r\n  let message = \"\";\r\n\r\n  if (modalSnackMessage) {\r\n    message = modalSnackMessage.detailedErrorMsg;\r\n    if (\r\n      modalSnackMessage.detailedErrorMsg === \"\" ||\r\n      modalSnackMessage.detailedErrorMsg.length < 5\r\n    ) {\r\n      message = modalSnackMessage.message;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={modalOpen}\r\n      classes={classes}\r\n      {...customSize}\r\n      scroll={\"paper\"}\r\n      onClose={(event, reason) => {\r\n        if (reason !== \"backdropClick\") {\r\n          onClose(); // close on Esc but not on click outside\r\n        }\r\n      }}\r\n      className={classes.root}\r\n    >\r\n      <DialogTitle className={classes.title}>\r\n        <div className={classes.titleText}>\r\n          {titleIcon} {title}\r\n        </div>\r\n        <div className={classes.closeContainer}>\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            id={\"close\"}\r\n            className={classes.closeButton}\r\n            onClick={onClose}\r\n            disableRipple\r\n            size=\"small\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <MainError isModal={true} />\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        className={classes.snackBarModal}\r\n        onClose={() => {\r\n          closeSnackBar();\r\n        }}\r\n        message={message}\r\n        ContentProps={{\r\n          className: `${classes.snackBar} ${\r\n            modalSnackMessage && modalSnackMessage.type === \"error\"\r\n              ? classes.errorSnackBar\r\n              : \"\"\r\n          }`,\r\n        }}\r\n        autoHideDuration={\r\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\r\n        }\r\n      />\r\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ModalWrapper);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport { Button, Grid, Theme } from \"@mui/material\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport React from \"react\";\r\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\r\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\r\nimport { IDirectPVFormatResItem } from \"./types\";\r\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\r\nimport { DriveFormatErrorsIcon } from \"../../../icons\";\r\nimport { encodeURLString } from \"../../../common/utils\";\r\n\r\ninterface IFormatErrorsProps {\r\n  open: boolean;\r\n  onCloseFormatErrorsList: () => void;\r\n  errorsList: IDirectPVFormatResItem[];\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    buttonContainer: {\r\n      textAlign: \"right\",\r\n    },\r\n    errorsList: {\r\n      height: \"calc(100vh - 280px)\",\r\n    },\r\n    ...modalStyleUtils,\r\n  });\r\n\r\nconst download = (filename: string, text: string) => {\r\n  let element = document.createElement(\"a\");\r\n  element.setAttribute(\r\n    \"href\",\r\n    \"data:application/json;charset=utf-8,\" + encodeURLString(text)\r\n  );\r\n  element.setAttribute(\"download\", filename);\r\n\r\n  element.style.display = \"none\";\r\n  document.body.appendChild(element);\r\n\r\n  element.click();\r\n\r\n  document.body.removeChild(element);\r\n};\r\n\r\nconst FormatErrorsResult = ({\r\n  open,\r\n  onCloseFormatErrorsList,\r\n  errorsList,\r\n  classes,\r\n}: IFormatErrorsProps) => {\r\n  return (\r\n    <ModalWrapper\r\n      modalOpen={open}\r\n      title={\"Format Errors\"}\r\n      onClose={onCloseFormatErrorsList}\r\n      titleIcon={<DriveFormatErrorsIcon />}\r\n    >\r\n      <Grid container>\r\n        <Grid item xs={12} className={classes.modalFormScrollable}>\r\n          There were some issues trying to format the selected CSI Drives,\r\n          please fix the issues and try again.\r\n          <br />\r\n          <TableWrapper\r\n            columns={[\r\n              {\r\n                label: \"Node\",\r\n                elementKey: \"node\",\r\n              },\r\n              { label: \"Drive\", elementKey: \"drive\" },\r\n              { label: \"Message\", elementKey: \"error\" },\r\n            ]}\r\n            entityName=\"Format Errors\"\r\n            idField=\"drive\"\r\n            records={errorsList}\r\n            isLoading={false}\r\n            customPaperHeight={classes.errorsList}\r\n            textSelectable\r\n            noBackground\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.modalButtonBar}>\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"outlined\"\r\n            onClick={() => {\r\n              download(\"csiFormatErrors.json\", JSON.stringify([...errorsList]));\r\n            }}\r\n          >\r\n            Download\r\n          </Button>\r\n          <Button\r\n            onClick={onCloseFormatErrorsList}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            autoFocus\r\n          >\r\n            Done\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(FormatErrorsResult);\r\n"],"names":["withStyles","theme","createStyles","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","onClose","modalOpen","title","children","classes","wideLimit","noContentPadding","titleIcon","dispatch","useAppDispatch","useState","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","type","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","className","root","titleText","closeContainer","id","closeButton","onClick","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","buttonContainer","textAlign","errorsList","height","modalStyleUtils","onCloseFormatErrorsList","container","item","xs","modalFormScrollable","columns","label","elementKey","entityName","idField","records","isLoading","customPaperHeight","textSelectable","noBackground","modalButtonBar","color","variant","filename","text","element","document","createElement","setAttribute","encodeURLString","style","display","body","appendChild","click","removeChild","download","JSON","stringify","autoFocus"],"sourceRoot":""}