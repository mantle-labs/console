{"version":3,"file":"static/js/4781.f4794912.chunk.js","mappings":"yOA6JA,KAAeA,EAAAA,EAAAA,IAtHA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,0BACRC,EAAAA,IACAC,EAAAA,IAFO,IAGVC,YAAW,kBACNF,EAAAA,GAAAA,YADK,IAERG,SAAU,GACVC,OAAQ,EACRC,WAAY,aACZC,WAAY,OACZC,SAAU,OACVC,QAAS,SAEXC,iBAAkB,CAChBC,SAAU,EACVC,SAAU,YAEZC,iBAAkB,CAChBC,YAAa,UACbC,QAAS,IAEXC,cAAe,CACb,sCAAqC,kBAChCf,EAAAA,GAAAA,YADL,IAEEG,SAAU,GACVa,UAAW,MAEb,iDAAkD,CAChDH,YAAa,UACbI,YAAa,GAEf,aAAc,CACZC,MAAO,UACPf,SAAU,GACVgB,WAAY,IACZ,gBAAiB,CACfD,MAAO,UACPE,QAAS,EACTD,WAAY,SAtCP,GAsHf,EA1E0B,SAAC,GAaH,IAZtBE,EAYqB,EAZrBA,MACAC,EAWqB,EAXrBA,SACAC,EAUqB,EAVrBA,MACAC,EASqB,EATrBA,GACAC,EAQqB,EARrBA,KAQqB,IAPrBC,SAAAA,OAOqB,aANrBC,QAAAA,OAMqB,MANX,GAMW,MALrBC,MAAAA,OAKqB,MALb,EAKa,MAJrBC,MAAAA,OAIqB,MAJb,GAIa,MAHrBC,SAAAA,OAGqB,aAFrBC,YAAAA,OAEqB,MAFP,GAEO,EADrBC,EACqB,EADrBA,QAEIC,EAAkB,CAAE,aAAcL,GAEtC,OACE,SAAC,WAAD,WACE,UAAC,KAAD,CACEM,MAAI,EACJC,GAAI,GACJC,UAAS,UAAKJ,EAAQK,eAAb,YACG,KAAVR,EAAeG,EAAQM,aAAe,IAJ1C,UAOa,KAAVjB,IACC,UAAC,IAAD,CAAYkB,QAASf,EAAIY,UAAWJ,EAAQ9B,WAA5C,WACE,4BACGmB,EACAS,EAAW,IAAM,MAEP,KAAZH,IACC,gBAAKS,UAAWJ,EAAQQ,iBAAxB,UACE,SAAC,IAAD,CAASC,MAAOd,EAASe,UAAU,YAAnC,UACE,gBAAKN,UAAWJ,EAAQL,QAAxB,UACE,SAAC,IAAD,cAQZ,gBAAKS,UAAWJ,EAAQvB,iBAAxB,UACE,SAAC,IAAD,CACEe,GAAIA,EACJC,KAAMA,EACNkB,WAAS,EACTpB,MAAOA,EACPG,SAAUA,EACVJ,SAAUA,EACVsB,WAAS,EACTC,KAAM,EACNZ,WAAYA,EACZJ,MAAiB,KAAVA,EACPiB,WAAYjB,EACZE,YAAaA,EACbgB,gBAAiB,CACfC,QAAQ,GAEVC,WAAY,CACVjB,QAAS,CACPkB,eAAgBlB,EAAQpB,iBACxBuC,KAAMnB,EAAQjB,gBAGlBqC,QAAQ,mBAMnB,G,wGC/FD,KAAevD,EAAAA,EAAAA,IA7CA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,UACRsD,EAAAA,IAFQ,GA6Cf,EAxCuB,SAAC,GAMA,IALtBrB,EAKqB,EALrBA,QAKqB,IAJrBX,MAAAA,OAIqB,MAJb,GAIa,EAHrBiC,EAGqB,EAHrBA,QAGqB,IAFrBC,UAAAA,OAEqB,SADrBC,EACqB,EADrBA,aAEA,OACE,SAAC,EAAAC,SAAD,WACE,UAAC,KAAD,CAAMrB,UAAWJ,EAAQ0B,kBAAzB,UACa,KAAVrC,IACC,SAAC,KAAD,CAAMa,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQ2B,gBAAtC,SACGtC,KAGL,UAAC,KAAD,CACEa,MAAI,EACJC,GAAI,GACJC,UAAS,UAAKJ,EAAQqB,eAAb,YACPG,EAAexB,EAAQ4B,qBAAuB,IAJlD,WAOE,SAAC,KAAD,CACE1B,MAAI,EACJC,GAAI,GACJC,UACEmB,EAAYvB,EAAQ6B,sBAAwB7B,EAAQ8B,aAJxD,SAOGR,IAEFE,IACC,gBAAKpB,UAAWJ,EAAQ+B,mBAAxB,SAA6CP,WAMxD,G,iLC4PD,WAAe3D,EAAAA,EAAAA,IAjRA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,kBACRiE,EAAAA,IACAC,EAAAA,IAHQ,GAiRf,EA3QkB,SAAC,GAA4C,IAA1C3C,EAAyC,EAAzCA,SAAUU,EAA+B,EAA/BA,QAE7B,GAAwCkC,EAAAA,EAAAA,WAAkB,GAA1D,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,UAAiB,IAAnD,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4BJ,EAAAA,EAAAA,UAAiB,IAA7C,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA4BN,EAAAA,EAAAA,UAAiB,IAA7C,eAAOO,EAAP,KAAeC,EAAf,KACA,GAAwBR,EAAAA,EAAAA,UAAiB,IAAzC,eAAOS,EAAP,KAAaC,EAAb,KACA,GAAwBV,EAAAA,EAAAA,UAAiB,IAAzC,eAAOW,EAAP,KAAaC,EAAb,KACA,GAAgCZ,EAAAA,EAAAA,UAAiB,IAAjD,eAAOa,EAAP,KAAiBC,EAAjB,KAEA,GAA0Bd,EAAAA,EAAAA,UAAiB,IAA3C,eAAOe,EAAP,KAAcC,EAAd,KACA,GAA4BhB,EAAAA,EAAAA,UAAiB,aAA7C,eAAOiB,EAAP,KAAeC,EAAf,KACA,GAAgClB,EAAAA,EAAAA,UAAiB,IAAjD,eAAOmB,EAAP,KAAiBC,EAAjB,KACA,GAAoCpB,EAAAA,EAAAA,UAAiB,IAArD,eAAOqB,GAAP,KAAmBC,GAAnB,KACA,IAA8BtB,EAAAA,EAAAA,UAAiB,IAA/C,iBAAOuB,GAAP,MAAgBC,GAAhB,MAiCMC,IAAoBC,EAAAA,EAAAA,cAAY,WACpC,MAAM,GAAN,OAAUf,EAAV,YAAkBE,EAAlB,gBAAkCR,EAAlC,YAA0CI,EAA1C,aAAmDF,EACpD,GAAE,CAACI,EAAME,EAAUR,EAAMI,EAAMF,KAEhCoB,EAAAA,EAAAA,YAAU,WACU,KAAdxB,GAUF/C,EATmB,CACjB,CAAEwE,IAAK,aAAcvE,MAAO8C,GAC5B,CAAEyB,IAAK,QAASvE,MAAO0D,GACvB,CAAEa,IAAK,SAAUvE,MAAO4D,GACxB,CAAEW,IAAK,YAAavE,MAAO8D,GAC3B,CAAES,IAAK,cAAevE,MAAOgE,IAC7B,CAAEO,IAAK,UAAWvE,MAAOkE,KAK9B,GAAE,CAACpB,EAAWY,EAAOE,EAAQE,EAAUE,GAAYE,GAASnE,KAE7DuE,EAAAA,EAAAA,YAAU,WACR,IAAME,EAAKJ,KACXrB,EAAayB,EACd,GAAE,CAAClB,EAAMJ,EAAQM,EAAUJ,EAAMJ,EAAMD,EAAcqB,KA0BtD,OACE,UAAC,KAAD,CAAMK,WAAS,EAAf,WACE,SAAC,KAAD,CAAM9D,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEd,MAAO,mBACP4E,QAAS9B,EACT3C,GAAG,WACHC,KAAK,WACLH,SAhCkB,SAAC4E,GACzB,GAAIA,EAAMC,OAAOF,QAAS,CAExB,IAAMF,EAAKJ,KACXrB,EAAayB,EACd,KAAM,CAEL,IAAMK,EAvDa,SACrBC,EACAC,GAMA,IAJA,IAEIC,EAFAC,EAAgC,IAAIC,IAClCC,EAAQ,2CAGqB,QAA3BH,EAAIG,EAAMC,KAAKN,KAEjBE,EAAE3E,QAAU8E,EAAME,WACpBF,EAAME,YAGRJ,EAASK,IAAI,OAAQN,EAAE,IACvBC,EAASK,IAAI,WAAYN,EAAE,IAC3BC,EAASK,IAAI,OAAQN,EAAE,IACvBC,EAASK,IAAI,OAAQN,EAAE,IACvBC,EAASK,IAAI,SAAUN,EAAE,IAG3B,OAAOC,CACR,CAiCcM,CAAezC,GAO1BG,EAAY4B,EAAGW,IAAI,QAAUX,EAAGW,IAAI,QAAU,GAAK,IACnDnC,EAAQwB,EAAGW,IAAI,QAAUX,EAAGW,IAAI,QAAU,GAAK,IAC/CrC,EAAU0B,EAAGW,IAAI,UAAYX,EAAGW,IAAI,UAAY,GAAK,IACrDjC,EAAQsB,EAAGW,IAAI,QAAUX,EAAGW,IAAI,QAAU,GAAK,IAC/C/B,EAAYoB,EAAGW,IAAI,YAAcX,EAAGW,IAAI,YAAc,GAAK,GAC5D,CAED3C,EAAgB8B,EAAMC,OAAOF,QAC9B,EAWO1E,MAAO,gBAGV4C,GACC,SAAC,WAAD,WACE,SAAC,KAAD,CAAMjC,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,aACHC,KAAK,aACLJ,MAAM,aACNE,MAAO8C,EACP/C,SAAU,SAAC2F,GACT3C,EAAa2C,EAAEd,OAAO5E,MACvB,SAKP,UAAC,WAAD,YACE,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAf,UACE,UAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQkF,gBAAtC,WACE,SAAC,KAAD,CAAMhF,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,OACHC,KAAK,OACLJ,MAAM,GACNU,YAAY,aACZR,MAAOgD,EACPjD,SAAU,SAAC2F,GACTzC,EAAYyC,EAAEd,OAAO5E,MACtB,OAGL,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,UACHC,KAAK,UACLJ,MAAM,GACNU,YAAY,gBACZR,MAAOkD,EACPnD,SAAU,SAAC2F,GACTvC,EAAUuC,EAAEd,OAAO5E,MACpB,OAGL,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,OACHC,KAAK,OACLJ,MAAM,GACNU,YAAY,aACZR,MAAOoD,EACPrD,SAAU,SAAC2F,GACTrC,EAAQqC,EAAEd,OAAO5E,MAClB,OAIL,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,OACHC,KAAK,OACLJ,MAAM,GACNU,YAAY,aACZR,MAAOsD,EACPvD,SAAU,SAAC2F,GACTnC,EAAQmC,EAAEd,OAAO5E,MAClB,OAGL,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,WACHC,KAAK,WACLJ,MAAM,GACNU,YAAY,iBACZoF,KAAK,WACL5F,MAAOwD,EACPzD,SAAU,SAAC2F,GACTjC,EAAYiC,EAAEd,OAAO5E,MACtB,YAKT,SAAC,IAAD,CAAgBF,MAAO,oBAAqBiC,QAASe,KACrD,SAAC,KAAD,CAAMnC,MAAI,EAACC,GAAI,GAAf,UACE,wBAIN,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,QACHC,KAAK,QACLJ,MAAM,QACNU,YAAY,mBACZR,MAAO0D,EACPtD,QAAQ,8DACRL,SAAU,SAAC2F,GACT/B,EAAS+B,EAAEd,OAAO5E,MACnB,OAGL,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACEI,iBAAkBjC,EAClB3D,GAAG,SACHC,KAAK,SACLJ,MAAM,SACNC,SAAU,SAAC2F,GACT7B,EAAU6B,EAAEd,OAAO5E,MACpB,EACDI,QAAQ,gIACR0F,gBAAiB,CACf,CAAEhG,MAAO,YAAaE,MAAO,aAC7B,CAAEF,MAAO,SAAUE,MAAO,gBAIhC,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,YACHC,KAAK,YACLJ,MAAM,YACNU,YAAY,kBACZR,MAAO8D,EACP1D,QAAQ,2DACRL,SAAU,SAAC2F,GACT3B,EAAY2B,EAAEd,OAAO5E,MACtB,OAGL,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,cACHC,KAAK,cACLJ,MAAM,cACNU,YAAY,oBACZoF,KAAK,SACL5F,MAAOgE,GACP5D,QAAQ,8DACRL,SAAU,SAAC2F,GACTzB,GAAcyB,EAAEd,OAAO5E,MACxB,OAGL,SAAC,KAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,UAAWJ,EAAQgF,aAAtC,UACE,SAAC,IAAD,CACExF,GAAG,UACHC,KAAK,UACLJ,MAAM,UACNU,YAAY,4BACZR,MAAOkE,GACPnE,SAAU,SAAC2F,GACTvB,GAAWuB,EAAEd,OAAO5E,MACrB,QAKV,G","sources":["screens/Console/Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper.tsx","screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/NotificationEndpoints/CustomForms/ConfMySql.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React from \"react\";\r\nimport { Grid, InputLabel, TextField, Tooltip } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\r\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\r\n\r\ninterface CommentBoxProps {\r\n  label: string;\r\n  classes: any;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  value: string | boolean;\r\n  id: string;\r\n  name: string;\r\n  disabled?: boolean;\r\n  tooltip?: string;\r\n  index?: number;\r\n  error?: string;\r\n  required?: boolean;\r\n  placeholder?: string;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...fieldBasic,\r\n    ...tooltipHelper,\r\n    inputLabel: {\r\n      ...fieldBasic.inputLabel,\r\n      fontSize: 14,\r\n      margin: 0,\r\n      alignItems: \"flex-start\",\r\n      paddingTop: \"20px\",\r\n      flexWrap: \"wrap\",\r\n      display: \"flex\",\r\n    },\r\n    textBoxContainer: {\r\n      flexGrow: 1,\r\n      position: \"relative\",\r\n    },\r\n    cssOutlinedInput: {\r\n      borderColor: \"#EAEAEA\",\r\n      padding: 16,\r\n    },\r\n    rootContainer: {\r\n      \"& .MuiOutlinedInput-inputMultiline\": {\r\n        ...fieldBasic.inputLabel,\r\n        fontSize: 13,\r\n        minHeight: 150,\r\n      },\r\n      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n        borderColor: \"#07193E\",\r\n        borderWidth: 1,\r\n      },\r\n      \"& textarea\": {\r\n        color: \"#07193E\",\r\n        fontSize: 13,\r\n        fontWeight: 600,\r\n        \"&:placeholder\": {\r\n          color: \"#858585\",\r\n          opacity: 1,\r\n          fontWeight: 400,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\nconst CommentBoxWrapper = ({\r\n  label,\r\n  onChange,\r\n  value,\r\n  id,\r\n  name,\r\n  disabled = false,\r\n  tooltip = \"\",\r\n  index = 0,\r\n  error = \"\",\r\n  required = false,\r\n  placeholder = \"\",\r\n  classes,\r\n}: CommentBoxProps) => {\r\n  let inputProps: any = { \"data-index\": index };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        className={`${classes.fieldContainer} ${\r\n          error !== \"\" ? classes.errorInField : \"\"\r\n        }`}\r\n      >\r\n        {label !== \"\" && (\r\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\r\n            <span>\r\n              {label}\r\n              {required ? \"*\" : \"\"}\r\n            </span>\r\n            {tooltip !== \"\" && (\r\n              <div className={classes.tooltipContainer}>\r\n                <Tooltip title={tooltip} placement=\"top-start\">\r\n                  <div className={classes.tooltip}>\r\n                    <HelpIcon />\r\n                  </div>\r\n                </Tooltip>\r\n              </div>\r\n            )}\r\n          </InputLabel>\r\n        )}\r\n\r\n        <div className={classes.textBoxContainer}>\r\n          <TextField\r\n            id={id}\r\n            name={name}\r\n            fullWidth\r\n            value={value}\r\n            disabled={disabled}\r\n            onChange={onChange}\r\n            multiline\r\n            rows={5}\r\n            inputProps={inputProps}\r\n            error={error !== \"\"}\r\n            helperText={error}\r\n            placeholder={placeholder}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                notchedOutline: classes.cssOutlinedInput,\r\n                root: classes.rootContainer,\r\n              },\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n        </div>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(CommentBoxWrapper);\r\n","import React, { Fragment } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { predefinedList } from \"../common/styleLibrary\";\r\n\r\ninterface IPredefinedList {\r\n  classes: any;\r\n  label?: string;\r\n  content: any;\r\n  multiLine?: boolean;\r\n  actionButton?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...predefinedList,\r\n  });\r\n\r\nconst PredefinedList = ({\r\n  classes,\r\n  label = \"\",\r\n  content,\r\n  multiLine = false,\r\n  actionButton,\r\n}: IPredefinedList) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid className={classes.prefinedContainer}>\r\n        {label !== \"\" && (\r\n          <Grid item xs={12} className={classes.predefinedTitle}>\r\n            {label}\r\n          </Grid>\r\n        )}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          className={`${classes.predefinedList} ${\r\n            actionButton ? classes.includesActionButton : \"\"\r\n          }`}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            className={\r\n              multiLine ? classes.innerContentMultiline : classes.innerContent\r\n            }\r\n          >\r\n            {content}\r\n          </Grid>\r\n          {actionButton && (\r\n            <div className={classes.overlayShareOption}>{actionButton}</div>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(PredefinedList);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\r\nimport { IElementValue } from \"../../Configurations/types\";\r\nimport {\r\n  formFieldStyles,\r\n  modalBasic,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\nimport CommentBoxWrapper from \"../../Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper\";\r\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport PredefinedList from \"../../Common/FormComponents/PredefinedList/PredefinedList\";\r\n\r\ninterface IConfMySqlProps {\r\n  onChange: (newValue: IElementValue[]) => void;\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...modalBasic,\r\n    ...formFieldStyles,\r\n  });\r\n\r\nconst ConfMySql = ({ onChange, classes }: IConfMySqlProps) => {\r\n  //Local States\r\n  const [useDsnString, setUseDsnString] = useState<boolean>(false);\r\n  const [dsnString, setDsnString] = useState<string>(\"\");\r\n  const [host, setHostname] = useState<string>(\"\");\r\n  const [dbName, setDbName] = useState<string>(\"\");\r\n  const [port, setPort] = useState<string>(\"\");\r\n  const [user, setUser] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n\r\n  const [table, setTable] = useState<string>(\"\");\r\n  const [format, setFormat] = useState<string>(\"namespace\");\r\n  const [queueDir, setQueueDir] = useState<string>(\"\");\r\n  const [queueLimit, setQueueLimit] = useState<string>(\"\");\r\n  const [comment, setComment] = useState<string>(\"\");\r\n\r\n  // dsn_string*  (string)             MySQL data-source-name connection string e.g. \"<user>:<password>@tcp(<host>:<port>)/<database>\"\r\n  // table*       (string)             DB table name to store/update events, table is auto-created\r\n  // format*      (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\r\n  // queue_dir    (path)               staging dir for undelivered messages e.g. '/home/events'\r\n  // queue_limit  (number)             maximum limit for undelivered messages, defaults to '100000'\r\n  // comment      (sentence)           optionally add a comment to this setting\r\n\r\n  const parseDsnString = (\r\n    input: string,\r\n    keys: string[]\r\n  ): Map<string, string> => {\r\n    let kvFields: Map<string, string> = new Map();\r\n    const regex = /(.*?):(.*?)@tcp\\((.*?):(.*?)\\)\\/(.*?)$/gm;\r\n    let m;\r\n\r\n    while ((m = regex.exec(input)) !== null) {\r\n      // This is necessary to avoid infinite loops with zero-width matches\r\n      if (m.index === regex.lastIndex) {\r\n        regex.lastIndex++;\r\n      }\r\n\r\n      kvFields.set(\"user\", m[1]);\r\n      kvFields.set(\"password\", m[2]);\r\n      kvFields.set(\"host\", m[3]);\r\n      kvFields.set(\"port\", m[4]);\r\n      kvFields.set(\"dbname\", m[5]);\r\n    }\r\n\r\n    return kvFields;\r\n  };\r\n\r\n  const configToDsnString = useCallback((): string => {\r\n    return `${user}:${password}@tcp(${host}:${port})/${dbName}`;\r\n  }, [user, password, host, port, dbName]);\r\n\r\n  useEffect(() => {\r\n    if (dsnString !== \"\") {\r\n      const formValues = [\r\n        { key: \"dsn_string\", value: dsnString },\r\n        { key: \"table\", value: table },\r\n        { key: \"format\", value: format },\r\n        { key: \"queue_dir\", value: queueDir },\r\n        { key: \"queue_limit\", value: queueLimit },\r\n        { key: \"comment\", value: comment },\r\n      ];\r\n\r\n      onChange(formValues);\r\n    }\r\n  }, [dsnString, table, format, queueDir, queueLimit, comment, onChange]);\r\n\r\n  useEffect(() => {\r\n    const cs = configToDsnString();\r\n    setDsnString(cs);\r\n  }, [user, dbName, password, port, host, setDsnString, configToDsnString]);\r\n\r\n  const switcherChangeEvt = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      // build dsn_string\r\n      const cs = configToDsnString();\r\n      setDsnString(cs);\r\n    } else {\r\n      // parse dsn_string\r\n      const kv = parseDsnString(dsnString, [\r\n        \"host\",\r\n        \"port\",\r\n        \"dbname\",\r\n        \"user\",\r\n        \"password\",\r\n      ]);\r\n      setHostname(kv.get(\"host\") ? kv.get(\"host\") + \"\" : \"\");\r\n      setPort(kv.get(\"port\") ? kv.get(\"port\") + \"\" : \"\");\r\n      setDbName(kv.get(\"dbname\") ? kv.get(\"dbname\") + \"\" : \"\");\r\n      setUser(kv.get(\"user\") ? kv.get(\"user\") + \"\" : \"\");\r\n      setPassword(kv.get(\"password\") ? kv.get(\"password\") + \"\" : \"\");\r\n    }\r\n\r\n    setUseDsnString(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={12}>\r\n        <FormSwitchWrapper\r\n          label={\"Enter DNS String\"}\r\n          checked={useDsnString}\r\n          id=\"checkedB\"\r\n          name=\"checkedB\"\r\n          onChange={switcherChangeEvt}\r\n          value={\"dnsString\"}\r\n        />\r\n      </Grid>\r\n      {useDsnString ? (\r\n        <React.Fragment>\r\n          <Grid item xs={12} className={classes.formFieldRow}>\r\n            <InputBoxWrapper\r\n              id=\"dsn-string\"\r\n              name=\"dsn_string\"\r\n              label=\"DSN String\"\r\n              value={dsnString}\r\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                setDsnString(e.target.value);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          <Grid item xs={12}>\r\n            <Grid item xs={12} className={classes.configureString}>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"host\"\r\n                  name=\"host\"\r\n                  label=\"\"\r\n                  placeholder=\"Enter Host\"\r\n                  value={host}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setHostname(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"db-name\"\r\n                  name=\"db-name\"\r\n                  label=\"\"\r\n                  placeholder=\"Enter DB Name\"\r\n                  value={dbName}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setDbName(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"port\"\r\n                  name=\"port\"\r\n                  label=\"\"\r\n                  placeholder=\"Enter Port\"\r\n                  value={port}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setPort(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"user\"\r\n                  name=\"user\"\r\n                  label=\"\"\r\n                  placeholder=\"Enter User\"\r\n                  value={user}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setUser(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  label=\"\"\r\n                  placeholder=\"Enter Password\"\r\n                  type=\"password\"\r\n                  value={password}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setPassword(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <PredefinedList label={\"Connection String\"} content={dsnString} />\r\n          <Grid item xs={12}>\r\n            <br />\r\n          </Grid>\r\n        </React.Fragment>\r\n      )}\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <InputBoxWrapper\r\n          id=\"table\"\r\n          name=\"table\"\r\n          label=\"Table\"\r\n          placeholder=\"Enter Table Name\"\r\n          value={table}\r\n          tooltip=\"DB table name to store/update events, table is auto-created\"\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setTable(e.target.value);\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <RadioGroupSelector\r\n          currentSelection={format}\r\n          id=\"format\"\r\n          name=\"format\"\r\n          label=\"Format\"\r\n          onChange={(e) => {\r\n            setFormat(e.target.value);\r\n          }}\r\n          tooltip=\"'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\"\r\n          selectorOptions={[\r\n            { label: \"Namespace\", value: \"namespace\" },\r\n            { label: \"Access\", value: \"access\" },\r\n          ]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <InputBoxWrapper\r\n          id=\"queue-dir\"\r\n          name=\"queue_dir\"\r\n          label=\"Queue Dir\"\r\n          placeholder=\"Enter Queue Dir\"\r\n          value={queueDir}\r\n          tooltip=\"staging dir for undelivered messages e.g. '/home/events'\"\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setQueueDir(e.target.value);\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <InputBoxWrapper\r\n          id=\"queue-limit\"\r\n          name=\"queue_limit\"\r\n          label=\"Queue Limit\"\r\n          placeholder=\"Enter Queue Limit\"\r\n          type=\"number\"\r\n          value={queueLimit}\r\n          tooltip=\"maximum limit for undelivered messages, defaults to '10000'\"\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setQueueLimit(e.target.value);\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <CommentBoxWrapper\r\n          id=\"comment\"\r\n          name=\"comment\"\r\n          label=\"Comment\"\r\n          placeholder=\"Enter custom notes if any\"\r\n          value={comment}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setComment(e.target.value);\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ConfMySql);\r\n"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","inputLabel","fontSize","margin","alignItems","paddingTop","flexWrap","display","textBoxContainer","flexGrow","position","cssOutlinedInput","borderColor","padding","rootContainer","minHeight","borderWidth","color","fontWeight","opacity","label","onChange","value","id","name","disabled","tooltip","index","error","required","placeholder","classes","inputProps","item","xs","className","fieldContainer","errorInField","htmlFor","tooltipContainer","title","placement","fullWidth","multiline","rows","helperText","InputLabelProps","shrink","InputProps","notchedOutline","root","variant","predefinedList","content","multiLine","actionButton","Fragment","prefinedContainer","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","modalBasic","formFieldStyles","useState","useDsnString","setUseDsnString","dsnString","setDsnString","host","setHostname","dbName","setDbName","port","setPort","user","setUser","password","setPassword","table","setTable","format","setFormat","queueDir","setQueueDir","queueLimit","setQueueLimit","comment","setComment","configToDsnString","useCallback","useEffect","key","cs","container","checked","event","target","kv","input","keys","m","kvFields","Map","regex","exec","lastIndex","set","parseDsnString","get","formFieldRow","e","configureString","type","currentSelection","selectorOptions"],"sourceRoot":""}