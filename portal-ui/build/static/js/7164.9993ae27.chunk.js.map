{"version":3,"file":"static/js/7164.9993ae27.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper.tsx","screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/NotificationEndpoints/CustomForms/ConfPostgres.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React from \"react\";\r\nimport { Grid, InputLabel, TextField, Tooltip } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\r\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\r\n\r\ninterface CommentBoxProps {\r\n  label: string;\r\n  classes: any;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  value: string | boolean;\r\n  id: string;\r\n  name: string;\r\n  disabled?: boolean;\r\n  tooltip?: string;\r\n  index?: number;\r\n  error?: string;\r\n  required?: boolean;\r\n  placeholder?: string;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...fieldBasic,\r\n    ...tooltipHelper,\r\n    inputLabel: {\r\n      ...fieldBasic.inputLabel,\r\n      fontSize: 14,\r\n      margin: 0,\r\n      alignItems: \"flex-start\",\r\n      paddingTop: \"20px\",\r\n      flexWrap: \"wrap\",\r\n      display: \"flex\",\r\n    },\r\n    textBoxContainer: {\r\n      flexGrow: 1,\r\n      position: \"relative\",\r\n    },\r\n    cssOutlinedInput: {\r\n      borderColor: \"#EAEAEA\",\r\n      padding: 16,\r\n    },\r\n    rootContainer: {\r\n      \"& .MuiOutlinedInput-inputMultiline\": {\r\n        ...fieldBasic.inputLabel,\r\n        fontSize: 13,\r\n        minHeight: 150,\r\n      },\r\n      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n        borderColor: \"#07193E\",\r\n        borderWidth: 1,\r\n      },\r\n      \"& textarea\": {\r\n        color: \"#07193E\",\r\n        fontSize: 13,\r\n        fontWeight: 600,\r\n        \"&:placeholder\": {\r\n          color: \"#858585\",\r\n          opacity: 1,\r\n          fontWeight: 400,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\nconst CommentBoxWrapper = ({\r\n  label,\r\n  onChange,\r\n  value,\r\n  id,\r\n  name,\r\n  disabled = false,\r\n  tooltip = \"\",\r\n  index = 0,\r\n  error = \"\",\r\n  required = false,\r\n  placeholder = \"\",\r\n  classes,\r\n}: CommentBoxProps) => {\r\n  let inputProps: any = { \"data-index\": index };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        className={`${classes.fieldContainer} ${\r\n          error !== \"\" ? classes.errorInField : \"\"\r\n        }`}\r\n      >\r\n        {label !== \"\" && (\r\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\r\n            <span>\r\n              {label}\r\n              {required ? \"*\" : \"\"}\r\n            </span>\r\n            {tooltip !== \"\" && (\r\n              <div className={classes.tooltipContainer}>\r\n                <Tooltip title={tooltip} placement=\"top-start\">\r\n                  <div className={classes.tooltip}>\r\n                    <HelpIcon />\r\n                  </div>\r\n                </Tooltip>\r\n              </div>\r\n            )}\r\n          </InputLabel>\r\n        )}\r\n\r\n        <div className={classes.textBoxContainer}>\r\n          <TextField\r\n            id={id}\r\n            name={name}\r\n            fullWidth\r\n            value={value}\r\n            disabled={disabled}\r\n            onChange={onChange}\r\n            multiline\r\n            rows={5}\r\n            inputProps={inputProps}\r\n            error={error !== \"\"}\r\n            helperText={error}\r\n            placeholder={placeholder}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                notchedOutline: classes.cssOutlinedInput,\r\n                root: classes.rootContainer,\r\n              },\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n        </div>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(CommentBoxWrapper);\r\n","import React, { Fragment } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { predefinedList } from \"../common/styleLibrary\";\r\n\r\ninterface IPredefinedList {\r\n  classes: any;\r\n  label?: string;\r\n  content: any;\r\n  multiLine?: boolean;\r\n  actionButton?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...predefinedList,\r\n  });\r\n\r\nconst PredefinedList = ({\r\n  classes,\r\n  label = \"\",\r\n  content,\r\n  multiLine = false,\r\n  actionButton,\r\n}: IPredefinedList) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid className={classes.prefinedContainer}>\r\n        {label !== \"\" && (\r\n          <Grid item xs={12} className={classes.predefinedTitle}>\r\n            {label}\r\n          </Grid>\r\n        )}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          className={`${classes.predefinedList} ${\r\n            actionButton ? classes.includesActionButton : \"\"\r\n          }`}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            className={\r\n              multiLine ? classes.innerContentMultiline : classes.innerContent\r\n            }\r\n          >\r\n            {content}\r\n          </Grid>\r\n          {actionButton && (\r\n            <div className={classes.overlayShareOption}>{actionButton}</div>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(PredefinedList);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\r\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\r\nimport { IElementValue } from \"../../Configurations/types\";\r\nimport {\r\n  formFieldStyles,\r\n  modalBasic,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\nimport CommentBoxWrapper from \"../../Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper\";\r\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport PredefinedList from \"../../Common/FormComponents/PredefinedList/PredefinedList\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface IConfPostgresProps {\r\n  onChange: (newValue: IElementValue[]) => void;\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...modalBasic,\r\n    ...formFieldStyles,\r\n  });\r\n\r\nconst ConfPostgres = ({ onChange, classes }: IConfPostgresProps) => {\r\n  //Local States\r\n  const [useConnectionString, setUseConnectionString] =\r\n    useState<boolean>(false);\r\n  const [connectionString, setConnectionString] = useState<string>(\"\");\r\n  const [host, setHostname] = useState<string>(\"\");\r\n  const [dbName, setDbName] = useState<string>(\"\");\r\n  const [port, setPort] = useState<string>(\"\");\r\n  const [user, setUser] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [sslMode, setSslMode] = useState<string>(\" \");\r\n\r\n  const [table, setTable] = useState<string>(\"\");\r\n  const [format, setFormat] = useState<string>(\"namespace\");\r\n  const [queueDir, setQueueDir] = useState<string>(\"\");\r\n  const [queueLimit, setQueueLimit] = useState<string>(\"\");\r\n  const [comment, setComment] = useState<string>(\"\");\r\n\r\n  // connection_string*  (string)             Postgres server connection-string e.g. \"host=localhost port=5432 dbname=minio_events user=postgres password=password sslmode=disable\"\r\n\r\n  //  \"host=localhost\r\n  // port=5432\r\n  //dbname=minio_events\r\n  //user=postgres\r\n  //password=password\r\n  //sslmode=disable\"\r\n\r\n  // table*              (string)             DB table name to store/update events, table is auto-created\r\n  // format*             (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\r\n  // queue_dir           (path)               staging dir for undelivered messages e.g. '/home/events'\r\n  // queue_limit         (number)             maximum limit for undelivered messages, defaults to '10000'\r\n  // comment             (sentence)           optionally add a comment to this setting\r\n  const { t } = useTranslation();\r\n\r\n  const KvSeparator = \"=\";\r\n  const parseConnectionString = (\r\n    input: string,\r\n    keys: string[]\r\n  ): Map<string, string> => {\r\n    let valueIndexes: number[] = [];\r\n\r\n    for (const key of keys) {\r\n      const i = input.indexOf(key + KvSeparator);\r\n      if (i === -1) {\r\n        continue;\r\n      }\r\n      valueIndexes.push(i);\r\n    }\r\n    valueIndexes.sort((n1, n2) => n1 - n2);\r\n\r\n    let kvFields = new Map<string, string>();\r\n    let fields: string[] = new Array<string>(valueIndexes.length);\r\n    for (let i = 0; i < valueIndexes.length; i++) {\r\n      const j = i + 1;\r\n      if (j < valueIndexes.length) {\r\n        fields[i] = input.slice(valueIndexes[i], valueIndexes[j]);\r\n      } else {\r\n        fields[i] = input.slice(valueIndexes[i]);\r\n      }\r\n    }\r\n\r\n    for (let field of fields) {\r\n      if (field === undefined) {\r\n        continue;\r\n      }\r\n      const key = field.slice(0, field.indexOf(\"=\"));\r\n      const value = field.slice(field.indexOf(\"=\") + 1).trim();\r\n      kvFields.set(key, value);\r\n    }\r\n    return kvFields;\r\n  };\r\n\r\n  const configToString = useCallback((): string => {\r\n    let strValue = \"\";\r\n    if (host !== \"\") {\r\n      strValue = `${strValue} host=${host}`;\r\n    }\r\n    if (dbName !== \"\") {\r\n      strValue = `${strValue} dbname=${dbName}`;\r\n    }\r\n    if (user !== \"\") {\r\n      strValue = `${strValue} user=${user}`;\r\n    }\r\n    if (password !== \"\") {\r\n      strValue = `${strValue} password=${password}`;\r\n    }\r\n    if (port !== \"\") {\r\n      strValue = `${strValue} port=${port}`;\r\n    }\r\n    if (sslMode !== \" \") {\r\n      strValue = `${strValue} sslmode=${sslMode}`;\r\n    }\r\n\r\n    strValue = `${strValue} `;\r\n\r\n    return strValue.trim();\r\n  }, [host, dbName, user, password, port, sslMode]);\r\n\r\n  useEffect(() => {\r\n    if (connectionString !== \"\") {\r\n      const formValues = [\r\n        { key: \"connection_string\", value: connectionString },\r\n        { key: \"table\", value: table },\r\n        { key: \"format\", value: format },\r\n        { key: \"queue_dir\", value: queueDir },\r\n        { key: \"queue_limit\", value: queueLimit },\r\n        { key: \"comment\", value: comment },\r\n      ];\r\n\r\n      onChange(formValues);\r\n    }\r\n  }, [\r\n    connectionString,\r\n    table,\r\n    format,\r\n    queueDir,\r\n    queueLimit,\r\n    comment,\r\n    onChange,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const cs = configToString();\r\n    setConnectionString(cs);\r\n  }, [\r\n    user,\r\n    dbName,\r\n    password,\r\n    port,\r\n    sslMode,\r\n    host,\r\n    setConnectionString,\r\n    configToString,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (useConnectionString) {\r\n      // build connection_string\r\n      const cs = configToString();\r\n      setConnectionString(cs);\r\n\r\n      return;\r\n    }\r\n    // parse connection_string\r\n    const kv = parseConnectionString(connectionString, [\r\n      \"host\",\r\n      \"port\",\r\n      \"dbname\",\r\n      \"user\",\r\n      \"password\",\r\n      \"sslmode\",\r\n    ]);\r\n    setHostname(kv.get(\"host\") ? kv.get(\"host\") + \"\" : \"\");\r\n    setPort(kv.get(\"port\") ? kv.get(\"port\") + \"\" : \"\");\r\n    setDbName(kv.get(\"dbname\") ? kv.get(\"dbname\") + \"\" : \"\");\r\n    setUser(kv.get(\"user\") ? kv.get(\"user\") + \"\" : \"\");\r\n    setPassword(kv.get(\"password\") ? kv.get(\"password\") + \"\" : \"\");\r\n    setSslMode(kv.get(\"sslmode\") ? kv.get(\"sslmode\") + \"\" : \" \");\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [useConnectionString]);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={12}>\r\n        <FormSwitchWrapper\r\n          label={\"Manually Configure String\"}\r\n          checked={useConnectionString}\r\n          id=\"manualString\"\r\n          name=\"manualString\"\r\n          onChange={(e) => {\r\n            setUseConnectionString(e.target.checked);\r\n          }}\r\n          value={\"manualString\"}\r\n        />\r\n      </Grid>\r\n      {useConnectionString ? (\r\n        <React.Fragment>\r\n          <Grid item xs={12} className={classes.formFieldRow}>\r\n            <InputBoxWrapper\r\n              id=\"connection-string\"\r\n              name=\"connection_string\"\r\n              label={t(\"connection_string\")}\r\n              value={connectionString}\r\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                setConnectionString(e.target.value);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          <Grid item xs={12}>\r\n            <Grid item xs={12} className={classes.configureString}>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"host\"\r\n                  name=\"host\"\r\n                  label=\"\"\r\n                  placeholder={t(\"enter_host\")}\r\n                  value={host}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setHostname(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"db-name\"\r\n                  name=\"db-name\"\r\n                  label=\"\"\r\n                  placeholder={t(\"enter_bd_name\")}\r\n                  value={dbName}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setDbName(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"port\"\r\n                  name=\"port\"\r\n                  label=\"\"\r\n                  placeholder={t(\"enter_port\")}\r\n                  value={port}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setPort(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <SelectWrapper\r\n                  value={sslMode}\r\n                  label=\"\"\r\n                  id=\"sslmode\"\r\n                  name=\"sslmode\"\r\n                  onChange={(e): void => {\r\n                    if (e.target.value !== undefined) {\r\n                      setSslMode(e.target.value + \"\");\r\n                    }\r\n                  }}\r\n                  options={[\r\n                    { label: t(\"enter_SSL_mode\"), value: \" \" },\r\n                    { label: t(\"require\"), value: \"require\" },\r\n                    { label: t(\"disable\"), value: \"disable\" },\r\n                    { label: t(\"verify_CA\"), value: \"verify-ca\" },\r\n                    { label: t(\"verify_full\"), value: \"verify-full\" },\r\n                  ]}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"user\"\r\n                  name=\"user\"\r\n                  label=\"\"\r\n                  placeholder={t(\"enter_user\")}\r\n                  value={user}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setUser(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  label=\"\"\r\n                  type=\"password\"\r\n                  placeholder={t('enter_password')}\r\n                  value={password}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setPassword(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <PredefinedList\r\n            label={t(\"connection_string\")}\r\n            content={connectionString}\r\n          />\r\n          <Grid item xs={12}>\r\n            <br />\r\n          </Grid>\r\n        </React.Fragment>\r\n      )}\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <InputBoxWrapper\r\n          id=\"table\"\r\n          name=\"table\"\r\n          label={t(\"table\")}\r\n          placeholder={t(\"enter_table_name\")}\r\n          value={table}\r\n          tooltip={t(\"db_table_name_to_restore\")}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setTable(e.target.value);\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <RadioGroupSelector\r\n          currentSelection={format}\r\n          id=\"format\"\r\n          name=\"format\"\r\n          label={t(\"format\")}\r\n          onChange={(e) => {\r\n            setFormat(e.target.value);\r\n          }}\r\n          tooltip={t(\"namespace_reflects_current_bucket_object\")}\r\n          selectorOptions={[\r\n            { label: t('namespace'), value: \"namespace\" },\r\n            { label: t(\"access\"), value: \"access\" },\r\n          ]}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <InputBoxWrapper\r\n          id=\"queue-dir\"\r\n          name=\"queue_dir\"\r\n          label={t(\"queue_dir\")}\r\n          placeholder={t(\"enter_queue_dir\")}\r\n          value={queueDir}\r\n          tooltip={t(\"staging_dir_for_undelivered_message\")}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setQueueDir(e.target.value);\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <InputBoxWrapper\r\n          id=\"queue-limit\"\r\n          name=\"queue_limit\"\r\n          label={t(\"queue_limit\")}\r\n          placeholder={t(\"enter_queue_limit\")}\r\n          type=\"number\"\r\n          value={queueLimit}\r\n          tooltip={t(\"maximum_limit_for_undelivered_message\")}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setQueueLimit(e.target.value);\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.formFieldRow}>\r\n        <CommentBoxWrapper\r\n          id=\"comment\"\r\n          name=\"comment\"\r\n          label={t(\"comment\")}\r\n          placeholder={t(\"enter_custom_notes\")}\r\n          value={comment}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setComment(e.target.value);\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ConfPostgres);\r\n"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","inputLabel","fontSize","margin","alignItems","paddingTop","flexWrap","display","textBoxContainer","flexGrow","position","cssOutlinedInput","borderColor","padding","rootContainer","minHeight","borderWidth","color","fontWeight","opacity","label","onChange","value","id","name","disabled","tooltip","index","error","required","placeholder","classes","inputProps","item","xs","className","fieldContainer","errorInField","htmlFor","tooltipContainer","title","placement","fullWidth","multiline","rows","helperText","InputLabelProps","shrink","InputProps","notchedOutline","root","variant","predefinedList","content","multiLine","actionButton","Fragment","prefinedContainer","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","modalBasic","formFieldStyles","useState","useConnectionString","setUseConnectionString","connectionString","setConnectionString","host","setHostname","dbName","setDbName","port","setPort","user","setUser","password","setPassword","sslMode","setSslMode","table","setTable","format","setFormat","queueDir","setQueueDir","queueLimit","setQueueLimit","comment","setComment","t","useTranslation","configToString","useCallback","strValue","trim","useEffect","key","cs","kv","input","keys","valueIndexes","i","indexOf","push","sort","n1","n2","kvFields","Map","fields","Array","length","j","slice","field","undefined","set","parseConnectionString","get","container","checked","e","target","formFieldRow","configureString","options","type","currentSelection","selectorOptions"],"sourceRoot":""}