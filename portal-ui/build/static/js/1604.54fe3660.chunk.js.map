{"version":3,"file":"static/js/1604.54fe3660.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/SetRetentionConfig.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { Button, LinearProgress } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {\r\n  createTenantCommon,\r\n  formFieldStyles,\r\n  modalStyleUtils,\r\n  spacingUtils,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\n\r\nimport {\r\n  ErrorResponseHandler,\r\n  IRetentionConfig,\r\n} from \"../../../../common/types\";\r\nimport api from \"../../../../common/api\";\r\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\r\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport Loader from \"../../Common/Loader/Loader\";\r\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../../store\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...spacingUtils,\r\n    ...createTenantCommon,\r\n    ...formFieldStyles,\r\n    ...modalStyleUtils,\r\n  });\r\n\r\ninterface ISetRetentionConfigProps {\r\n  classes: any;\r\n  open: boolean;\r\n  bucketName: string;\r\n  closeModalAndRefresh: () => void;\r\n}\r\n\r\nconst SetRetentionConfig = ({\r\n  classes,\r\n  open,\r\n  bucketName,\r\n  closeModalAndRefresh,\r\n}: ISetRetentionConfigProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [addLoading, setAddLoading] = useState<boolean>(false);\r\n  const [loadingForm, setLoadingForm] = useState<boolean>(true);\r\n  const [retentionMode, setRetentionMode] = useState<string>(\"compliance\");\r\n  const [retentionUnit, setRetentionUnit] = useState<string>(\"days\");\r\n  const [retentionValidity, setRetentionValidity] = useState<number>(1);\r\n  const [valid, setValid] = useState<boolean>(false);\r\n\r\n  const setRetention = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    if (addLoading) {\r\n      return;\r\n    }\r\n    setAddLoading(true);\r\n    api\r\n      .invoke(\"PUT\", `/api/v1/buckets/${bucketName}/retention`, {\r\n        mode: retentionMode,\r\n        unit: retentionUnit,\r\n        validity: retentionValidity,\r\n      })\r\n      .then(() => {\r\n        setAddLoading(false);\r\n        closeModalAndRefresh();\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        setAddLoading(false);\r\n        dispatch(setModalErrorSnackMessage(err));\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Number.isNaN(retentionValidity) || retentionValidity < 1) {\r\n      setValid(false);\r\n      return;\r\n    }\r\n    setValid(true);\r\n  }, [retentionValidity]);\r\n\r\n  useEffect(() => {\r\n    if (loadingForm) {\r\n      api\r\n        .invoke(\"GET\", `/api/v1/buckets/${bucketName}/retention`)\r\n        .then((res: IRetentionConfig) => {\r\n          setLoadingForm(false);\r\n\r\n          // We set default values\r\n          setRetentionMode(res.mode);\r\n          setRetentionValidity(res.validity);\r\n          setRetentionUnit(res.unit);\r\n        })\r\n        .catch((err: ErrorResponseHandler) => {\r\n          setLoadingForm(false);\r\n        });\r\n    }\r\n  }, [loadingForm, bucketName]);\r\n\r\n  return (\r\n    <ModalWrapper\r\n      title=\"Set Retention Configuration\"\r\n      modalOpen={open}\r\n      onClose={() => {\r\n        closeModalAndRefresh();\r\n      }}\r\n    >\r\n      {loadingForm ? (\r\n        <Loader style={{ width: 16, height: 16 }} />\r\n      ) : (\r\n        <form\r\n          noValidate\r\n          autoComplete=\"off\"\r\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\r\n            setRetention(e);\r\n          }}\r\n        >\r\n          <Grid container>\r\n            <Grid item xs={12} className={classes.modalFormScrollable}>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <RadioGroupSelector\r\n                  currentSelection={retentionMode}\r\n                  id=\"retention_mode\"\r\n                  name=\"retention_mode\"\r\n                  label=\"Retention Mode\"\r\n                  onChange={(e: React.ChangeEvent<{ value: unknown }>) => {\r\n                    setRetentionMode(e.target.value as string);\r\n                  }}\r\n                  selectorOptions={[\r\n                    { value: \"compliance\", label: \"Compliance\" },\r\n                    { value: \"governance\", label: \"Governance\" },\r\n                  ]}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <RadioGroupSelector\r\n                  currentSelection={retentionUnit}\r\n                  id=\"retention_unit\"\r\n                  name=\"retention_unit\"\r\n                  label=\"Retention Unit\"\r\n                  onChange={(e: React.ChangeEvent<{ value: unknown }>) => {\r\n                    setRetentionUnit(e.target.value as string);\r\n                  }}\r\n                  selectorOptions={[\r\n                    { value: \"days\", label: \"Days\" },\r\n                    { value: \"years\", label: \"Years\" },\r\n                  ]}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  type=\"number\"\r\n                  id=\"retention_validity\"\r\n                  name=\"retention_validity\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setRetentionValidity(e.target.valueAsNumber);\r\n                  }}\r\n                  label=\"Retention Validity\"\r\n                  value={String(retentionValidity)}\r\n                  required\r\n                  min=\"1\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.modalButtonBar}>\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                disabled={addLoading}\r\n                onClick={() => {\r\n                  closeModalAndRefresh();\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={addLoading || !valid}\r\n              >\r\n                Set\r\n              </Button>\r\n            </Grid>\r\n            {addLoading && (\r\n              <Grid item xs={12}>\r\n                <LinearProgress />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </form>\r\n      )}\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(SetRetentionConfig);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  deleteDialogStyles,\r\n  snackBarCommon,\r\n} from \"../FormComponents/common/styleLibrary\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport MainError from \"../MainError/MainError\";\r\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\r\n\r\ninterface IModalProps {\r\n  classes: any;\r\n  onClose: () => void;\r\n  modalOpen: boolean;\r\n  title: string | React.ReactNode;\r\n  children: any;\r\n  wideLimit?: boolean;\r\n  noContentPadding?: boolean;\r\n  titleIcon?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...deleteDialogStyles,\r\n    content: {\r\n      padding: 25,\r\n      paddingBottom: 0,\r\n    },\r\n    customDialogSize: {\r\n      width: \"100%\",\r\n      maxWidth: 765,\r\n    },\r\n    ...snackBarCommon,\r\n  });\r\n\r\nconst ModalWrapper = ({\r\n  onClose,\r\n  modalOpen,\r\n  title,\r\n  children,\r\n  classes,\r\n  wideLimit = true,\r\n  noContentPadding,\r\n  titleIcon = null,\r\n}: IModalProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n\r\n  const modalSnackMessage = useSelector(\r\n    (state: AppState) => state.system.modalSnackBar\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (modalSnackMessage) {\r\n      if (modalSnackMessage.message === \"\") {\r\n        setOpenSnackbar(false);\r\n        return;\r\n      }\r\n      // Open SnackBar\r\n      if (modalSnackMessage.type !== \"error\") {\r\n        setOpenSnackbar(true);\r\n      }\r\n    }\r\n  }, [modalSnackMessage]);\r\n\r\n  const closeSnackBar = () => {\r\n    setOpenSnackbar(false);\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  };\r\n\r\n  const customSize = wideLimit\r\n    ? {\r\n        classes: {\r\n          paper: classes.customDialogSize,\r\n        },\r\n      }\r\n    : { maxWidth: \"lg\" as const, fullWidth: true };\r\n\r\n  let message = \"\";\r\n\r\n  if (modalSnackMessage) {\r\n    message = modalSnackMessage.detailedErrorMsg;\r\n    if (\r\n      modalSnackMessage.detailedErrorMsg === \"\" ||\r\n      modalSnackMessage.detailedErrorMsg.length < 5\r\n    ) {\r\n      message = modalSnackMessage.message;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={modalOpen}\r\n      classes={classes}\r\n      {...customSize}\r\n      scroll={\"paper\"}\r\n      onClose={(event, reason) => {\r\n        if (reason !== \"backdropClick\") {\r\n          onClose(); // close on Esc but not on click outside\r\n        }\r\n      }}\r\n      className={classes.root}\r\n    >\r\n      <DialogTitle className={classes.title}>\r\n        <div className={classes.titleText}>\r\n          {titleIcon} {title}\r\n        </div>\r\n        <div className={classes.closeContainer}>\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            id={\"close\"}\r\n            className={classes.closeButton}\r\n            onClick={onClose}\r\n            disableRipple\r\n            size=\"small\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <MainError isModal={true} />\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        className={classes.snackBarModal}\r\n        onClose={() => {\r\n          closeSnackBar();\r\n        }}\r\n        message={message}\r\n        ContentProps={{\r\n          className: `${classes.snackBar} ${\r\n            modalSnackMessage && modalSnackMessage.type === \"error\"\r\n              ? classes.errorSnackBar\r\n              : \"\"\r\n          }`,\r\n        }}\r\n        autoHideDuration={\r\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\r\n        }\r\n      />\r\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ModalWrapper);\r\n"],"names":["withStyles","theme","createStyles","spacingUtils","createTenantCommon","formFieldStyles","modalStyleUtils","classes","open","bucketName","closeModalAndRefresh","dispatch","useAppDispatch","useState","addLoading","setAddLoading","loadingForm","setLoadingForm","retentionMode","setRetentionMode","retentionUnit","setRetentionUnit","retentionValidity","setRetentionValidity","valid","setValid","useEffect","Number","isNaN","api","then","res","mode","validity","unit","catch","err","title","modalOpen","onClose","style","width","height","noValidate","autoComplete","onSubmit","e","preventDefault","setModalErrorSnackMessage","container","item","xs","className","modalFormScrollable","formFieldRow","currentSelection","id","name","label","onChange","target","value","selectorOptions","type","valueAsNumber","String","required","min","modalButtonBar","variant","color","disabled","onClick","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","titleIcon","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}