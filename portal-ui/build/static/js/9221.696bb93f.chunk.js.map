{"version":3,"file":"static/js/9221.696bb93f.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Users/BulkAddToGroup.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { predefinedList } from \"../common/styleLibrary\";\r\n\r\ninterface IPredefinedList {\r\n  classes: any;\r\n  label?: string;\r\n  content: any;\r\n  multiLine?: boolean;\r\n  actionButton?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...predefinedList,\r\n  });\r\n\r\nconst PredefinedList = ({\r\n  classes,\r\n  label = \"\",\r\n  content,\r\n  multiLine = false,\r\n  actionButton,\r\n}: IPredefinedList) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid className={classes.prefinedContainer}>\r\n        {label !== \"\" && (\r\n          <Grid item xs={12} className={classes.predefinedTitle}>\r\n            {label}\r\n          </Grid>\r\n        )}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          className={`${classes.predefinedList} ${\r\n            actionButton ? classes.includesActionButton : \"\"\r\n          }`}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            className={\r\n              multiLine ? classes.innerContentMultiline : classes.innerContent\r\n            }\r\n          >\r\n            {content}\r\n          </Grid>\r\n          {actionButton && (\r\n            <div className={classes.overlayShareOption}>{actionButton}</div>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(PredefinedList);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { Button, LinearProgress } from \"@mui/material\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {\r\n  formFieldStyles,\r\n  modalStyleUtils,\r\n} from \"../Common/FormComponents/common/styleLibrary\";\r\nimport { ErrorResponseHandler } from \"../../../common/types\";\r\nimport api from \"../../../common/api\";\r\nimport GroupsSelectors from \"./GroupsSelectors\";\r\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\r\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\r\nimport { AddMembersToGroupIcon } from \"../../../icons\";\r\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../store\";\r\n\r\ninterface IAddToGroup {\r\n  open: boolean;\r\n  checkedUsers: any;\r\n  closeModalAndRefresh: any;\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...modalStyleUtils,\r\n    ...formFieldStyles,\r\n  });\r\n\r\nconst BulkAddToGroup = ({\r\n  open,\r\n  checkedUsers,\r\n  closeModalAndRefresh,\r\n  classes,\r\n}: IAddToGroup) => {\r\n  const dispatch = useAppDispatch();\r\n  //Local States\r\n  const [saving, isSaving] = useState<boolean>(false);\r\n  const [accepted, setAccepted] = useState<boolean>(false);\r\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    if (saving) {\r\n      if (selectedGroups.length > 0) {\r\n        api\r\n          .invoke(\"PUT\", \"/api/v1/users-groups-bulk\", {\r\n            groups: selectedGroups,\r\n            users: checkedUsers,\r\n          })\r\n          .then(() => {\r\n            isSaving(false);\r\n            setAccepted(true);\r\n          })\r\n          .catch((err: ErrorResponseHandler) => {\r\n            isSaving(false);\r\n            dispatch(setModalErrorSnackMessage(err));\r\n          });\r\n      } else {\r\n        isSaving(false);\r\n        dispatch(\r\n          setModalErrorSnackMessage({\r\n            errorMessage: \"You need to select at least one group to assign\",\r\n            detailedError: \"\",\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }, [\r\n    saving,\r\n    isSaving,\r\n    closeModalAndRefresh,\r\n    selectedGroups,\r\n    checkedUsers,\r\n    dispatch,\r\n  ]);\r\n\r\n  //Fetch Actions\r\n  const setSaving = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    isSaving(true);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setSelectedGroups([]);\r\n  };\r\n\r\n  return (\r\n    <ModalWrapper\r\n      modalOpen={open}\r\n      onClose={() => {\r\n        closeModalAndRefresh(accepted);\r\n      }}\r\n      title={\r\n        accepted\r\n          ? \"The selected users were added to the following groups.\"\r\n          : \"Add Users to Group\"\r\n      }\r\n      titleIcon={<AddMembersToGroupIcon />}\r\n    >\r\n      {accepted ? (\r\n        <React.Fragment>\r\n          <Grid container>\r\n            <PredefinedList\r\n              label={\"Groups\"}\r\n              content={selectedGroups.join(\", \")}\r\n            />\r\n            <PredefinedList label={\"Users\"} content={checkedUsers.join(\", \")} />\r\n          </Grid>\r\n          <br />\r\n          <br />\r\n          <br />\r\n        </React.Fragment>\r\n      ) : (\r\n        <form noValidate autoComplete=\"off\" onSubmit={setSaving}>\r\n          <Grid container>\r\n            <Grid item xs={12} className={classes.modalFormScrollable}>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <PredefinedList\r\n                  label={\"Selected Users\"}\r\n                  content={checkedUsers.join(\", \")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <GroupsSelectors\r\n                  selectedGroups={selectedGroups}\r\n                  setSelectedGroups={setSelectedGroups}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.modalButtonBar}>\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={resetForm}\r\n              >\r\n                Clear\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={saving || selectedGroups.length < 1}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Grid>\r\n            {saving && (\r\n              <Grid item xs={12}>\r\n                <LinearProgress />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </form>\r\n      )}\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(BulkAddToGroup);\r\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","actionButton","Fragment","className","prefinedContainer","item","xs","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","modalStyleUtils","formFieldStyles","open","checkedUsers","closeModalAndRefresh","dispatch","useAppDispatch","useState","saving","isSaving","accepted","setAccepted","selectedGroups","setSelectedGroups","useEffect","length","api","groups","users","then","catch","err","setModalErrorSnackMessage","errorMessage","detailedError","modalOpen","onClose","title","titleIcon","container","join","noValidate","autoComplete","onSubmit","event","preventDefault","modalFormScrollable","formFieldRow","modalButtonBar","type","variant","color","onClick","disabled"],"sourceRoot":""}