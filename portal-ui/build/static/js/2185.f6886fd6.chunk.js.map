{"version":3,"file":"static/js/2185.f6886fd6.chunk.js","mappings":"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","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreatePathModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\r\nimport { Button, Grid } from \"@mui/material\";\r\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  formFieldStyles,\r\n  modalStyleUtils,\r\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\r\nimport { connect } from \"react-redux\";\r\nimport { encodeURLString } from \"../../../../../../common/utils\";\r\n\r\nimport { BucketObjectItem } from \"./types\";\r\nimport { CreateNewPathIcon } from \"../../../../../../icons\";\r\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\r\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\r\n\r\ninterface ICreatePath {\r\n  classes: any;\r\n  modalOpen: boolean;\r\n  bucketName: string;\r\n  folderName: string;\r\n  onClose: () => any;\r\n  existingFiles: BucketObjectItem[];\r\n  simplePath: string | null;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...modalStyleUtils,\r\n    ...formFieldStyles,\r\n  });\r\n\r\nconst CreatePathModal = ({\r\n  modalOpen,\r\n  folderName,\r\n  bucketName,\r\n  onClose,\r\n  classes,\r\n  existingFiles,\r\n  simplePath,\r\n}: ICreatePath) => {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [pathUrl, setPathUrl] = useState(\"\");\r\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\r\n  const [currentPath, setCurrentPath] = useState(bucketName);\r\n\r\n  useEffect(() => {\r\n    if (simplePath) {\r\n      const newPath = `${bucketName}${\r\n        !bucketName.endsWith(\"/\") && !simplePath.startsWith(\"/\") ? \"/\" : \"\"\r\n      }${simplePath}`;\r\n\r\n      setCurrentPath(newPath);\r\n    }\r\n  }, [simplePath, bucketName]);\r\n\r\n  const resetForm = () => {\r\n    setPathUrl(\"\");\r\n  };\r\n\r\n  const createProcess = () => {\r\n    let folderPath = \"/\";\r\n\r\n    if (simplePath) {\r\n      folderPath = simplePath.endsWith(\"/\") ? simplePath : `${simplePath}/`;\r\n    }\r\n\r\n    const sharesName = (record: BucketObjectItem) =>\r\n      record.name === folderPath + pathUrl;\r\n\r\n    if (existingFiles.findIndex(sharesName) !== -1) {\r\n      dispatch(\r\n        setModalErrorSnackMessage({\r\n          errorMessage: \"Folder cannot have the same name as an existing file\",\r\n          detailedError: \"\",\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    const cleanPathURL = pathUrl\r\n      .split(\"/\")\r\n      .filter((splitItem) => splitItem.trim() !== \"\")\r\n      .join(\"/\");\r\n\r\n    const newPath = `/buckets/${bucketName}/browse/${encodeURLString(\r\n      `${folderPath}${cleanPathURL}/`\r\n    )}`;\r\n    navigate(newPath);\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    let valid = true;\r\n    if (pathUrl.trim().length === 0) {\r\n      valid = false;\r\n    }\r\n    setIsFormValid(valid);\r\n  }, [pathUrl]);\r\n\r\n  const inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPathUrl(e.target.value);\r\n  };\r\n\r\n  const keyPressed = (e: any) => {\r\n    if (e.code === \"Enter\" && pathUrl !== \"\") {\r\n      createProcess();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ModalWrapper\r\n        modalOpen={modalOpen}\r\n        title=\"Choose or create a new path\"\r\n        onClose={onClose}\r\n        titleIcon={<CreateNewPathIcon />}\r\n      >\r\n        <Grid container>\r\n          <Grid item xs={12} className={classes.formFieldRow}>\r\n            <strong>Current Path:</strong> <br />\r\n            <div\r\n              style={{\r\n                textOverflow: \"ellipsis\",\r\n                whiteSpace: \"nowrap\",\r\n                overflow: \"hidden\",\r\n                fontSize: 14,\r\n                textAlign: \"left\",\r\n              }}\r\n              dir={\"rtl\"}\r\n            >\r\n              {currentPath}\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.formFieldRow}>\r\n            <InputBoxWrapper\r\n              value={pathUrl}\r\n              label={\"New Folder Path\"}\r\n              id={\"folderPath\"}\r\n              name={\"folderPath\"}\r\n              placeholder={\"Enter the new Folder Path\"}\r\n              onChange={inputChange}\r\n              onKeyPress={keyPressed}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.modalButtonBar}>\r\n            <Button\r\n              type=\"button\"\r\n              color=\"primary\"\r\n              variant=\"outlined\"\r\n              onClick={resetForm}\r\n            >\r\n              Clear\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={!isFormValid}\r\n              onClick={createProcess}\r\n            >\r\n              Create\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </ModalWrapper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ objectBrowser }: AppState) => ({\r\n  simplePath: objectBrowser.simplePath,\r\n});\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport default connector(withStyles(styles)(CreatePathModal));\r\n"],"names":["connector","connect","simplePath","objectBrowser","withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","modalOpen","bucketName","folderName","onClose","classes","existingFiles","dispatch","useAppDispatch","navigate","useNavigate","useState","pathUrl","setPathUrl","isFormValid","setIsFormValid","currentPath","setCurrentPath","useEffect","newPath","endsWith","startsWith","createProcess","folderPath","findIndex","record","name","cleanPathURL","split","filter","splitItem","trim","join","encodeURLString","setModalErrorSnackMessage","errorMessage","detailedError","valid","length","title","titleIcon","container","item","xs","className","formFieldRow","style","textOverflow","whiteSpace","overflow","fontSize","textAlign","dir","value","label","id","placeholder","onChange","e","target","onKeyPress","code","required","modalButtonBar","type","color","variant","onClick","disabled"],"sourceRoot":""}