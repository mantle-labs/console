{"version":3,"file":"static/js/9134.2b34a827.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { predefinedList } from \"../common/styleLibrary\";\r\n\r\ninterface IPredefinedList {\r\n  classes: any;\r\n  label?: string;\r\n  content: any;\r\n  multiLine?: boolean;\r\n  actionButton?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...predefinedList,\r\n  });\r\n\r\nconst PredefinedList = ({\r\n  classes,\r\n  label = \"\",\r\n  content,\r\n  multiLine = false,\r\n  actionButton,\r\n}: IPredefinedList) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid className={classes.prefinedContainer}>\r\n        {label !== \"\" && (\r\n          <Grid item xs={12} className={classes.predefinedTitle}>\r\n            {label}\r\n          </Grid>\r\n        )}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          className={`${classes.predefinedList} ${\r\n            actionButton ? classes.includesActionButton : \"\"\r\n          }`}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            className={\r\n              multiLine ? classes.innerContentMultiline : classes.innerContent\r\n            }\r\n          >\r\n            {content}\r\n          </Grid>\r\n          {actionButton && (\r\n            <div className={classes.overlayShareOption}>{actionButton}</div>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(PredefinedList);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  deleteDialogStyles,\r\n  snackBarCommon,\r\n} from \"../FormComponents/common/styleLibrary\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport MainError from \"../MainError/MainError\";\r\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\r\n\r\ninterface IModalProps {\r\n  classes: any;\r\n  onClose: () => void;\r\n  modalOpen: boolean;\r\n  title: string | React.ReactNode;\r\n  children: any;\r\n  wideLimit?: boolean;\r\n  noContentPadding?: boolean;\r\n  titleIcon?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...deleteDialogStyles,\r\n    content: {\r\n      padding: 25,\r\n      paddingBottom: 0,\r\n    },\r\n    customDialogSize: {\r\n      width: \"100%\",\r\n      maxWidth: 765,\r\n    },\r\n    ...snackBarCommon,\r\n  });\r\n\r\nconst ModalWrapper = ({\r\n  onClose,\r\n  modalOpen,\r\n  title,\r\n  children,\r\n  classes,\r\n  wideLimit = true,\r\n  noContentPadding,\r\n  titleIcon = null,\r\n}: IModalProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n\r\n  const modalSnackMessage = useSelector(\r\n    (state: AppState) => state.system.modalSnackBar\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (modalSnackMessage) {\r\n      if (modalSnackMessage.message === \"\") {\r\n        setOpenSnackbar(false);\r\n        return;\r\n      }\r\n      // Open SnackBar\r\n      if (modalSnackMessage.type !== \"error\") {\r\n        setOpenSnackbar(true);\r\n      }\r\n    }\r\n  }, [modalSnackMessage]);\r\n\r\n  const closeSnackBar = () => {\r\n    setOpenSnackbar(false);\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  };\r\n\r\n  const customSize = wideLimit\r\n    ? {\r\n        classes: {\r\n          paper: classes.customDialogSize,\r\n        },\r\n      }\r\n    : { maxWidth: \"lg\" as const, fullWidth: true };\r\n\r\n  let message = \"\";\r\n\r\n  if (modalSnackMessage) {\r\n    message = modalSnackMessage.detailedErrorMsg;\r\n    if (\r\n      modalSnackMessage.detailedErrorMsg === \"\" ||\r\n      modalSnackMessage.detailedErrorMsg.length < 5\r\n    ) {\r\n      message = modalSnackMessage.message;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={modalOpen}\r\n      classes={classes}\r\n      {...customSize}\r\n      scroll={\"paper\"}\r\n      onClose={(event, reason) => {\r\n        if (reason !== \"backdropClick\") {\r\n          onClose(); // close on Esc but not on click outside\r\n        }\r\n      }}\r\n      className={classes.root}\r\n    >\r\n      <DialogTitle className={classes.title}>\r\n        <div className={classes.titleText}>\r\n          {titleIcon} {title}\r\n        </div>\r\n        <div className={classes.closeContainer}>\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            id={\"close\"}\r\n            className={classes.closeButton}\r\n            onClick={onClose}\r\n            disableRipple\r\n            size=\"small\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <MainError isModal={true} />\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        className={classes.snackBarModal}\r\n        onClose={() => {\r\n          closeSnackBar();\r\n        }}\r\n        message={message}\r\n        ContentProps={{\r\n          className: `${classes.snackBar} ${\r\n            modalSnackMessage && modalSnackMessage.type === \"error\"\r\n              ? classes.errorSnackBar\r\n              : \"\"\r\n          }`,\r\n        }}\r\n        autoHideDuration={\r\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\r\n        }\r\n      />\r\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ModalWrapper);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { LinearProgress } from \"@mui/material\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { policySort } from \"../../../utils/sortFunctions\";\r\nimport {\r\n  actionsTray,\r\n  searchField,\r\n  selectorsCommon,\r\n  tableStyles,\r\n} from \"../Common/FormComponents/common/styleLibrary\";\r\nimport { PolicyList } from \"./types\";\r\n\r\nimport { ErrorResponseHandler } from \"../../../common/types\";\r\nimport api from \"../../../common/api\";\r\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\r\nimport SearchBox from \"../Common/SearchBox\";\r\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\r\nimport { AppState, useAppDispatch } from \"../../../store\";\r\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface ISelectPolicyProps {\r\n  classes: any;\r\n  selectedPolicy?: string[];\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    noFound: {\r\n      textAlign: \"center\",\r\n      padding: \"10px 0\",\r\n    },\r\n    searchBox: {\r\n      flex: 1,\r\n    },\r\n    fieldLabel: {\r\n      fontWeight: 400,\r\n      width: 160,\r\n      marginRight: 10,\r\n    },\r\n    tableBlock: {\r\n      ...tableStyles.tableBlock,\r\n    },\r\n    filterBox: {\r\n      display: \"flex\",\r\n      marginBottom: 15,\r\n      alignItems: \"center\",\r\n      \"& span\": {\r\n        fontSize: 14,\r\n      },\r\n    },\r\n    ...searchField,\r\n    ...tableStyles,\r\n    ...actionsTray,\r\n    ...selectorsCommon,\r\n  });\r\n\r\nconst PolicySelectors = ({\r\n  classes,\r\n  selectedPolicy = [],\r\n}: ISelectPolicyProps) => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useAppDispatch();\r\n  // Local State\r\n  const [records, setRecords] = useState<any[]>([]);\r\n  const [loading, isLoading] = useState<boolean>(false);\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n\r\n  const currentPolicies = useSelector(\r\n    (state: AppState) => state.createUser.selectedPolicies\r\n  );\r\n\r\n  const fetchPolicies = useCallback(() => {\r\n    isLoading(true);\r\n\r\n    api\r\n      .invoke(\"GET\", `/api/v1/policies?limit=1000`)\r\n      .then((res: PolicyList) => {\r\n        const policies = res.policies === null ? [] : res.policies;\r\n        isLoading(false);\r\n        setRecords(policies.sort(policySort));\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        isLoading(false);\r\n        dispatch(setModalErrorSnackMessage(err));\r\n      });\r\n  }, [dispatch]);\r\n\r\n  //Effects\r\n  useEffect(() => {\r\n    isLoading(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      fetchPolicies();\r\n    }\r\n  }, [loading, fetchPolicies]);\r\n\r\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const targetD = e.target;\r\n    const value = targetD.value;\r\n    const checked = targetD.checked;\r\n\r\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\r\n\r\n    if (checked) {\r\n      // If the user has checked this field we need to push this to checkedUsersList\r\n      elements.push(value);\r\n    } else {\r\n      // User has unchecked this field, we need to remove it from the list\r\n      elements = elements.filter((element) => element !== value);\r\n    }\r\n    // remove empty values\r\n    elements = elements.filter((element) => element !== \"\");\r\n\r\n    dispatch(setSelectedPolicies(elements));\r\n  };\r\n\r\n  const filteredRecords = records.filter((elementItem) =>\r\n    elementItem.name.includes(filter)\r\n  );\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={12}>\r\n        {loading && <LinearProgress />}\r\n        {records.length > 0 ? (\r\n          <React.Fragment>\r\n            <Grid item xs={12} className={classes.filterBox}>\r\n              <span className={classes.fieldLabel}>{t(\"assign_policies\")}</span>\r\n              <div className={classes.searchBox}>\r\n                <SearchBox\r\n                  placeholder={t(\"policy_search_placeholder\")}\r\n                  onChange={(value) => {\r\n                    setFilter(value);\r\n                  }}\r\n                  value={filter}\r\n                />\r\n              </div>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              className={classes.tableBlock}\r\n              style={{ paddingBottom: 16 }}\r\n            >\r\n              <TableWrapper\r\n                columns={[{ label: t(\"policy\"), elementKey: \"name\" }]}\r\n                onSelect={selectionChanged}\r\n                selectedItems={currentPolicies}\r\n                isLoading={loading}\r\n                records={filteredRecords}\r\n                entityName=\"Policies\"\r\n                idField=\"name\"\r\n                customPaperHeight={classes.multiSelectTable}\r\n              />\r\n            </Grid>\r\n          </React.Fragment>\r\n        ) : (\r\n          <div className={classes.noFound}>{t(\"no_policies_available\")}</div>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(PolicySelectors);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useEffect, useState, Fragment } from \"react\";\r\n\r\nimport get from \"lodash/get\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { Button, LinearProgress } from \"@mui/material\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {\r\n  modalBasic,\r\n  spacingUtils,\r\n  tableStyles,\r\n} from \"../Common/FormComponents/common/styleLibrary\";\r\nimport { User } from \"../Users/types\";\r\n\r\nimport { ErrorResponseHandler } from \"../../../common/types\";\r\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\r\nimport api from \"../../../common/api\";\r\nimport PolicySelectors from \"./PolicySelectors\";\r\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\r\nimport { encodeURLString } from \"../../../common/utils\";\r\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\r\nimport { AppState, useAppDispatch } from \"../../../store\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\r\n\r\ninterface ISetPolicyProps {\r\n  classes: any;\r\n  closeModalAndRefresh: () => void;\r\n  selectedUser: User | null;\r\n  selectedGroups: string[] | null;\r\n  open: boolean;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...modalBasic,\r\n    ...spacingUtils,\r\n    tableBlock: {\r\n      ...tableStyles.tableBlock,\r\n      marginTop: 15,\r\n    },\r\n    buttonContainer: {\r\n      textAlign: \"right\",\r\n      marginTop: \".9rem\",\r\n    },\r\n  });\r\n\r\nconst SetPolicy = ({\r\n  classes,\r\n  closeModalAndRefresh,\r\n  selectedUser,\r\n  selectedGroups,\r\n  open,\r\n}: ISetPolicyProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  //Local States\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\r\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\r\n  const currentPolicies = useSelector(\r\n    (state: AppState) => state.createUser.selectedPolicies\r\n  );\r\n  const setPolicyAction = () => {\r\n    let users = null;\r\n    let groups = null;\r\n    if (selectedGroups !== null) {\r\n      groups = selectedGroups;\r\n    } else {\r\n      if (selectedUser !== null) {\r\n        users = [selectedUser.accessKey] || [\" \"];\r\n      }\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    api\r\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\r\n        name: currentPolicies,\r\n        groups: groups,\r\n        users: users,\r\n      })\r\n      .then(() => {\r\n        setLoading(false);\r\n        closeModalAndRefresh();\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        setLoading(false);\r\n        dispatch(setModalErrorSnackMessage(err));\r\n      });\r\n  };\r\n\r\n  const fetchGroupInformation = () => {\r\n    if (selectedGroups?.length === 1) {\r\n      api\r\n        .invoke(\"GET\", `/api/v1/group/${encodeURLString(selectedGroups[0])}`)\r\n        .then((res: any) => {\r\n          const groupPolicy: String = get(res, \"policy\", \"\");\r\n          setActualPolicy(groupPolicy.split(\",\"));\r\n          setSelectedPolicy(groupPolicy.split(\",\"));\r\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\r\n        })\r\n        .catch((err: ErrorResponseHandler) => {\r\n          dispatch(setModalErrorSnackMessage(err));\r\n          setLoading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setSelectedPolicy(actualPolicy);\r\n    dispatch(setSelectedPolicies(actualPolicy));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      if (selectedGroups?.length === 1) {\r\n        fetchGroupInformation();\r\n        return;\r\n      }\r\n\r\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\r\n      setActualPolicy(userPolicy);\r\n      setSelectedPolicy(userPolicy);\r\n      dispatch(setSelectedPolicies(userPolicy));\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [open, selectedGroups?.length, selectedUser]);\r\n\r\n  const userName = get(selectedUser, \"accessKey\", \"\");\r\n\r\n  return (\r\n    <ModalWrapper\r\n      onClose={() => {\r\n        closeModalAndRefresh();\r\n      }}\r\n      modalOpen={open}\r\n      title=\"Set Policies\"\r\n    >\r\n      <Grid container>\r\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\r\n          <Fragment>\r\n            <Grid item xs={12}>\r\n              <PredefinedList\r\n                label={`${t(\"selected\")} ${selectedGroups !== null ? t(\"group\") : t(\"user\")}`}\r\n                content={selectedGroups !== null ? selectedGroups[0] : userName}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <PredefinedList\r\n                label={t(\"current_policy\")}\r\n                content={actualPolicy.join(\", \")}\r\n              />\r\n            </Grid>\r\n          </Fragment>\r\n        )}\r\n        {selectedGroups && selectedGroups?.length > 1 && (\r\n          <PredefinedList\r\n            label={t(\"selected_group\")}\r\n            content={selectedGroups.join(\", \")}\r\n          />\r\n        )}\r\n        <Grid item xs={12}>\r\n          <div className={classes.tableBlock}>\r\n            <PolicySelectors selectedPolicy={selectedPolicy} />\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12} className={classes.buttonContainer}>\r\n        <Button\r\n          type=\"button\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          className={classes.spacerRight}\r\n          onClick={resetSelection}\r\n        >\r\n          Reset\r\n        </Button>\r\n        <Button\r\n          type=\"button\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={loading}\r\n          onClick={setPolicyAction}\r\n        >\r\n          Save\r\n        </Button>\r\n      </Grid>\r\n      {loading && (\r\n        <Grid item xs={12}>\r\n          <LinearProgress />\r\n        </Grid>\r\n      )}\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(SetPolicy);\r\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","actionButton","Fragment","className","prefinedContainer","item","xs","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","deleteDialogStyles","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","onClose","modalOpen","title","children","wideLimit","noContentPadding","titleIcon","dispatch","useAppDispatch","useState","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","type","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","titleText","closeContainer","id","closeButton","onClick","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","noFound","textAlign","searchBox","flex","fieldLabel","fontWeight","marginRight","tableBlock","tableStyles","filterBox","display","marginBottom","alignItems","fontSize","searchField","actionsTray","selectorsCommon","t","selectedPolicy","useTranslation","records","setRecords","loading","isLoading","filter","setFilter","currentPolicies","createUser","selectedPolicies","fetchPolicies","useCallback","api","then","res","policies","sort","policySort","catch","err","setModalErrorSnackMessage","filteredRecords","elementItem","name","includes","container","placeholder","onChange","value","style","columns","elementKey","onSelect","e","targetD","target","checked","elements","push","element","setSelectedPolicies","selectedItems","entityName","idField","customPaperHeight","multiSelectTable","modalBasic","spacingUtils","marginTop","buttonContainer","closeModalAndRefresh","selectedUser","selectedGroups","setLoading","actualPolicy","setActualPolicy","setSelectedPolicy","encodeURLString","groupPolicy","get","split","userPolicy","userName","join","variant","color","spacerRight","disabled","users","groups","accessKey"],"sourceRoot":""}