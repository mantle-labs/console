{"version":3,"file":"static/js/8455.5b1f0c12.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EditAccessRule.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useState } from \"react\";\r\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\r\nimport { Button, Grid } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  modalStyleUtils,\r\n  spacingUtils,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\n\r\nimport api from \"../../../../common/api\";\r\nimport { ErrorResponseHandler } from \"../../../../common/types\";\r\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\r\nimport { AddAccessRuleIcon } from \"../../../../icons\";\r\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../../store\";\r\n\r\ninterface IEditAccessRule {\r\n  classes: any;\r\n  modalOpen: boolean;\r\n  onClose: () => any;\r\n  bucket: string;\r\n  toEdit: string;\r\n  initial: string;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...modalStyleUtils,\r\n    ...spacingUtils,\r\n  });\r\n\r\nconst EditAccessRule = ({\r\n  modalOpen,\r\n  onClose,\r\n  classes,\r\n  bucket,\r\n  toEdit,\r\n  initial,\r\n}: IEditAccessRule) => {\r\n  const dispatch = useAppDispatch();\r\n  const [selectedAccess, setSelectedAccess] = useState<any>(initial);\r\n\r\n  const accessOptions = [\r\n    { label: \"readonly\", value: \"readonly\" },\r\n    { label: \"writeonly\", value: \"writeonly\" },\r\n    { label: \"readwrite\", value: \"readwrite\" },\r\n  ];\r\n\r\n  const resetForm = () => {\r\n    setSelectedAccess(initial);\r\n  };\r\n\r\n  const createProcess = () => {\r\n    api\r\n      .invoke(\"PUT\", `/api/v1/bucket/${bucket}/access-rules`, {\r\n        prefix: toEdit,\r\n        access: selectedAccess,\r\n      })\r\n      .then((res: any) => {\r\n        onClose();\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n        onClose();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ModalWrapper\r\n        modalOpen={modalOpen}\r\n        title={`Edit Access Rule for ${`${bucket}/${toEdit || \"\"}`}`}\r\n        onClose={onClose}\r\n        titleIcon={<AddAccessRuleIcon />}\r\n      >\r\n        <Grid container>\r\n          <Grid item xs={12} className={classes.spacerTop}>\r\n            <SelectWrapper\r\n              id=\"access\"\r\n              name=\"Access\"\r\n              onChange={(e) => {\r\n                setSelectedAccess(e.target.value);\r\n              }}\r\n              label=\"Access\"\r\n              value={selectedAccess}\r\n              options={accessOptions}\r\n              disabled={false}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.modalButtonBar}>\r\n            <Button\r\n              type=\"button\"\r\n              color=\"primary\"\r\n              variant=\"outlined\"\r\n              onClick={resetForm}\r\n            >\r\n              Clear\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={createProcess}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </ModalWrapper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(EditAccessRule);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  deleteDialogStyles,\r\n  snackBarCommon,\r\n} from \"../FormComponents/common/styleLibrary\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport MainError from \"../MainError/MainError\";\r\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\r\n\r\ninterface IModalProps {\r\n  classes: any;\r\n  onClose: () => void;\r\n  modalOpen: boolean;\r\n  title: string | React.ReactNode;\r\n  children: any;\r\n  wideLimit?: boolean;\r\n  noContentPadding?: boolean;\r\n  titleIcon?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...deleteDialogStyles,\r\n    content: {\r\n      padding: 25,\r\n      paddingBottom: 0,\r\n    },\r\n    customDialogSize: {\r\n      width: \"100%\",\r\n      maxWidth: 765,\r\n    },\r\n    ...snackBarCommon,\r\n  });\r\n\r\nconst ModalWrapper = ({\r\n  onClose,\r\n  modalOpen,\r\n  title,\r\n  children,\r\n  classes,\r\n  wideLimit = true,\r\n  noContentPadding,\r\n  titleIcon = null,\r\n}: IModalProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n\r\n  const modalSnackMessage = useSelector(\r\n    (state: AppState) => state.system.modalSnackBar\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (modalSnackMessage) {\r\n      if (modalSnackMessage.message === \"\") {\r\n        setOpenSnackbar(false);\r\n        return;\r\n      }\r\n      // Open SnackBar\r\n      if (modalSnackMessage.type !== \"error\") {\r\n        setOpenSnackbar(true);\r\n      }\r\n    }\r\n  }, [modalSnackMessage]);\r\n\r\n  const closeSnackBar = () => {\r\n    setOpenSnackbar(false);\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  };\r\n\r\n  const customSize = wideLimit\r\n    ? {\r\n        classes: {\r\n          paper: classes.customDialogSize,\r\n        },\r\n      }\r\n    : { maxWidth: \"lg\" as const, fullWidth: true };\r\n\r\n  let message = \"\";\r\n\r\n  if (modalSnackMessage) {\r\n    message = modalSnackMessage.detailedErrorMsg;\r\n    if (\r\n      modalSnackMessage.detailedErrorMsg === \"\" ||\r\n      modalSnackMessage.detailedErrorMsg.length < 5\r\n    ) {\r\n      message = modalSnackMessage.message;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={modalOpen}\r\n      classes={classes}\r\n      {...customSize}\r\n      scroll={\"paper\"}\r\n      onClose={(event, reason) => {\r\n        if (reason !== \"backdropClick\") {\r\n          onClose(); // close on Esc but not on click outside\r\n        }\r\n      }}\r\n      className={classes.root}\r\n    >\r\n      <DialogTitle className={classes.title}>\r\n        <div className={classes.titleText}>\r\n          {titleIcon} {title}\r\n        </div>\r\n        <div className={classes.closeContainer}>\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            id={\"close\"}\r\n            className={classes.closeButton}\r\n            onClick={onClose}\r\n            disableRipple\r\n            size=\"small\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <MainError isModal={true} />\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        className={classes.snackBarModal}\r\n        onClose={() => {\r\n          closeSnackBar();\r\n        }}\r\n        message={message}\r\n        ContentProps={{\r\n          className: `${classes.snackBar} ${\r\n            modalSnackMessage && modalSnackMessage.type === \"error\"\r\n              ? classes.errorSnackBar\r\n              : \"\"\r\n          }`,\r\n        }}\r\n        autoHideDuration={\r\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\r\n        }\r\n      />\r\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ModalWrapper);\r\n"],"names":["withStyles","theme","createStyles","modalStyleUtils","spacingUtils","modalOpen","onClose","classes","bucket","toEdit","initial","dispatch","useAppDispatch","useState","selectedAccess","setSelectedAccess","title","titleIcon","container","item","xs","className","spacerTop","id","name","onChange","e","target","value","label","options","disabled","modalButtonBar","type","color","variant","onClick","api","prefix","access","then","res","catch","err","setErrorSnackMessage","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}