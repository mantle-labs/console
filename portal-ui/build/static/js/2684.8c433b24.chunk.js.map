{"version":3,"file":"static/js/2684.8c433b24.chunk.js","mappings":"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","sources":["icons/CertificateIcon.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/TenantDetails/TenantSecurity.tsx","screens/Console/Tenants/securityContextSelector.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport * as React from \"react\";\r\nimport { SVGProps } from \"react\";\r\n\r\nconst CertificateIcon = (props: SVGProps<SVGSVGElement>) => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className={`min-icon`}\r\n      fill={\"currentcolor\"}\r\n      viewBox=\"0 0 256 256\"\r\n      {...props}\r\n    >\r\n      <defs>\r\n        <clipPath id=\"certificate_svg__a\">\r\n          <path\r\n            data-name=\"Rect\\xE1ngulo 2156\"\r\n            fill=\"#07193e\"\r\n            d=\"M0 0h256v222.048H0z\"\r\n          />\r\n        </clipPath>\r\n      </defs>\r\n      <g\r\n        data-name=\"Grupo 4763\"\r\n        transform=\"translate(0 17)\"\r\n        clipPath=\"url(#certificate_svg__a)\"\r\n        fill=\"#07193e\"\r\n      >\r\n        <path\r\n          data-name=\"Trazado 8152\"\r\n          d=\"M240-.002H16a16 16 0 0 0-16 16v160a16 16 0 0 0 16 16h120l4.64-5.6 7.44-9.12A66.72 66.72 0 0 1 256 98.958v-82.96a16 16 0 0 0-16-16m-130.96 149.7H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 1 1 0 14.592m0-56H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 0 1 0 14.592m66.96-39.3a6.419 6.419 0 0 1-6.4 6.4H46.4a6.419 6.419 0 0 1-6.4-6.4v-1.792a6.419 6.419 0 0 1 6.4-6.4h123.2a6.419 6.419 0 0 1 6.4 6.4Z\"\r\n        />\r\n        <path\r\n          data-name=\"Trazado 8153\"\r\n          d=\"M256 137.486a50.96 50.96 0 1 0-86.16 36.72l-15.52 18.96 7.2 28.88 29.28-35.68a50.018 50.018 0 0 0 28.4 0l29.28 35.68 7.2-28.88-15.52-18.96a50.75 50.75 0 0 0 15.84-36.72m-50.928 29.688a29.688 29.688 0 0 1-.072-59.376h.072a29.688 29.688 0 0 1 0 59.376\"\r\n        />\r\n      </g>\r\n      <path data-name=\"Rect\\xE1ngulo 2157\" fill=\"none\" d=\"M0 0h256v256H0z\" />\r\n    </svg>\r\n  );\r\n};\r\nexport default CertificateIcon;\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useState } from \"react\";\r\nimport get from \"lodash/get\";\r\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  fieldBasic,\r\n  fileInputStyles,\r\n  tooltipHelper,\r\n} from \"../common/styleLibrary\";\r\nimport { fileProcess } from \"./utils\";\r\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\r\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\r\n\r\ninterface InputBoxProps {\r\n  label: string;\r\n  classes: any;\r\n  onChange: (e: string, i: string) => void;\r\n  id: string;\r\n  name: string;\r\n  disabled?: boolean;\r\n  tooltip?: string;\r\n  required?: boolean;\r\n  error?: string;\r\n  accept?: string;\r\n  value?: string;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...fieldBasic,\r\n    ...tooltipHelper,\r\n    valueString: {\r\n      maxWidth: 350,\r\n      whiteSpace: \"nowrap\",\r\n      overflow: \"hidden\",\r\n      textOverflow: \"ellipsis\",\r\n      marginTop: 2,\r\n    },\r\n    fileInputField: {\r\n      margin: \"13px 0\",\r\n      \"@media (max-width: 900px)\": {\r\n        flexFlow: \"column\",\r\n      },\r\n    },\r\n    ...fileInputStyles,\r\n    inputLabel: {\r\n      ...fieldBasic.inputLabel,\r\n      fontWeight: \"normal\",\r\n    },\r\n    textBoxContainer: {\r\n      ...fieldBasic.textBoxContainer,\r\n      maxWidth: \"100%\",\r\n      border: \"1px solid #eaeaea\",\r\n      paddingLeft: \"15px\",\r\n    },\r\n  });\r\n\r\nconst FileSelector = ({\r\n  label,\r\n  classes,\r\n  onChange,\r\n  id,\r\n  name,\r\n  disabled = false,\r\n  tooltip = \"\",\r\n  required,\r\n  error = \"\",\r\n  accept = \"\",\r\n  value = \"\",\r\n}: InputBoxProps) => {\r\n  const [showFileSelector, setShowSelector] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\r\n          classes.fieldContainer\r\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\r\n      >\r\n        {label !== \"\" && (\r\n          <InputLabel\r\n            htmlFor={id}\r\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\r\n              classes.inputLabel\r\n            }`}\r\n          >\r\n            <span>\r\n              {label}\r\n              {required ? \"*\" : \"\"}\r\n            </span>\r\n            {tooltip !== \"\" && (\r\n              <div className={classes.tooltipContainer}>\r\n                <Tooltip title={tooltip} placement=\"top-start\">\r\n                  <div className={classes.tooltip}>\r\n                    <HelpIcon />\r\n                  </div>\r\n                </Tooltip>\r\n              </div>\r\n            )}\r\n          </InputLabel>\r\n        )}\r\n\r\n        {showFileSelector || value === \"\" ? (\r\n          <div className={classes.textBoxContainer}>\r\n            <input\r\n              type=\"file\"\r\n              name={name}\r\n              onChange={(e) => {\r\n                const fileName = get(e, \"target.files[0].name\", \"\");\r\n                fileProcess(e, (data: any) => {\r\n                  onChange(data, fileName);\r\n                });\r\n              }}\r\n              accept={accept}\r\n              required={required}\r\n              disabled={disabled}\r\n              className={classes.fileInputField}\r\n            />\r\n\r\n            {value !== \"\" && (\r\n              <IconButton\r\n                color=\"primary\"\r\n                aria-label=\"upload picture\"\r\n                component=\"span\"\r\n                onClick={() => {\r\n                  setShowSelector(false);\r\n                }}\r\n                disableRipple={false}\r\n                disableFocusRipple={false}\r\n                size=\"small\"\r\n              >\r\n                <CancelIcon />\r\n              </IconButton>\r\n            )}\r\n\r\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\r\n          </div>\r\n        ) : (\r\n          <div className={classes.fileReselect}>\r\n            <div className={classes.valueString}>{value}</div>\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"upload picture\"\r\n              component=\"span\"\r\n              onClick={() => {\r\n                setShowSelector(true);\r\n              }}\r\n              disableRipple={false}\r\n              disableFocusRipple={false}\r\n              size=\"small\"\r\n            >\r\n              <AttachFileIcon />\r\n            </IconButton>\r\n          </div>\r\n        )}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(FileSelector);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nexport const fileProcess = (evt: any, callback: any) => {\r\n  const file = evt.target.files[0];\r\n  const reader = new FileReader();\r\n  reader.readAsDataURL(file);\r\n\r\n  reader.onload = () => {\r\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\r\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\r\n    const fileBase64 = reader.result;\r\n    if (fileBase64) {\r\n      const fileArray = fileBase64.toString().split(\"base64,\");\r\n\r\n      if (fileArray.length === 2) {\r\n        callback(fileArray[1]);\r\n      }\r\n    }\r\n  };\r\n};\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React from \"react\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { ICertificateInfo } from \"../../Tenants/types\";\r\nimport LanguageIcon from \"@mui/icons-material/Language\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\r\nimport Moment from \"react-moment\";\r\nimport CertificateIcon from \"../../../../icons/CertificateIcon\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    certificateIcon: {\r\n      float: \"left\",\r\n      paddingTop: \"5px !important\",\r\n      paddingRight: \"10px !important\",\r\n    },\r\n    certificateInfo: { float: \"right\" },\r\n    certificateWrapper: {\r\n      height: \"auto\",\r\n      margin: 5,\r\n      border: \"1px solid #E2E2E2\",\r\n      userSelect: \"text\",\r\n      borderRadius: 4,\r\n      \"& h6\": {\r\n        fontWeight: \"bold\",\r\n      },\r\n      \"& div\": {\r\n        padding: 0,\r\n      },\r\n    },\r\n    certificateExpiry: {\r\n      color: \"#616161\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      flexWrap: \"wrap\",\r\n      marginBottom: 5,\r\n      \"& .label\": {\r\n        fontWeight: \"bold\",\r\n      },\r\n    },\r\n    certificateDomains: {\r\n      color: \"#616161\",\r\n      \"& .label\": {\r\n        fontWeight: \"bold\",\r\n      },\r\n    },\r\n    certificatesList: {\r\n      border: \"1px solid #E2E2E2\",\r\n      borderRadius: 4,\r\n      color: \"#616161\",\r\n      textTransform: \"lowercase\",\r\n      overflowY: \"scroll\",\r\n      maxHeight: 145,\r\n      marginBottom: 10,\r\n    },\r\n    certificatesListItem: {\r\n      padding: \"0px 16px\",\r\n      borderBottom: \"1px solid #E2E2E2\",\r\n      \"& div\": {\r\n        minWidth: 0,\r\n      },\r\n      \"& svg\": {\r\n        fontSize: 12,\r\n        marginRight: 10,\r\n        opacity: 0.5,\r\n      },\r\n      \"& span\": {\r\n        fontSize: 12,\r\n      },\r\n    },\r\n  });\r\n\r\ninterface ITLSCertificate {\r\n  classes: any;\r\n  certificateInfo: ICertificateInfo;\r\n  onDelete: any;\r\n}\r\n\r\nconst TLSCertificate = ({\r\n  classes,\r\n  certificateInfo,\r\n  onDelete = () => {},\r\n}: ITLSCertificate) => {\r\n  const certificates = certificateInfo.domains || [];\r\n  return (\r\n    <Chip\r\n      key={certificateInfo.name}\r\n      variant=\"outlined\"\r\n      color=\"primary\"\r\n      className={classes.certificateWrapper}\r\n      label={\r\n        <Container>\r\n          <Grid item xs={1} className={classes.certificateIcon}>\r\n            <CertificateIcon />\r\n          </Grid>\r\n          <Grid item xs={11} className={classes.certificateInfo}>\r\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\r\n              {certificateInfo.name}\r\n            </Typography>\r\n            <Box className={classes.certificateExpiry}>\r\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\r\n              &nbsp;\r\n              <span className={\"label\"}>Expiry:&nbsp;</span>\r\n              <span>\r\n                <Moment format=\"YYYY/MM/DD\">{certificateInfo.expiry}</Moment>\r\n              </span>\r\n            </Box>\r\n            <Divider />\r\n            <br />\r\n            <Box className={classes.certificateDomains}>\r\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\r\n            </Box>\r\n            <List className={classes.certificatesList}>\r\n              {certificates.map((dom) => (\r\n                <ListItem className={classes.certificatesListItem}>\r\n                  <ListItemAvatar>\r\n                    <LanguageIcon />\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary={dom} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Grid>\r\n        </Container>\r\n      }\r\n      onDelete={onDelete}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(TLSCertificate);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport { Button, DialogContentText, IconButton } from \"@mui/material\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {\r\n  fsGroupChangePolicyType,\r\n  ICertificateInfo,\r\n  ITenantSecurityResponse,\r\n} from \"../types\";\r\nimport {\r\n  containerForHeader,\r\n  createTenantCommon,\r\n  formFieldStyles,\r\n  modalBasic,\r\n  spacingUtils,\r\n  tenantDetailsStyles,\r\n  wizardCommon,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\n\r\nimport { KeyPair } from \"../ListTenants/utils\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport { ErrorResponseHandler } from \"../../../../common/types\";\r\nimport { AddIcon, ConfirmModalIcon } from \"../../../../icons\";\r\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\r\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\r\nimport api from \"../../../../common/api\";\r\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\r\nimport Loader from \"../../Common/Loader/Loader\";\r\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\r\nimport SecurityContextSelector from \"../securityContextSelector\";\r\nimport {\r\n  setRunAsUser,\r\n  setFSGroup,\r\n  setRunAsGroup,\r\n  setRunAsNonRoot,\r\n  setFSGroupChangePolicy,\r\n} from \"../tenantSecurityContextSlice\";\r\nimport RemoveIcon from \"../../../../icons/RemoveIcon\";\r\n\r\ninterface ITenantSecurity {\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...tenantDetailsStyles,\r\n    ...spacingUtils,\r\n    minioCertificateRows: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-start\",\r\n      borderBottom: \"1px solid #EAEAEA\",\r\n      \"&:last-child\": {\r\n        borderBottom: 0,\r\n      },\r\n      \"@media (max-width: 900px)\": {\r\n        flex: 1,\r\n      },\r\n    },\r\n    minioCertsContainer: {\r\n      marginBottom: 15,\r\n    },\r\n    minioCACertsRow: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-start\",\r\n\r\n      borderBottom: \"1px solid #EAEAEA\",\r\n      \"&:last-child\": {\r\n        borderBottom: 0,\r\n      },\r\n      \"@media (max-width: 900px)\": {\r\n        flex: 1,\r\n\r\n        \"& div label\": {\r\n          minWidth: 50,\r\n        },\r\n      },\r\n    },\r\n    rowActions: {\r\n      display: \"flex\",\r\n      justifyContent: \"flex-end\",\r\n      \"@media (max-width: 900px)\": {\r\n        flex: 1,\r\n      },\r\n    },\r\n    overlayAction: {\r\n      marginLeft: 10,\r\n      \"& svg\": {\r\n        maxWidth: 15,\r\n        maxHeight: 15,\r\n      },\r\n      \"& button\": {\r\n        background: \"#EAEAEA\",\r\n      },\r\n    },\r\n    loaderAlign: {\r\n      textAlign: \"center\",\r\n    },\r\n    bold: { fontWeight: \"bold\" },\r\n    italic: { fontStyle: \"italic\" },\r\n    fileItem: {\r\n      marginRight: 10,\r\n      display: \"flex\",\r\n      \"& div label\": {\r\n        minWidth: 50,\r\n      },\r\n\r\n      \"@media (max-width: 900px)\": {\r\n        flexFlow: \"column\",\r\n      },\r\n    },\r\n    ...containerForHeader(theme.spacing(4)),\r\n    ...createTenantCommon,\r\n    ...formFieldStyles,\r\n    ...modalBasic,\r\n    ...wizardCommon,\r\n  });\r\n\r\nconst TenantSecurity = ({ classes }: ITenantSecurity) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\r\n  const loadingTenant = useSelector(\r\n    (state: AppState) => state.tenants.loadingTenant\r\n  );\r\n\r\n  const [isSending, setIsSending] = useState<boolean>(false);\r\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\r\n  const [enableTLS, setEnableTLS] = useState<boolean>(false);\r\n  const [enableAutoCert, setEnableAutoCert] = useState<boolean>(false);\r\n  const [enableCustomCerts, setEnableCustomCerts] = useState<boolean>(false);\r\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\r\n    string[]\r\n  >([]);\r\n  // MinIO certificates\r\n  const [minioServerCertificates, setMinioServerCertificates] = useState<\r\n    KeyPair[]\r\n  >([\r\n    {\r\n      id: Date.now().toString(),\r\n      key: \"\",\r\n      cert: \"\",\r\n      encoded_key: \"\",\r\n      encoded_cert: \"\",\r\n    },\r\n  ]);\r\n  const [minioClientCertificates, setMinioClientCertificates] = useState<\r\n    KeyPair[]\r\n  >([\r\n    {\r\n      id: Date.now().toString(),\r\n      key: \"\",\r\n      cert: \"\",\r\n      encoded_key: \"\",\r\n      encoded_cert: \"\",\r\n    },\r\n  ]);\r\n  const [minioCaCertificates, setMinioCaCertificates] = useState<KeyPair[]>([\r\n    {\r\n      id: Date.now().toString(),\r\n      key: \"\",\r\n      cert: \"\",\r\n      encoded_key: \"\",\r\n      encoded_cert: \"\",\r\n    },\r\n  ]);\r\n  const [minioServerCertificateSecrets, setMinioServerCertificateSecrets] =\r\n    useState<ICertificateInfo[]>([]);\r\n  const [minioClientCertificateSecrets, setMinioClientCertificateSecrets] =\r\n    useState<ICertificateInfo[]>([]);\r\n  const [minioTLSCaCertificateSecrets, setMinioTLSCaCertificateSecrets] =\r\n    useState<ICertificateInfo[]>([]);\r\n\r\n  const runAsGroup = useSelector(\r\n    (state: AppState) => state.editTenantSecurityContext.runAsGroup\r\n  );\r\n  const runAsUser = useSelector(\r\n    (state: AppState) => state.editTenantSecurityContext.runAsUser\r\n  );\r\n  const fsGroup = useSelector(\r\n    (state: AppState) => state.editTenantSecurityContext.fsGroup\r\n  );\r\n  const runAsNonRoot = useSelector(\r\n    (state: AppState) => state.editTenantSecurityContext.runAsNonRoot\r\n  );\r\n  const fsGroupChangePolicy = useSelector(\r\n    (state: AppState) => state.editTenantSecurityContext.fsGroupChangePolicy\r\n  );\r\n\r\n  const getTenantSecurityInfo = useCallback(() => {\r\n    api\r\n      .invoke(\r\n        \"GET\",\r\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`\r\n      )\r\n      .then((res: ITenantSecurityResponse) => {\r\n        setEnableAutoCert(res.autoCert);\r\n        setEnableTLS(res.autoCert);\r\n        if (\r\n          res.customCertificates.minio ||\r\n          res.customCertificates.client ||\r\n          res.customCertificates.minioCAs\r\n        ) {\r\n          setEnableCustomCerts(true);\r\n          setEnableTLS(true);\r\n        }\r\n        setMinioServerCertificateSecrets(res.customCertificates.minio || []);\r\n        setMinioClientCertificateSecrets(res.customCertificates.client || []);\r\n        setMinioTLSCaCertificateSecrets(res.customCertificates.minioCAs || []);\r\n        dispatch(setRunAsGroup(res.securityContext.runAsGroup));\r\n        dispatch(setRunAsUser(res.securityContext.runAsUser));\r\n        dispatch(setFSGroup(res.securityContext.fsGroup));\r\n        dispatch(setRunAsNonRoot(res.securityContext.runAsNonRoot));\r\n        dispatch(\r\n          setFSGroupChangePolicy(res.securityContext.fsGroupChangePolicy)\r\n        );\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n      });\r\n  }, [tenant, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (tenant) {\r\n      getTenantSecurityInfo();\r\n    }\r\n  }, [tenant, getTenantSecurityInfo]);\r\n\r\n  const updateTenantSecurity = () => {\r\n    setIsSending(true);\r\n    let payload = {\r\n      autoCert: enableAutoCert,\r\n      customCertificates: {},\r\n      securityContext: {\r\n        runAsGroup: runAsGroup,\r\n        runAsUser: runAsUser,\r\n        runAsNonRoot: runAsNonRoot,\r\n        fsGroup: fsGroup,\r\n        fsGroupChangePolicy: fsGroupChangePolicy,\r\n      },\r\n    };\r\n    if (enableCustomCerts) {\r\n      payload[\"customCertificates\"] = {\r\n        secretsToBeDeleted: certificatesToBeRemoved,\r\n        minioServerCertificates: minioServerCertificates\r\n          .map((keyPair: KeyPair) => ({\r\n            crt: keyPair.encoded_cert,\r\n            key: keyPair.encoded_key,\r\n          }))\r\n          .filter((cert: any) => cert.crt && cert.key),\r\n        minioClientCertificates: minioClientCertificates\r\n          .map((keyPair: KeyPair) => ({\r\n            crt: keyPair.encoded_cert,\r\n            key: keyPair.encoded_key,\r\n          }))\r\n          .filter((cert: any) => cert.crt && cert.key),\r\n        minioCAsCertificates: minioCaCertificates\r\n          .map((keyPair: KeyPair) => keyPair.encoded_cert)\r\n          .filter((cert: any) => cert),\r\n      };\r\n    } else {\r\n      payload[\"customCertificates\"] = {\r\n        secretsToBeDeleted: [\r\n          ...minioServerCertificateSecrets.map((cert) => cert.name),\r\n          ...minioClientCertificateSecrets.map((cert) => cert.name),\r\n          ...minioTLSCaCertificateSecrets.map((cert) => cert.name),\r\n        ],\r\n        minioServerCertificates: [],\r\n        minioClientCertificates: [],\r\n        minioCAsCertificates: [],\r\n      };\r\n    }\r\n    api\r\n      .invoke(\r\n        \"POST\",\r\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`,\r\n        payload\r\n      )\r\n      .then(() => {\r\n        setIsSending(false);\r\n        // Close confirmation modal\r\n        setDialogOpen(false);\r\n        // Refresh Information and reset forms\r\n        setMinioServerCertificates([\r\n          {\r\n            cert: \"\",\r\n            encoded_cert: \"\",\r\n            encoded_key: \"\",\r\n            id: Date.now().toString(),\r\n            key: \"\",\r\n          },\r\n        ]);\r\n        setMinioClientCertificates([\r\n          {\r\n            cert: \"\",\r\n            encoded_cert: \"\",\r\n            encoded_key: \"\",\r\n            id: Date.now().toString(),\r\n            key: \"\",\r\n          },\r\n        ]);\r\n        setMinioCaCertificates([\r\n          {\r\n            cert: \"\",\r\n            encoded_cert: \"\",\r\n            encoded_key: \"\",\r\n            id: Date.now().toString(),\r\n            key: \"\",\r\n          },\r\n        ]);\r\n        getTenantSecurityInfo();\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n        setIsSending(false);\r\n      });\r\n  };\r\n\r\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\r\n    // TLS certificate secrets can be referenced MinIO, Console or KES, we need to remove the secret from all list and update\r\n    // the arrays\r\n    // Add certificate to the global list of secrets to be removed\r\n    setCertificatesToBeRemoved([\r\n      ...certificatesToBeRemoved,\r\n      certificateInfo.name,\r\n    ]);\r\n\r\n    // Update MinIO server TLS certificate secrets\r\n    const updatedMinioServerCertificateSecrets =\r\n      minioServerCertificateSecrets.filter(\r\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name\r\n      );\r\n    // Update MinIO client TLS certificate secrets\r\n    const updatedMinioClientCertificateSecrets =\r\n      minioClientCertificateSecrets.filter(\r\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name\r\n      );\r\n    const updatedMinIOTLSCaCertificateSecrets =\r\n      minioTLSCaCertificateSecrets.filter(\r\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name\r\n      );\r\n    setMinioServerCertificateSecrets(updatedMinioServerCertificateSecrets);\r\n    setMinioClientCertificateSecrets(updatedMinioClientCertificateSecrets);\r\n    setMinioTLSCaCertificateSecrets(updatedMinIOTLSCaCertificateSecrets);\r\n  };\r\n\r\n  const addFileToKeyPair = (\r\n    type: string,\r\n    id: string,\r\n    key: string,\r\n    fileName: string,\r\n    value: string\r\n  ) => {\r\n    let certificates = minioServerCertificates;\r\n    let updateCertificates: any = () => {};\r\n\r\n    switch (type) {\r\n      case \"minio\": {\r\n        certificates = minioServerCertificates;\r\n        updateCertificates = setMinioServerCertificates;\r\n        break;\r\n      }\r\n      case \"client\": {\r\n        certificates = minioClientCertificates;\r\n        updateCertificates = setMinioClientCertificates;\r\n        break;\r\n      }\r\n      case \"minioCAs\": {\r\n        certificates = minioCaCertificates;\r\n        updateCertificates = setMinioCaCertificates;\r\n        break;\r\n      }\r\n      default:\r\n    }\r\n\r\n    const NCertList = certificates.map((item: KeyPair) => {\r\n      if (item.id === id) {\r\n        return {\r\n          ...item,\r\n          [key]: fileName,\r\n          [`encoded_${key}`]: value,\r\n        };\r\n      }\r\n      return item;\r\n    });\r\n    updateCertificates(NCertList);\r\n  };\r\n\r\n  const deleteKeyPair = (type: string, id: string) => {\r\n    let certificates = minioServerCertificates;\r\n    let updateCertificates: any = () => {};\r\n\r\n    switch (type) {\r\n      case \"minio\": {\r\n        certificates = minioServerCertificates;\r\n        updateCertificates = setMinioServerCertificates;\r\n        break;\r\n      }\r\n      case \"client\": {\r\n        certificates = minioClientCertificates;\r\n        updateCertificates = setMinioClientCertificates;\r\n        break;\r\n      }\r\n      case \"minioCAs\": {\r\n        certificates = minioCaCertificates;\r\n        updateCertificates = setMinioCaCertificates;\r\n        break;\r\n      }\r\n      default:\r\n    }\r\n\r\n    if (certificates.length > 1) {\r\n      const cleanCertsList = certificates.filter(\r\n        (item: KeyPair) => item.id !== id\r\n      );\r\n      updateCertificates(cleanCertsList);\r\n    }\r\n  };\r\n\r\n  const addKeyPair = (type: string) => {\r\n    let certificates = minioServerCertificates;\r\n    let updateCertificates: any = () => {};\r\n\r\n    switch (type) {\r\n      case \"minio\": {\r\n        certificates = minioServerCertificates;\r\n        updateCertificates = setMinioServerCertificates;\r\n        break;\r\n      }\r\n      case \"client\": {\r\n        certificates = minioClientCertificates;\r\n        updateCertificates = setMinioClientCertificates;\r\n        break;\r\n      }\r\n      case \"minioCAs\": {\r\n        certificates = minioCaCertificates;\r\n        updateCertificates = setMinioCaCertificates;\r\n        break;\r\n      }\r\n      default:\r\n    }\r\n    const updatedCertificates = [\r\n      ...certificates,\r\n      {\r\n        id: Date.now().toString(),\r\n        key: \"\",\r\n        cert: \"\",\r\n        encoded_key: \"\",\r\n        encoded_cert: \"\",\r\n      },\r\n    ];\r\n    updateCertificates(updatedCertificates);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ConfirmDialog\r\n        title={\"Save and Restart\"}\r\n        confirmText={\"Restart\"}\r\n        cancelText=\"Cancel\"\r\n        titleIcon={<ConfirmModalIcon />}\r\n        isLoading={isSending}\r\n        onClose={() => setDialogOpen(false)}\r\n        isOpen={dialogOpen}\r\n        onConfirm={updateTenantSecurity}\r\n        confirmationContent={\r\n          <DialogContentText>\r\n            Are you sure you want to save the changes and restart the service?\r\n          </DialogContentText>\r\n        }\r\n      />\r\n      {loadingTenant ? (\r\n        <div className={classes.loaderAlign}>\r\n          <Loader />\r\n        </div>\r\n      ) : (\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12}>\r\n            <h1 className={classes.sectionTitle}>Security</h1>\r\n            <hr className={classes.hrClass} />\r\n          </Grid>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12}>\r\n              <FormSwitchWrapper\r\n                value=\"enableTLS\"\r\n                id=\"enableTLS\"\r\n                name=\"enableTLS\"\r\n                checked={enableTLS}\r\n                onChange={(e) => {\r\n                  const targetD = e.target;\r\n                  const checked = targetD.checked;\r\n                  setEnableTLS(checked);\r\n                }}\r\n                label={\"TLS\"}\r\n                description={\r\n                  \"Securing all the traffic using TLS. This is required for Encryption Configuration\"\r\n                }\r\n              />\r\n            </Grid>\r\n            {enableTLS && (\r\n              <Fragment>\r\n                <Grid item xs={12} className={classes.formFieldRow}>\r\n                  <FormSwitchWrapper\r\n                    value=\"enableAutoCert\"\r\n                    id=\"enableAutoCert\"\r\n                    name=\"enableAutoCert\"\r\n                    checked={enableAutoCert}\r\n                    onChange={(e) => {\r\n                      const targetD = e.target;\r\n                      const checked = targetD.checked;\r\n                      setEnableAutoCert(checked);\r\n                    }}\r\n                    label={\"AutoCert\"}\r\n                    description={\r\n                      \"The internode certificates will be generated and managed by MinIO Operator\"\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} className={classes.formFieldRow}>\r\n                  <FormSwitchWrapper\r\n                    value=\"enableCustomCerts\"\r\n                    id=\"enableCustomCerts\"\r\n                    name=\"enableCustomCerts\"\r\n                    checked={enableCustomCerts}\r\n                    onChange={(e) => {\r\n                      const targetD = e.target;\r\n                      const checked = targetD.checked;\r\n                      setEnableCustomCerts(checked);\r\n                    }}\r\n                    label={\"Custom Certificates\"}\r\n                    description={\"Certificates used to terminated TLS at MinIO\"}\r\n                  />\r\n                </Grid>\r\n\r\n                {enableCustomCerts && (\r\n                  <Fragment>\r\n                    <Grid item xs={12} className={classes.formFieldRow}>\r\n                      <h5>MinIO Server Certificates</h5>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      {minioServerCertificateSecrets.map(\r\n                        (certificateInfo: ICertificateInfo) => (\r\n                          <TLSCertificate\r\n                            certificateInfo={certificateInfo}\r\n                            onDelete={() => removeCertificate(certificateInfo)}\r\n                          />\r\n                        )\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item xs={12} className={classes.formFieldRow}>\r\n                      {minioServerCertificates.map((keyPair, index) => (\r\n                        <Grid\r\n                          item\r\n                          xs={12}\r\n                          key={keyPair.id}\r\n                          className={classes.minioCertificateRows}\r\n                        >\r\n                          <Grid item xs={10} className={classes.fileItem}>\r\n                            <FileSelector\r\n                              onChange={(encodedValue, fileName) =>\r\n                                addFileToKeyPair(\r\n                                  \"minio\",\r\n                                  keyPair.id,\r\n                                  \"cert\",\r\n                                  fileName,\r\n                                  encodedValue\r\n                                )\r\n                              }\r\n                              accept=\".cer,.crt,.cert,.pem\"\r\n                              id=\"tlsCert\"\r\n                              name=\"tlsCert\"\r\n                              label=\"Cert\"\r\n                              value={keyPair.cert}\r\n                            />\r\n                            <FileSelector\r\n                              onChange={(encodedValue, fileName) =>\r\n                                addFileToKeyPair(\r\n                                  \"minio\",\r\n                                  keyPair.id,\r\n                                  \"key\",\r\n                                  fileName,\r\n                                  encodedValue\r\n                                )\r\n                              }\r\n                              accept=\".key,.pem\"\r\n                              id=\"tlsKey\"\r\n                              name=\"tlsKey\"\r\n                              label=\"Key\"\r\n                              value={keyPair.key}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={2} className={classes.rowActions}>\r\n                            <div className={classes.overlayAction}>\r\n                              <IconButton\r\n                                size={\"small\"}\r\n                                onClick={() => addKeyPair(\"minio\")}\r\n                                disabled={\r\n                                  index !== minioServerCertificates.length - 1\r\n                                }\r\n                              >\r\n                                <AddIcon />\r\n                              </IconButton>\r\n                            </div>\r\n                            <div className={classes.overlayAction}>\r\n                              <IconButton\r\n                                size={\"small\"}\r\n                                onClick={() =>\r\n                                  deleteKeyPair(\"minio\", keyPair.id)\r\n                                }\r\n                                disabled={minioServerCertificates.length <= 1}\r\n                              >\r\n                                <RemoveIcon />\r\n                              </IconButton>\r\n                            </div>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ))}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.formFieldRow}>\r\n                      <h5>MinIO Client Certificates</h5>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      {minioClientCertificateSecrets.map(\r\n                        (certificateInfo: ICertificateInfo) => (\r\n                          <TLSCertificate\r\n                            certificateInfo={certificateInfo}\r\n                            onDelete={() => removeCertificate(certificateInfo)}\r\n                          />\r\n                        )\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item xs={12} className={classes.formFieldRow}>\r\n                      {minioClientCertificates.map((keyPair, index) => (\r\n                        <Grid\r\n                          item\r\n                          xs={12}\r\n                          key={keyPair.id}\r\n                          className={classes.minioCertificateRows}\r\n                        >\r\n                          <Grid item xs={10} className={classes.fileItem}>\r\n                            <FileSelector\r\n                              onChange={(encodedValue, fileName) =>\r\n                                addFileToKeyPair(\r\n                                  \"client\",\r\n                                  keyPair.id,\r\n                                  \"cert\",\r\n                                  fileName,\r\n                                  encodedValue\r\n                                )\r\n                              }\r\n                              accept=\".cer,.crt,.cert,.pem\"\r\n                              id=\"tlsCert\"\r\n                              name=\"tlsCert\"\r\n                              label=\"Cert\"\r\n                              value={keyPair.cert}\r\n                            />\r\n                            <FileSelector\r\n                              onChange={(encodedValue, fileName) =>\r\n                                addFileToKeyPair(\r\n                                  \"client\",\r\n                                  keyPair.id,\r\n                                  \"key\",\r\n                                  fileName,\r\n                                  encodedValue\r\n                                )\r\n                              }\r\n                              accept=\".key,.pem\"\r\n                              id=\"tlsKey\"\r\n                              name=\"tlsKey\"\r\n                              label=\"Key\"\r\n                              value={keyPair.key}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={2} className={classes.rowActions}>\r\n                            <div className={classes.overlayAction}>\r\n                              <IconButton\r\n                                size={\"small\"}\r\n                                onClick={() => addKeyPair(\"client\")}\r\n                                disabled={\r\n                                  index !== minioClientCertificates.length - 1\r\n                                }\r\n                              >\r\n                                <AddIcon />\r\n                              </IconButton>\r\n                            </div>\r\n                            <div className={classes.overlayAction}>\r\n                              <IconButton\r\n                                size={\"small\"}\r\n                                onClick={() =>\r\n                                  deleteKeyPair(\"client\", keyPair.id)\r\n                                }\r\n                                disabled={minioClientCertificates.length <= 1}\r\n                              >\r\n                                <RemoveIcon />\r\n                              </IconButton>\r\n                            </div>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ))}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <h5>MinIO CA Certificates</h5>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      {minioTLSCaCertificateSecrets.map(\r\n                        (certificateInfo: ICertificateInfo) => (\r\n                          <TLSCertificate\r\n                            certificateInfo={certificateInfo}\r\n                            onDelete={() => removeCertificate(certificateInfo)}\r\n                          />\r\n                        )\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      {minioCaCertificates.map((keyPair: KeyPair, index) => (\r\n                        <Grid\r\n                          item\r\n                          xs={12}\r\n                          key={keyPair.id}\r\n                          className={classes.minioCACertsRow}\r\n                        >\r\n                          <Grid item xs={10}>\r\n                            <FileSelector\r\n                              onChange={(encodedValue, fileName) =>\r\n                                addFileToKeyPair(\r\n                                  \"minioCAs\",\r\n                                  keyPair.id,\r\n                                  \"cert\",\r\n                                  fileName,\r\n                                  encodedValue\r\n                                )\r\n                              }\r\n                              accept=\".cer,.crt,.cert,.pem\"\r\n                              id=\"tlsCert\"\r\n                              name=\"tlsCert\"\r\n                              label=\"Cert\"\r\n                              value={keyPair.cert}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item xs={2}>\r\n                            <div className={classes.rowActions}>\r\n                              <div className={classes.overlayAction}>\r\n                                <IconButton\r\n                                  size={\"small\"}\r\n                                  onClick={() => addKeyPair(\"minioCAs\")}\r\n                                  disabled={\r\n                                    index !== minioCaCertificates.length - 1\r\n                                  }\r\n                                >\r\n                                  <AddIcon />\r\n                                </IconButton>\r\n                              </div>\r\n                              <div className={classes.overlayAction}>\r\n                                <IconButton\r\n                                  size={\"small\"}\r\n                                  onClick={() =>\r\n                                    deleteKeyPair(\"minioCAs\", keyPair.id)\r\n                                  }\r\n                                  disabled={minioCaCertificates.length <= 1}\r\n                                >\r\n                                  <RemoveIcon />\r\n                                </IconButton>\r\n                              </div>\r\n                            </div>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ))}\r\n                    </Grid>\r\n                  </Fragment>\r\n                )}\r\n              </Fragment>\r\n            )}\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <h1 className={classes.sectionTitle}>Security Context</h1>\r\n              <hr className={classes.hrClass} />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <SecurityContextSelector\r\n                classes={classes}\r\n                runAsGroup={runAsGroup}\r\n                runAsUser={runAsUser}\r\n                fsGroup={fsGroup}\r\n                runAsNonRoot={runAsNonRoot}\r\n                fsGroupChangePolicy={fsGroupChangePolicy}\r\n                setFSGroup={(value: string) => dispatch(setFSGroup(value))}\r\n                setRunAsUser={(value: string) => dispatch(setRunAsUser(value))}\r\n                setRunAsGroup={(value: string) =>\r\n                  dispatch(setRunAsGroup(value))\r\n                }\r\n                setRunAsNonRoot={(value: boolean) =>\r\n                  dispatch(setRunAsNonRoot(value))\r\n                }\r\n                setFSGroupChangePolicy={(value: fsGroupChangePolicyType) =>\r\n                  dispatch(setFSGroupChangePolicy(value))\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} textAlign={\"right\"}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={dialogOpen || isSending}\r\n                onClick={() => setDialogOpen(true)}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapState = (state: AppState) => ({\r\n  loadingTenant: state.tenants.loadingTenant,\r\n  selectedTenant: state.tenants.currentTenant,\r\n  tenant: state.tenants.tenantInfo,\r\n});\r\n\r\nconst connector = connect(mapState, null);\r\n\r\nexport default withStyles(styles)(connector(TenantSecurity));\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { Fragment } from \"react\";\r\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport SelectWrapper from \"../Common/FormComponents/SelectWrapper/SelectWrapper\";\r\nimport { Grid, SelectChangeEvent } from \"@mui/material\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { fsGroupChangePolicyType } from \"./types\";\r\n\r\ninterface IEditSecurityContextProps {\r\n  classes: any;\r\n  runAsUser: string;\r\n  runAsGroup: string;\r\n  fsGroup: string;\r\n  fsGroupChangePolicy: fsGroupChangePolicyType;\r\n  runAsNonRoot: boolean;\r\n  setRunAsUser: any;\r\n  setRunAsGroup: any;\r\n  setFSGroup: any;\r\n  setRunAsNonRoot: any;\r\n  setFSGroupChangePolicy: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    configSectionItem: {\r\n      marginRight: 15,\r\n      marginBottom: 15,\r\n      \"& .multiContainer\": {\r\n        border: \"1px solid red\",\r\n      },\r\n    },\r\n  });\r\n\r\nconst SecurityContextSelector = ({\r\n  classes,\r\n  runAsGroup,\r\n  runAsUser,\r\n  fsGroup,\r\n  fsGroupChangePolicy,\r\n  runAsNonRoot,\r\n  setRunAsUser,\r\n  setRunAsGroup,\r\n  setFSGroup,\r\n  setRunAsNonRoot,\r\n  setFSGroupChangePolicy,\r\n}: IEditSecurityContextProps) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Fragment>\r\n      <fieldset className={`${classes.fieldGroup} ${classes.fieldSpaceTop} `}>\r\n        <legend className={classes.descriptionText}>Security Context</legend>\r\n\r\n        <Grid item xs={12}>\r\n          <div className={`${classes.multiContainerStackNarrow} `}>\r\n            <div className={classes.configSectionItem}>\r\n              <InputBoxWrapper\r\n                type=\"number\"\r\n                id=\"securityContext_runAsUser\"\r\n                name=\"securityContext_runAsUser\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  dispatch(setRunAsUser(e.target.value));\r\n                }}\r\n                label=\"Run As User\"\r\n                value={runAsUser}\r\n                required\r\n                min=\"0\"\r\n              />\r\n            </div>\r\n            <div className={classes.configSectionItem}>\r\n              <InputBoxWrapper\r\n                type=\"number\"\r\n                id=\"securityContext_runAsGroup\"\r\n                name=\"securityContext_runAsGroup\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  dispatch(setRunAsGroup(e.target.value));\r\n                }}\r\n                label=\"Run As Group\"\r\n                value={runAsGroup}\r\n                required\r\n                min=\"0\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div className={`${classes.multiContainerStackNarrow} `}>\r\n            <div className={classes.configSectionItem}>\r\n              <InputBoxWrapper\r\n                type=\"number\"\r\n                id=\"securityContext_fsGroup\"\r\n                name=\"securityContext_fsGroup\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  dispatch(setFSGroup(e.target.value));\r\n                }}\r\n                label=\"FsGroup\"\r\n                value={fsGroup}\r\n                required\r\n                min=\"0\"\r\n              />\r\n            </div>\r\n\r\n            <div className={classes.configSectionItem}>\r\n              <SelectWrapper\r\n                label=\"FsGroupChangePolicy\"\r\n                id=\"securityContext_fsGroupChangePolicy\"\r\n                name=\"securityContext_fsGroupChangePolicy\"\r\n                onChange={(e: SelectChangeEvent<string>) => {\r\n                  dispatch(setFSGroupChangePolicy(e.target.value));\r\n                }}\r\n                value={fsGroupChangePolicy}\r\n                options={[\r\n                  {\r\n                    label: \"Always\",\r\n                    value: \"Always\",\r\n                  },\r\n                  {\r\n                    label: \"OnRootMismatch\",\r\n                    value: \"OnRootMismatch\",\r\n                  },\r\n                ]}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div className={classes.multiContainer}>\r\n            <FormSwitchWrapper\r\n              value=\"SecurityContextRunAsNonRoot\"\r\n              id=\"securityContext_runAsNonRoot\"\r\n              name=\"securityContext_runAsNonRoot\"\r\n              checked={runAsNonRoot}\r\n              onChange={() => {\r\n                dispatch(setRunAsNonRoot(!runAsNonRoot));\r\n              }}\r\n              label={\"Do not run as Root\"}\r\n            />\r\n          </div>\r\n        </Grid>\r\n      </fieldset>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(SecurityContextSelector);\r\n","import React from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Theme } from \"@mui/material/styles\";\r\n\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    errorBlock: {\r\n      color: theme.palette?.error.main || \"#C83B51\",\r\n    },\r\n  });\r\n\r\ninterface IErrorBlockProps {\r\n  classes: any;\r\n  errorMessage: string;\r\n  withBreak?: boolean;\r\n}\r\n\r\nconst ErrorBlock = ({\r\n  classes,\r\n  errorMessage,\r\n  withBreak = true,\r\n}: IErrorBlockProps) => {\r\n  return (\r\n    <React.Fragment>\r\n      {withBreak && <br />}\r\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\r\n        {errorMessage}\r\n      </Typography>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ErrorBlock);\r\n"],"names":["props","xmlns","className","fill","viewBox","id","d","transform","clipPath","withStyles","theme","createStyles","fieldBasic","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","inputLabel","fontWeight","textBoxContainer","border","paddingLeft","label","classes","onChange","name","disabled","tooltip","required","error","accept","value","useState","showFileSelector","setShowSelector","Grid","item","xs","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","title","placement","HelpIcon","type","e","fileName","get","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","color","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","certificateIcon","float","paddingTop","paddingRight","certificateInfo","certificateWrapper","height","userSelect","borderRadius","padding","certificateExpiry","display","alignItems","flexWrap","marginBottom","certificateDomains","certificatesList","textTransform","overflowY","maxHeight","certificatesListItem","borderBottom","minWidth","fontSize","marginRight","opacity","onDelete","certificates","domains","variant","gutterBottom","format","expiry","map","dom","primary","connector","connect","state","loadingTenant","tenants","selectedTenant","currentTenant","tenant","tenantInfo","tenantDetailsStyles","spacingUtils","minioCertificateRows","justifyContent","flex","minioCertsContainer","minioCACertsRow","rowActions","overlayAction","marginLeft","background","loaderAlign","textAlign","bold","italic","fontStyle","fileItem","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","dispatch","useAppDispatch","useSelector","isSending","setIsSending","dialogOpen","setDialogOpen","enableTLS","setEnableTLS","enableAutoCert","setEnableAutoCert","enableCustomCerts","setEnableCustomCerts","certificatesToBeRemoved","setCertificatesToBeRemoved","Date","now","key","cert","encoded_key","encoded_cert","minioServerCertificates","setMinioServerCertificates","minioClientCertificates","setMinioClientCertificates","minioCaCertificates","setMinioCaCertificates","minioServerCertificateSecrets","setMinioServerCertificateSecrets","minioClientCertificateSecrets","setMinioClientCertificateSecrets","minioTLSCaCertificateSecrets","setMinioTLSCaCertificateSecrets","runAsGroup","editTenantSecurityContext","runAsUser","fsGroup","runAsNonRoot","fsGroupChangePolicy","getTenantSecurityInfo","useCallback","api","namespace","then","res","autoCert","customCertificates","minio","client","minioCAs","setRunAsGroup","securityContext","setRunAsUser","setFSGroup","setRunAsNonRoot","setFSGroupChangePolicy","catch","err","setErrorSnackMessage","useEffect","removeCertificate","updatedMinioServerCertificateSecrets","filter","certificateSecret","updatedMinioClientCertificateSecrets","updatedMinIOTLSCaCertificateSecrets","addFileToKeyPair","updateCertificates","deleteKeyPair","addKeyPair","confirmText","cancelText","titleIcon","isLoading","onClose","isOpen","onConfirm","payload","secretsToBeDeleted","keyPair","crt","minioCAsCertificates","confirmationContent","container","sectionTitle","hrClass","checked","description","Fragment","formFieldRow","index","encodedValue","configSectionItem","useDispatch","fieldGroup","fieldSpaceTop","descriptionText","multiContainerStackNarrow","min","options","multiContainer","errorBlock","palette","main","withBreak"],"sourceRoot":""}