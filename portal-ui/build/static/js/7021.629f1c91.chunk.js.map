{"version":3,"file":"static/js/7021.629f1c91.chunk.js","mappings":"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","sources":["screens/Console/Tenants/LogoComponents.tsx","screens/Console/Tenants/TenantDetails/TenantIdentityProvider.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/icons-material/RemoveRedEye.js","../node_modules/@mui/icons-material/VisibilityOff.js"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport { Grid } from \"@mui/material\";\r\nimport LDAPIcon from \"../../../icons/LDAPIcon\";\r\nimport { OIDCIcon } from \"../../../icons\";\r\nimport { UsersIcon } from \"../../../icons\";\r\n\r\nexport const OIDCLogoElement = () => {\r\n  return (\r\n    <Grid container columnGap={1}>\r\n      <Grid>\r\n        <OIDCIcon width={\"16px\"} height={\"16px\"} />\r\n      </Grid>\r\n      <Grid item>Open ID</Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport const LDAPLogoElement = () => {\r\n  return (\r\n    <Grid container columnGap={1}>\r\n      <Grid>\r\n        <LDAPIcon width={\"16px\"} height={\"16px\"} />\r\n      </Grid>\r\n      <Grid item>LDAP / Active Directory</Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport const BuiltInLogoElement = () => {\r\n  return (\r\n    <Grid container columnGap={1}>\r\n      <Grid>\r\n        <UsersIcon width={\"16px\"} height={\"16px\"} />\r\n      </Grid>\r\n      <Grid item>Built-in</Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  DialogContentText,\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\nimport {\r\n  containerForHeader,\r\n  createTenantCommon,\r\n  formFieldStyles,\r\n  modalBasic,\r\n  spacingUtils,\r\n  tenantDetailsStyles,\r\n  wizardCommon,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\nimport {\r\n  ITenantIdentityProviderResponse,\r\n  ITenantSetAdministratorsRequest,\r\n} from \"../types\";\r\nimport {\r\n  OIDCLogoElement,\r\n  LDAPLogoElement,\r\n  BuiltInLogoElement,\r\n} from \"../LogoComponents\";\r\nimport { clearValidationError } from \"../utils\";\r\nimport {\r\n  commonFormValidation,\r\n  IValidation,\r\n} from \"../../../../utils/validationFunctions\";\r\nimport { ConfirmModalIcon } from \"../../../../icons\";\r\nimport {\r\n  setErrorSnackMessage,\r\n  setSnackBarMessage,\r\n} from \"../../../../systemSlice\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport { ErrorResponseHandler } from \"../../../../common/types\";\r\nimport Loader from \"../../Common/Loader/Loader\";\r\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\r\nimport api from \"../../../../common/api\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport SectionTitle from \"../../Common/SectionTitle\";\r\n\r\ninterface ITenantIdentityProvider {\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    adUserDnRows: {\r\n      display: \"flex\",\r\n      marginBottom: 10,\r\n    },\r\n    buttonTray: {\r\n      marginLeft: 10,\r\n      display: \"flex\",\r\n      height: 38,\r\n      \"& button\": {\r\n        background: \"#EAEAEA\",\r\n      },\r\n    },\r\n    overlayAction: {\r\n      marginLeft: 10,\r\n      \"& svg\": {\r\n        maxWidth: 15,\r\n        maxHeight: 15,\r\n      },\r\n      \"& button\": {\r\n        background: \"#EAEAEA\",\r\n      },\r\n    },\r\n    ...tenantDetailsStyles,\r\n    ...spacingUtils,\r\n    loaderAlign: {\r\n      textAlign: \"center\",\r\n    },\r\n    bold: { fontWeight: \"bold\" },\r\n    italic: { fontStyle: \"italic\" },\r\n    fileItem: {\r\n      marginRight: 10,\r\n      display: \"flex\",\r\n      \"& div label\": {\r\n        minWidth: 50,\r\n      },\r\n\r\n      \"@media (max-width: 900px)\": {\r\n        flexFlow: \"column\",\r\n      },\r\n    },\r\n    ...containerForHeader(theme.spacing(4)),\r\n    ...createTenantCommon,\r\n    ...formFieldStyles,\r\n    ...modalBasic,\r\n    ...wizardCommon,\r\n  });\r\n\r\nconst TenantIdentityProvider = ({ classes }: ITenantIdentityProvider) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\r\n  const loadingTenant = useSelector(\r\n    (state: AppState) => state.tenants.loadingTenant\r\n  );\r\n\r\n  const [isSending, setIsSending] = useState<boolean>(false);\r\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\r\n  const [idpSelection, setIdpSelection] = useState<string>(\"Built-in\");\r\n  const [openIDConfigurationURL, setOpenIDConfigurationURL] =\r\n    useState<string>(\"\");\r\n  const [openIDClientID, setOpenIDClientID] = useState<string>(\"\");\r\n  const [openIDSecretID, setOpenIDSecretID] = useState<string>(\"\");\r\n  const [showOIDCSecretID, setShowOIDCSecretID] = useState<boolean>(false);\r\n  const [openIDCallbackURL, setOpenIDCallbackURL] = useState<string>(\"\");\r\n  const [openIDClaimName, setOpenIDClaimName] = useState<string>(\"\");\r\n  const [openIDScopes, setOpenIDScopes] = useState<string>(\"\");\r\n  const [ADURL, setADURL] = useState<string>(\"\");\r\n  const [ADLookupBindDN, setADLookupBindDN] = useState<string>(\"\");\r\n  const [ADLookupBindPassword, setADLookupBindPassword] = useState<string>(\"\");\r\n  const [showADLookupBindPassword, setShowADLookupBindPassword] =\r\n    useState<boolean>(false);\r\n  const [ADUserDNSearchBaseDN, setADUserDNSearchBaseDN] = useState<string>(\"\");\r\n  const [ADUserDNSearchFilter, setADUserDNSearchFilter] = useState<string>(\"\");\r\n  const [ADGroupSearchBaseDN, setADGroupSearchBaseDN] = useState<string>(\"\");\r\n  const [ADGroupSearchFilter, setADGroupSearchFilter] = useState<string>(\"\");\r\n  const [ADSkipTLS, setADSkipTLS] = useState<boolean>(false);\r\n  const [ADServerInsecure, setADServerInsecure] = useState<boolean>(false);\r\n  const [ADServerStartTLS, setADServerStartTLS] = useState<boolean>(false);\r\n  const [ADUserDNs, setADUserDNs] = useState<string[]>([\"\"]);\r\n  const [ADGroupDNs, setADGroupDNs] = useState<string[]>([\"\"]);\r\n  const [validationErrors, setValidationErrors] = useState<any>({});\r\n  const cleanValidation = (fieldName: string) => {\r\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\r\n  };\r\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\r\n\r\n  // Validation\r\n  useEffect(() => {\r\n    let identityProviderValidation: IValidation[] = [];\r\n\r\n    if (idpSelection === \"OpenID\") {\r\n      identityProviderValidation = [\r\n        ...identityProviderValidation,\r\n        {\r\n          fieldKey: \"openID_CONFIGURATION_URL\",\r\n          required: true,\r\n          value: openIDConfigurationURL,\r\n        },\r\n        {\r\n          fieldKey: \"openID_clientID\",\r\n          required: true,\r\n          value: openIDClientID,\r\n        },\r\n        {\r\n          fieldKey: \"openID_secretID\",\r\n          required: true,\r\n          value: openIDSecretID,\r\n        },\r\n        {\r\n          fieldKey: \"openID_claimName\",\r\n          required: true,\r\n          value: openIDClaimName,\r\n        },\r\n      ];\r\n    }\r\n\r\n    if (idpSelection === \"AD\") {\r\n      identityProviderValidation = [\r\n        ...identityProviderValidation,\r\n        {\r\n          fieldKey: \"AD_URL\",\r\n          required: true,\r\n          value: ADURL,\r\n        },\r\n        {\r\n          fieldKey: \"ad_lookupBindDN\",\r\n          required: true,\r\n          value: ADLookupBindDN,\r\n        },\r\n      ];\r\n    }\r\n\r\n    const commonVal = commonFormValidation(identityProviderValidation);\r\n\r\n    setIsFormValid(Object.keys(commonVal).length === 0);\r\n\r\n    setValidationErrors(commonVal);\r\n  }, [\r\n    idpSelection,\r\n    openIDConfigurationURL,\r\n    openIDClientID,\r\n    openIDSecretID,\r\n    openIDClaimName,\r\n    ADURL,\r\n    ADLookupBindDN,\r\n  ]);\r\n\r\n  const getTenantIdentityProviderInfo = useCallback(() => {\r\n    api\r\n      .invoke(\r\n        \"GET\",\r\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`\r\n      )\r\n      .then((res: ITenantIdentityProviderResponse) => {\r\n        if (res) {\r\n          if (res.oidc) {\r\n            setIdpSelection(\"OpenID\");\r\n            setOpenIDConfigurationURL(res.oidc.configuration_url);\r\n            setOpenIDClientID(res.oidc.client_id);\r\n            setOpenIDSecretID(res.oidc.secret_id);\r\n            setOpenIDCallbackURL(res.oidc.callback_url);\r\n            setOpenIDClaimName(res.oidc.claim_name);\r\n            setOpenIDScopes(res.oidc.scopes);\r\n          } else if (res.active_directory) {\r\n            setIdpSelection(\"AD\");\r\n            setADURL(res.active_directory.url);\r\n            setADLookupBindDN(res.active_directory.lookup_bind_dn);\r\n            setADLookupBindPassword(res.active_directory.lookup_bind_password);\r\n            setADUserDNSearchBaseDN(\r\n              res.active_directory.user_dn_search_base_dn\r\n            );\r\n            setADUserDNSearchFilter(res.active_directory.user_dn_search_filter);\r\n            setADGroupSearchBaseDN(res.active_directory.group_search_base_dn);\r\n            setADGroupSearchFilter(res.active_directory.group_search_filter);\r\n            setADSkipTLS(res.active_directory.skip_tls_verification);\r\n            setADServerInsecure(res.active_directory.server_insecure);\r\n            setADServerStartTLS(res.active_directory.server_start_tls);\r\n          }\r\n        }\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n      });\r\n  }, [tenant, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (tenant) {\r\n      getTenantIdentityProviderInfo();\r\n    }\r\n  }, [tenant, getTenantIdentityProviderInfo]);\r\n\r\n  const updateTenantIdentityProvider = () => {\r\n    setIsSending(true);\r\n    let payload: ITenantIdentityProviderResponse = {};\r\n    switch (idpSelection) {\r\n      case \"AD\":\r\n        payload.active_directory = {\r\n          url: ADURL,\r\n          lookup_bind_dn: ADLookupBindDN,\r\n          lookup_bind_password: ADLookupBindPassword,\r\n          user_dn_search_base_dn: ADUserDNSearchBaseDN,\r\n          user_dn_search_filter: ADUserDNSearchFilter,\r\n          group_search_base_dn: ADGroupSearchBaseDN,\r\n          group_search_filter: ADGroupSearchFilter,\r\n          skip_tls_verification: ADSkipTLS,\r\n          server_insecure: ADServerInsecure,\r\n          server_start_tls: ADServerStartTLS,\r\n        };\r\n        break;\r\n      case \"OpenID\":\r\n        payload.oidc = {\r\n          configuration_url: openIDConfigurationURL,\r\n          client_id: openIDClientID,\r\n          secret_id: openIDSecretID,\r\n          callback_url: openIDCallbackURL,\r\n          claim_name: openIDClaimName,\r\n          scopes: openIDScopes,\r\n        };\r\n        break;\r\n      default:\r\n      // Built-in IDP will be used by default\r\n    }\r\n\r\n    api\r\n      .invoke(\r\n        \"POST\",\r\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\r\n        payload\r\n      )\r\n      .then(() => {\r\n        setIsSending(false);\r\n        // Close confirmation modal\r\n        setDialogOpen(false);\r\n        getTenantIdentityProviderInfo();\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n        setIsSending(false);\r\n      });\r\n  };\r\n\r\n  const setAdministrators = () => {\r\n    setIsSending(true);\r\n    let payload: ITenantSetAdministratorsRequest = {};\r\n    switch (idpSelection) {\r\n      case \"AD\":\r\n        payload = {\r\n          user_dns: ADUserDNs.filter((user) => user.trim() !== \"\"),\r\n          group_dns: ADGroupDNs.filter((group) => group.trim() !== \"\"),\r\n        };\r\n        break;\r\n      default:\r\n      // Built-in IDP will be used by default\r\n    }\r\n\r\n    api\r\n      .invoke(\r\n        \"POST\",\r\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/set-administrators`,\r\n        payload\r\n      )\r\n      .then(() => {\r\n        setIsSending(false);\r\n        setADGroupDNs([\"\"]);\r\n        setADUserDNs([\"\"]);\r\n        getTenantIdentityProviderInfo();\r\n        dispatch(setSnackBarMessage(`Administrators added successfully`));\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n        setIsSending(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ConfirmDialog\r\n        title={\"Save and Restart\"}\r\n        confirmText={\"Restart\"}\r\n        cancelText=\"Cancel\"\r\n        titleIcon={<ConfirmModalIcon />}\r\n        isLoading={isSending}\r\n        onClose={() => setDialogOpen(false)}\r\n        isOpen={dialogOpen}\r\n        onConfirm={updateTenantIdentityProvider}\r\n        confirmationContent={\r\n          <DialogContentText>\r\n            Are you sure you want to save the changes and restart the service?\r\n          </DialogContentText>\r\n        }\r\n      />\r\n      {loadingTenant ? (\r\n        <div className={classes.loaderAlign}>\r\n          <Loader />\r\n        </div>\r\n      ) : (\r\n        <Fragment>\r\n          <Grid item xs={12}>\r\n            <h1 className={classes.sectionTitle}>Identity Provider</h1>\r\n            <hr className={classes.hrClass} />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            className={classes.protocolRadioOptions}\r\n            paddingBottom={1}\r\n          >\r\n            <RadioGroupSelector\r\n              currentSelection={idpSelection}\r\n              id=\"idp-options\"\r\n              name=\"idp-options\"\r\n              label=\"Protocol\"\r\n              onChange={(e) => {\r\n                setIdpSelection(e.target.value);\r\n              }}\r\n              selectorOptions={[\r\n                { label: <BuiltInLogoElement />, value: \"Built-in\" },\r\n                { label: <OIDCLogoElement />, value: \"OpenID\" },\r\n                { label: <LDAPLogoElement />, value: \"AD\" },\r\n              ]}\r\n            />\r\n          </Grid>\r\n\r\n          {idpSelection === \"OpenID\" && (\r\n            <Fragment>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"openID_CONFIGURATION_URL\"\r\n                  name=\"openID_CONFIGURATION_URL\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setOpenIDConfigurationURL(e.target.value);\r\n                    cleanValidation(\"openID_CONFIGURATION_URL\");\r\n                  }}\r\n                  label=\"Configuration URL\"\r\n                  value={openIDConfigurationURL}\r\n                  placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\r\n                  error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"openID_clientID\"\r\n                  name=\"openID_clientID\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setOpenIDClientID(e.target.value);\r\n                    cleanValidation(\"openID_clientID\");\r\n                  }}\r\n                  label=\"Client ID\"\r\n                  value={openIDClientID}\r\n                  error={validationErrors[\"openID_clientID\"] || \"\"}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  type={showOIDCSecretID ? \"text\" : \"password\"}\r\n                  id=\"openID_secretID\"\r\n                  name=\"openID_secretID\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setOpenIDSecretID(e.target.value);\r\n                    cleanValidation(\"openID_secretID\");\r\n                  }}\r\n                  label=\"Secret ID\"\r\n                  value={openIDSecretID}\r\n                  error={validationErrors[\"openID_secretID\"] || \"\"}\r\n                  required\r\n                  overlayIcon={\r\n                    showOIDCSecretID ? (\r\n                      <VisibilityOffIcon />\r\n                    ) : (\r\n                      <RemoveRedEyeIcon />\r\n                    )\r\n                  }\r\n                  overlayAction={() => setShowOIDCSecretID(!showOIDCSecretID)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"openID_callbackURL\"\r\n                  name=\"openID_callbackURL\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setOpenIDCallbackURL(e.target.value);\r\n                    cleanValidation(\"openID_callbackURL\");\r\n                  }}\r\n                  label=\"Callback URL\"\r\n                  value={openIDCallbackURL}\r\n                  placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\r\n                  error={validationErrors[\"openID_callbackURL\"] || \"\"}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"openID_claimName\"\r\n                  name=\"openID_claimName\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setOpenIDClaimName(e.target.value);\r\n                    cleanValidation(\"openID_claimName\");\r\n                  }}\r\n                  label=\"Claim Name\"\r\n                  value={openIDClaimName}\r\n                  error={validationErrors[\"openID_claimName\"] || \"\"}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"openID_scopes\"\r\n                  name=\"openID_scopes\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setOpenIDScopes(e.target.value);\r\n                    cleanValidation(\"openID_scopes\");\r\n                  }}\r\n                  label=\"Scopes\"\r\n                  value={openIDScopes}\r\n                />\r\n              </Grid>\r\n            </Fragment>\r\n          )}\r\n\r\n          {idpSelection === \"AD\" && (\r\n            <Fragment>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"AD_URL\"\r\n                  name=\"AD_URL\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setADURL(e.target.value);\r\n                    cleanValidation(\"AD_URL\");\r\n                  }}\r\n                  label=\"LDAP Server Address\"\r\n                  value={ADURL}\r\n                  placeholder=\"ldap-server:636\"\r\n                  error={validationErrors[\"AD_URL\"] || \"\"}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <FormSwitchWrapper\r\n                  value=\"ad_skipTLS\"\r\n                  id=\"ad_skipTLS\"\r\n                  name=\"ad_skipTLS\"\r\n                  checked={ADSkipTLS}\r\n                  onChange={(e) => {\r\n                    const targetD = e.target;\r\n                    const checked = targetD.checked;\r\n                    setADSkipTLS(checked);\r\n                  }}\r\n                  label={\"Skip TLS Verification\"}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <FormSwitchWrapper\r\n                  value=\"ad_serverInsecure\"\r\n                  id=\"ad_serverInsecure\"\r\n                  name=\"ad_serverInsecure\"\r\n                  checked={ADServerInsecure}\r\n                  onChange={(e) => {\r\n                    const targetD = e.target;\r\n                    const checked = targetD.checked;\r\n                    setADServerInsecure(checked);\r\n                  }}\r\n                  label={\"Server Insecure\"}\r\n                />\r\n              </Grid>\r\n              {ADServerInsecure ? (\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    className={classes.error}\r\n                    variant=\"caption\"\r\n                    display=\"block\"\r\n                    gutterBottom\r\n                  >\r\n                    Warning: All traffic with Active Directory will be\r\n                    unencrypted\r\n                  </Typography>\r\n                  <br />\r\n                </Grid>\r\n              ) : null}\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <FormSwitchWrapper\r\n                  value=\"ad_serverStartTLS\"\r\n                  id=\"ad_serverStartTLS\"\r\n                  name=\"ad_serverStartTLS\"\r\n                  checked={ADServerStartTLS}\r\n                  onChange={(e) => {\r\n                    const targetD = e.target;\r\n                    const checked = targetD.checked;\r\n                    setADServerStartTLS(checked);\r\n                  }}\r\n                  label={\"Start TLS connection to AD/LDAP server\"}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"ad_lookupBindDN\"\r\n                  name=\"ad_lookupBindDN\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setADLookupBindDN(e.target.value);\r\n                    cleanValidation(\"ad_lookupBindDN\");\r\n                  }}\r\n                  label=\"Lookup Bind DN\"\r\n                  value={ADLookupBindDN}\r\n                  placeholder=\"cn=admin,dc=min,dc=io\"\r\n                  error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  type={showADLookupBindPassword ? \"text\" : \"password\"}\r\n                  id=\"ad_lookupBindPassword\"\r\n                  name=\"ad_lookupBindPassword\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setADLookupBindPassword(e.target.value);\r\n                  }}\r\n                  label=\"Lookup Bind Password\"\r\n                  value={ADLookupBindPassword}\r\n                  placeholder=\"admin\"\r\n                  overlayIcon={\r\n                    showADLookupBindPassword ? (\r\n                      <VisibilityOffIcon />\r\n                    ) : (\r\n                      <RemoveRedEyeIcon />\r\n                    )\r\n                  }\r\n                  overlayAction={() =>\r\n                    setShowADLookupBindPassword(!showADLookupBindPassword)\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"ad_userDNSearchBaseDN\"\r\n                  name=\"ad_userDNSearchBaseDN\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setADUserDNSearchBaseDN(e.target.value);\r\n                  }}\r\n                  label=\"User DN Search Base DN\"\r\n                  value={ADUserDNSearchBaseDN}\r\n                  placeholder=\"dc=min,dc=io\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"ad_userDNSearchFilter\"\r\n                  name=\"ad_userDNSearchFilter\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setADUserDNSearchFilter(e.target.value);\r\n                  }}\r\n                  label=\"User DN Search Filter\"\r\n                  value={ADUserDNSearchFilter}\r\n                  placeholder=\"(sAMAcountName=%s)\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"ad_groupSearchBaseDN\"\r\n                  name=\"ad_groupSearchBaseDN\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setADGroupSearchBaseDN(e.target.value);\r\n                  }}\r\n                  label=\"Group Search Base DN\"\r\n                  value={ADGroupSearchBaseDN}\r\n                  placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"ad_groupSearchFilter\"\r\n                  name=\"ad_groupSearchFilter\"\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setADGroupSearchFilter(e.target.value);\r\n                  }}\r\n                  label=\"Group Search Filter\"\r\n                  value={ADGroupSearchFilter}\r\n                  placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\r\n                />\r\n              </Grid>\r\n            </Fragment>\r\n          )}\r\n\r\n          <Grid item xs={12} className={classes.buttonContainer}>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={!isFormValid || isSending}\r\n              onClick={() => setDialogOpen(true)}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n\r\n          {idpSelection === \"AD\" && (\r\n            <Fragment>\r\n              <SectionTitle>User & Group management</SectionTitle>\r\n              <br />\r\n              <fieldset className={classes.fieldGroup}>\r\n                <legend className={classes.descriptionText}>\r\n                  List of user DNs (Distinguished Names) to be added as Tenant\r\n                  Administrators\r\n                </legend>\r\n                <Grid item xs={12}>\r\n                  {ADUserDNs.map((_, index) => {\r\n                    return (\r\n                      <Fragment key={`identityField-${index.toString()}`}>\r\n                        <div className={classes.adUserDnRows}>\r\n                          <InputBoxWrapper\r\n                            id={`ad-userdn-${index.toString()}`}\r\n                            label={\"\"}\r\n                            placeholder=\"\"\r\n                            name={`ad-userdn-${index.toString()}`}\r\n                            value={ADUserDNs[index]}\r\n                            onChange={(\r\n                              e: React.ChangeEvent<HTMLInputElement>\r\n                            ) => {\r\n                              setADUserDNs(\r\n                                ADUserDNs.map((group, i) =>\r\n                                  i === index ? e.target.value : group\r\n                                )\r\n                              );\r\n                            }}\r\n                            index={index}\r\n                            key={`csv-ad-userdn-${index.toString()}`}\r\n                            error={\r\n                              validationErrors[\r\n                                `ad-userdn-${index.toString()}`\r\n                              ] || \"\"\r\n                            }\r\n                          />\r\n                          <div className={classes.buttonTray}>\r\n                            <Tooltip title=\"Add User\" aria-label=\"add\">\r\n                              <IconButton\r\n                                size={\"small\"}\r\n                                onClick={() => {\r\n                                  setADUserDNs([...ADUserDNs, \"\"]);\r\n                                }}\r\n                              >\r\n                                <AddIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\r\n                              <IconButton\r\n                                size={\"small\"}\r\n                                style={{ marginLeft: 16 }}\r\n                                onClick={() => {\r\n                                  if (ADUserDNs.length > 1) {\r\n                                    setADUserDNs(\r\n                                      ADUserDNs.filter((_, i) => i !== index)\r\n                                    );\r\n                                  }\r\n                                }}\r\n                              >\r\n                                <DeleteIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </div>\r\n                        </div>\r\n                      </Fragment>\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              </fieldset>\r\n              <fieldset className={classes.fieldGroup}>\r\n                <legend className={classes.descriptionText}>\r\n                  List of group DNs (Distinguished Names) to be added as Tenant\r\n                  Administrators\r\n                </legend>\r\n                <Grid item xs={12}>\r\n                  {ADGroupDNs.map((_, index) => {\r\n                    return (\r\n                      <Fragment key={`identityField-${index.toString()}`}>\r\n                        <div className={classes.adUserDnRows}>\r\n                          <InputBoxWrapper\r\n                            id={`ad-groupdn-${index.toString()}`}\r\n                            label={\"\"}\r\n                            placeholder=\"\"\r\n                            name={`ad-groupdn-${index.toString()}`}\r\n                            value={ADGroupDNs[index]}\r\n                            onChange={(\r\n                              e: React.ChangeEvent<HTMLInputElement>\r\n                            ) => {\r\n                              setADGroupDNs(\r\n                                ADGroupDNs.map((group, i) =>\r\n                                  i === index ? e.target.value : group\r\n                                )\r\n                              );\r\n                            }}\r\n                            index={index}\r\n                            key={`csv-ad-groupdn-${index.toString()}`}\r\n                            error={\r\n                              validationErrors[\r\n                                `ad-groupdn-${index.toString()}`\r\n                              ] || \"\"\r\n                            }\r\n                          />\r\n                          <div className={classes.buttonTray}>\r\n                            <Tooltip title=\"Add Group\" aria-label=\"add\">\r\n                              <IconButton\r\n                                size={\"small\"}\r\n                                onClick={() => {\r\n                                  setADGroupDNs([...ADGroupDNs, \"\"]);\r\n                                }}\r\n                              >\r\n                                <AddIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\r\n                              <IconButton\r\n                                size={\"small\"}\r\n                                style={{ marginLeft: 16 }}\r\n                                onClick={() => {\r\n                                  if (ADGroupDNs.length > 1) {\r\n                                    setADGroupDNs(\r\n                                      ADGroupDNs.filter((_, i) => i !== index)\r\n                                    );\r\n                                  }\r\n                                }}\r\n                              >\r\n                                <DeleteIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </div>\r\n                        </div>\r\n                      </Fragment>\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              </fieldset>\r\n              <br />\r\n              <Grid item xs={12} className={classes.buttonContainer}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={!isFormValid || isSending}\r\n                  onClick={() => setAdministrators()}\r\n                >\r\n                  Add additional DNs\r\n                </Button>\r\n              </Grid>\r\n            </Fragment>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapState = (state: AppState) => ({\r\n  loadingTenant: state.tenants.loadingTenant,\r\n  selectedTenant: state.tenants.currentTenant,\r\n  tenant: state.tenants.tenantInfo,\r\n});\r\n\r\nconst connector = connect(mapState, null);\r\n\r\nexport default withStyles(styles)(connector(TenantIdentityProvider));\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'RemoveRedEye');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"\n}), 'VisibilityOff');\n\nexports.default = _default;"],"names":["OIDCLogoElement","container","columnGap","width","height","item","LDAPLogoElement","BuiltInLogoElement","connector","connect","state","loadingTenant","tenants","selectedTenant","currentTenant","tenant","tenantInfo","withStyles","theme","createStyles","adUserDnRows","display","marginBottom","buttonTray","marginLeft","background","overlayAction","maxWidth","maxHeight","tenantDetailsStyles","spacingUtils","loaderAlign","textAlign","bold","fontWeight","italic","fontStyle","fileItem","marginRight","minWidth","flexFlow","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","classes","dispatch","useAppDispatch","useSelector","useState","isSending","setIsSending","dialogOpen","setDialogOpen","idpSelection","setIdpSelection","openIDConfigurationURL","setOpenIDConfigurationURL","openIDClientID","setOpenIDClientID","openIDSecretID","setOpenIDSecretID","showOIDCSecretID","setShowOIDCSecretID","openIDCallbackURL","setOpenIDCallbackURL","openIDClaimName","setOpenIDClaimName","openIDScopes","setOpenIDScopes","ADURL","setADURL","ADLookupBindDN","setADLookupBindDN","ADLookupBindPassword","setADLookupBindPassword","showADLookupBindPassword","setShowADLookupBindPassword","ADUserDNSearchBaseDN","setADUserDNSearchBaseDN","ADUserDNSearchFilter","setADUserDNSearchFilter","ADGroupSearchBaseDN","setADGroupSearchBaseDN","ADGroupSearchFilter","setADGroupSearchFilter","ADSkipTLS","setADSkipTLS","ADServerInsecure","setADServerInsecure","ADServerStartTLS","setADServerStartTLS","ADUserDNs","setADUserDNs","ADGroupDNs","setADGroupDNs","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","isFormValid","setIsFormValid","useEffect","identityProviderValidation","fieldKey","required","value","commonVal","commonFormValidation","Object","keys","length","getTenantIdentityProviderInfo","useCallback","api","namespace","name","then","res","oidc","configuration_url","client_id","secret_id","callback_url","claim_name","scopes","active_directory","url","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","skip_tls_verification","server_insecure","server_start_tls","catch","err","setErrorSnackMessage","title","confirmText","cancelText","titleIcon","isLoading","onClose","isOpen","onConfirm","payload","confirmationContent","className","Fragment","xs","sectionTitle","hrClass","protocolRadioOptions","paddingBottom","currentSelection","id","label","onChange","e","target","selectorOptions","formFieldRow","placeholder","error","type","overlayIcon","checked","variant","gutterBottom","buttonContainer","color","disabled","onClick","fieldGroup","descriptionText","map","_","index","toString","group","i","size","style","filter","user_dns","user","trim","group_dns","setSnackBarMessage","setAdministrators","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}