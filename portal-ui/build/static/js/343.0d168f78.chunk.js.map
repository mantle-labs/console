{"version":3,"file":"static/js/343.0d168f78.chunk.js","mappings":"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","sources":["screens/Console/Account/ChangePasswordModal.tsx","screens/Console/Account/Account.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport {\n  containerForHeader,\n  formFieldStyles,\n  modalStyleUtils,\n  spacingUtils,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { ChangePasswordRequest } from \"../Buckets/types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport { ChangePasswordIcon } from \"../../../icons\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { useTranslation } from 'react-i18next';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n    ...spacingUtils,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\ninterface IChangePasswordProps {\n  classes: any;\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst ChangePassword = ({\n  classes,\n  open,\n  closeModal,\n}: IChangePasswordProps) => {\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const [currentPassword, setCurrentPassword] = useState<string>(\"\");\n  const [newPassword, setNewPassword] = useState<string>(\"\");\n  const [reNewPassword, setReNewPassword] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  const userLoggedIn = localStorage.getItem(\"userLoggedIn\") || \"\";\n\n  const changePassword = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (newPassword !== reNewPassword) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: t(\"new_password_dont_match\"),\n          detailedError: \"\",\n        })\n      );\n      return;\n    }\n\n    if (newPassword.length < 8) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: t(\"password_not_long_enough\"),\n          detailedError: \"\",\n        })\n      );\n      return;\n    }\n\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n\n    let request: ChangePasswordRequest = {\n      current_secret_key: currentPassword,\n      new_secret_key: newPassword,\n    };\n\n    api\n      .invoke(\"POST\", \"/api/v1/account/change-password\", request)\n      .then(() => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        closeModal();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  return open ? (\n    <ModalWrapper\n      title={`Change Password for ${userLoggedIn}`}\n      modalOpen={open}\n      onClose={() => {\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        closeModal();\n      }}\n      titleIcon={<ChangePasswordIcon />}\n    >\n      <div>\n      {t(\"new_password_write_down\")}\n      </div>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          changePassword(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"current-password\"\n                name=\"current-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setCurrentPassword(event.target.value);\n                }}\n                label={t(\"current_password\")}\n                type={showPassword ? \"text\" : \"password\"}\n                value={currentPassword}\n                overlayAction={() => setShowPassword(!showPassword)}\n                overlayIcon={\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"new-password\"\n                name=\"new-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewPassword(event.target.value);\n                }}\n                label={t(\"new_password\")}\n                type={showPassword ? \"text\" : \"password\"}\n                value={newPassword}\n                overlayAction={() => setShowPassword(!showPassword)}\n                overlayIcon={\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\n                }\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"re-new-password\"\n                name=\"re-new-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setReNewPassword(event.target.value);\n                }}\n                label={t('type_new_password_again')}\n                type={showPassword ? \"text\" : \"password\"}\n                value={reNewPassword}\n                overlayAction={() => setShowPassword(!showPassword)}\n                overlayIcon={\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={\n                loading ||\n                !(\n                  currentPassword.length > 0 &&\n                  newPassword.length > 0 &&\n                  reNewPassword.length > 0\n                )\n              }\n            >\n              Save\n            </Button>\n          </Grid>\n          {loading && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ModalWrapper>\n  ) : null;\n};\n\nexport default withStyles(styles)(ChangePassword);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport api from \"../../../common/api\";\nimport { Box } from \"@mui/material\";\n\nimport {\n  AccountIcon,\n  AddIcon,\n  DeleteIcon,\n  PasswordKeyIcon,\n} from \"../../../icons\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport { stringSort } from \"../../../utils/sortFunctions\";\nimport PageHeader from \"../Common/PageHeader/PageHeader\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ChangePasswordModal from \"./ChangePasswordModal\";\nimport HelpBox from \"../../../common/HelpBox\";\nimport PageLayout from \"../Common/Layout/PageLayout\";\nimport SearchBox from \"../Common/SearchBox\";\nimport withSuspense from \"../Common/Components/withSuspense\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_PAGES,\n  IAM_SCOPES,\n} from \"../../../common/SecureComponent/permissions\";\nimport { SecureComponent } from \"../../../common/SecureComponent\";\nimport RBIconButton from \"../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport { selectSAs } from \"../Configurations/utils\";\nimport DeleteMultipleServiceAccounts from \"../Users/DeleteMultipleServiceAccounts\";\nimport ServiceAccountPolicy from \"./ServiceAccountPolicy\";\nimport { setErrorSnackMessage, setSnackBarMessage } from \"../../../systemSlice\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { selFeatures } from \"../consoleSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { useTranslation } from 'react-i18next';\n\nconst DeleteServiceAccount = withSuspense(\n  React.lazy(() => import(\"./DeleteServiceAccount\"))\n);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...actionsTray,\n    ...searchField,\n    searchField: {\n      ...searchField.searchField,\n      marginRight: \"auto\",\n      maxWidth: 380,\n    },\n    ...tableStyles,\n    ...containerForHeader(theme.spacing(4)),\n  })\n);\n\nconst Account = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const classes = useStyles();\n  const features = useSelector(selFeatures);\n\n  const [records, setRecords] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedServiceAccount, setSelectedServiceAccount] = useState<\n    string | null\n  >(null);\n  const [changePasswordModalOpen, setChangePasswordModalOpen] =\n    useState<boolean>(false);\n  const [selectedSAs, setSelectedSAs] = useState<string[]>([]);\n  const [deleteMultipleOpen, setDeleteMultipleOpen] = useState<boolean>(false);\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n\n  const userIDP = (features && features.includes(\"external-idp\")) || false;\n\n  useEffect(() => {\n    fetchRecords();\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/service-accounts`)\n        .then((res: string[]) => {\n          const serviceAccounts = res.sort(stringSort);\n\n          setLoading(false);\n          setRecords(serviceAccounts);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  }, [loading, setLoading, setRecords, dispatch]);\n\n  const fetchRecords = () => {\n    setLoading(true);\n  };\n\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\n    setDeleteOpen(false);\n\n    if (refresh) {\n      fetchRecords();\n    }\n  };\n\n  const closeDeleteMultipleModalAndRefresh = (refresh: boolean) => {\n    setDeleteMultipleOpen(false);\n    if (refresh) {\n      dispatch(setSnackBarMessage(t(\"delete_service_account_successful\")));\n      setSelectedSAs([]);\n      setLoading(true);\n    }\n  };\n\n  const policyModalOpen = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setPolicyOpen(true);\n  };\n\n  const selectAllItems = () => {\n    if (selectedSAs.length === records.length) {\n      setSelectedSAs([]);\n      return;\n    }\n    setSelectedSAs(records);\n  };\n\n  const closePolicyModal = () => {\n    setPolicyOpen(false);\n    setLoading(true);\n  };\n\n  const confirmDeleteServiceAccount = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setDeleteOpen(true);\n  };\n\n  const tableActions = [\n    { type: \"view\", onClick: policyModalOpen },\n    { type: \"delete\", onClick: confirmDeleteServiceAccount },\n  ];\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <React.Fragment>\n      {deleteOpen && (\n        <DeleteServiceAccount\n          deleteOpen={deleteOpen}\n          selectedServiceAccount={selectedServiceAccount}\n          closeDeleteModalAndRefresh={(refresh: boolean) => {\n            closeDeleteModalAndRefresh(refresh);\n          }}\n        />\n      )}\n      {deleteMultipleOpen && (\n        <DeleteMultipleServiceAccounts\n          deleteOpen={deleteMultipleOpen}\n          selectedSAs={selectedSAs}\n          closeDeleteModalAndRefresh={closeDeleteMultipleModalAndRefresh}\n        />\n      )}\n\n      {policyOpen && (\n        <ServiceAccountPolicy\n          open={policyOpen}\n          selectedAccessKey={selectedServiceAccount}\n          closeModalAndRefresh={closePolicyModal}\n        />\n      )}\n      <ChangePasswordModal\n        open={changePasswordModalOpen}\n        closeModal={() => setChangePasswordModalOpen(false)}\n      />\n      <PageHeader label={t(\"service_accounts\")} />\n      <PageLayout>\n        <Grid item={true} xs={12} className={classes.actionsTray}>\n          <SearchBox\n            placeholder={t(\"search_service_accounts\")}\n            onChange={setFilter}\n            overrideClass={classes.searchField}\n            value={filter}\n          />\n\n          <Box\n            sx={{\n              display: \"flex\",\n            }}\n          >\n            {\" \"}\n            <RBIconButton\n              tooltip={t(\"delete_selected\")}\n              onClick={() => {\n                setDeleteMultipleOpen(true);\n              }}\n              text={t(\"delete_selected\")}\n              icon={<DeleteIcon />}\n              color=\"secondary\"\n              disabled={selectedSAs.length === 0}\n              variant={\"outlined\"}\n            />\n            <SecureComponent\n              scopes={[IAM_SCOPES.ADMIN_CREATE_USER]}\n              resource={CONSOLE_UI_RESOURCE}\n              matchAll\n              errorProps={{ disabled: true }}\n            >\n              <RBIconButton\n                onClick={() => setChangePasswordModalOpen(true)}\n                text={t(\"change_password\")}\n                icon={<PasswordKeyIcon />}\n                color={\"primary\"}\n                variant={\"outlined\"}\n                disabled={userIDP}\n              />\n            </SecureComponent>\n            <RBIconButton\n              onClick={(e) => {\n                navigate(`${IAM_PAGES.ACCOUNT_ADD}`);\n              }}\n              text={t('create_service_account')}\n              icon={<AddIcon />}\n              color={\"primary\"}\n              variant={\"contained\"}\n            />\n          </Box>\n        </Grid>\n\n        <Grid item xs={12} className={classes.tableBlock}>\n          <TableWrapper\n            isLoading={loading}\n            records={filteredRecords}\n            entityName={t(\"service_account\")}\n            idField={\"\"}\n            columns={[{ label: t(\"service_account\"), elementKey: \"\" }]}\n            itemActions={tableActions}\n            selectedItems={selectedSAs}\n            onSelect={(e) => selectSAs(e, setSelectedSAs, selectedSAs)}\n            onSelectAll={selectAllItems}\n          />\n        </Grid>\n        <Grid item xs={12} marginTop={\"15px\"}>\n          <HelpBox\n            title={t(\"service_accounts_learn_more\")}\n            iconComponent={<AccountIcon />}\n            help={\n              <Fragment>\n                {t(\"service_accounts_info\")}\n                <br />\n              </Fragment>\n            }\n          />\n        </Grid>\n      </PageLayout>\n    </React.Fragment>\n  );\n};\n\nexport default Account;\n"],"names":["withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","spacingUtils","containerForHeader","spacing","classes","open","closeModal","dispatch","useAppDispatch","t","useTranslation","useState","currentPassword","setCurrentPassword","newPassword","setNewPassword","reNewPassword","setReNewPassword","loading","setLoading","showPassword","setShowPassword","userLoggedIn","localStorage","getItem","ModalWrapper","title","modalOpen","onClose","titleIcon","noValidate","autoComplete","onSubmit","e","event","preventDefault","length","setModalErrorSnackMessage","errorMessage","detailedError","request","current_secret_key","new_secret_key","api","then","catch","err","changePassword","Grid","container","item","xs","className","modalFormScrollable","formFieldRow","InputBoxWrapper","id","name","onChange","target","value","label","type","overlayAction","overlayIcon","VisibilityOff","RemoveRedEye","modalButtonBar","Button","variant","color","disabled","LinearProgress","DeleteServiceAccount","withSuspense","React","useStyles","makeStyles","actionsTray","searchField","marginRight","maxWidth","tableStyles","navigate","useNavigate","features","useSelector","selFeatures","records","setRecords","filter","setFilter","deleteOpen","setDeleteOpen","selectedServiceAccount","setSelectedServiceAccount","changePasswordModalOpen","setChangePasswordModalOpen","selectedSAs","setSelectedSAs","deleteMultipleOpen","setDeleteMultipleOpen","policyOpen","setPolicyOpen","userIDP","includes","useEffect","fetchRecords","res","serviceAccounts","sort","stringSort","setErrorSnackMessage","tableActions","onClick","filteredRecords","elementItem","toLowerCase","closeDeleteModalAndRefresh","refresh","DeleteMultipleServiceAccounts","setSnackBarMessage","ServiceAccountPolicy","selectedAccessKey","closeModalAndRefresh","ChangePasswordModal","PageHeader","PageLayout","SearchBox","placeholder","overrideClass","Box","sx","display","RBIconButton","tooltip","text","icon","SecureComponent","scopes","IAM_SCOPES","resource","CONSOLE_UI_RESOURCE","matchAll","errorProps","IAM_PAGES","tableBlock","TableWrapper","isLoading","entityName","idField","columns","elementKey","itemActions","selectedItems","onSelect","selectSAs","onSelectAll","marginTop","HelpBox","iconComponent","help","Fragment"],"sourceRoot":""}