{"version":3,"file":"static/js/6683.97b0bc4b.chunk.js","mappings":"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","sources":["icons/CertificateIcon.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx","screens/shared/ErrorBlock.tsx","../node_modules/@mui/icons-material/RemoveRedEye.js","../node_modules/@mui/icons-material/VisibilityOff.js"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport * as React from \"react\";\r\nimport { SVGProps } from \"react\";\r\n\r\nconst CertificateIcon = (props: SVGProps<SVGSVGElement>) => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className={`min-icon`}\r\n      fill={\"currentcolor\"}\r\n      viewBox=\"0 0 256 256\"\r\n      {...props}\r\n    >\r\n      <defs>\r\n        <clipPath id=\"certificate_svg__a\">\r\n          <path\r\n            data-name=\"Rect\\xE1ngulo 2156\"\r\n            fill=\"#07193e\"\r\n            d=\"M0 0h256v222.048H0z\"\r\n          />\r\n        </clipPath>\r\n      </defs>\r\n      <g\r\n        data-name=\"Grupo 4763\"\r\n        transform=\"translate(0 17)\"\r\n        clipPath=\"url(#certificate_svg__a)\"\r\n        fill=\"#07193e\"\r\n      >\r\n        <path\r\n          data-name=\"Trazado 8152\"\r\n          d=\"M240-.002H16a16 16 0 0 0-16 16v160a16 16 0 0 0 16 16h120l4.64-5.6 7.44-9.12A66.72 66.72 0 0 1 256 98.958v-82.96a16 16 0 0 0-16-16m-130.96 149.7H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 1 1 0 14.592m0-56H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 0 1 0 14.592m66.96-39.3a6.419 6.419 0 0 1-6.4 6.4H46.4a6.419 6.419 0 0 1-6.4-6.4v-1.792a6.419 6.419 0 0 1 6.4-6.4h123.2a6.419 6.419 0 0 1 6.4 6.4Z\"\r\n        />\r\n        <path\r\n          data-name=\"Trazado 8153\"\r\n          d=\"M256 137.486a50.96 50.96 0 1 0-86.16 36.72l-15.52 18.96 7.2 28.88 29.28-35.68a50.018 50.018 0 0 0 28.4 0l29.28 35.68 7.2-28.88-15.52-18.96a50.75 50.75 0 0 0 15.84-36.72m-50.928 29.688a29.688 29.688 0 0 1-.072-59.376h.072a29.688 29.688 0 0 1 0 59.376\"\r\n        />\r\n      </g>\r\n      <path data-name=\"Rect\\xE1ngulo 2157\" fill=\"none\" d=\"M0 0h256v256H0z\" />\r\n    </svg>\r\n  );\r\n};\r\nexport default CertificateIcon;\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useState } from \"react\";\r\nimport get from \"lodash/get\";\r\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  fieldBasic,\r\n  fileInputStyles,\r\n  tooltipHelper,\r\n} from \"../common/styleLibrary\";\r\nimport { fileProcess } from \"./utils\";\r\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\r\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\r\n\r\ninterface InputBoxProps {\r\n  label: string;\r\n  classes: any;\r\n  onChange: (e: string, i: string) => void;\r\n  id: string;\r\n  name: string;\r\n  disabled?: boolean;\r\n  tooltip?: string;\r\n  required?: boolean;\r\n  error?: string;\r\n  accept?: string;\r\n  value?: string;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...fieldBasic,\r\n    ...tooltipHelper,\r\n    valueString: {\r\n      maxWidth: 350,\r\n      whiteSpace: \"nowrap\",\r\n      overflow: \"hidden\",\r\n      textOverflow: \"ellipsis\",\r\n      marginTop: 2,\r\n    },\r\n    fileInputField: {\r\n      margin: \"13px 0\",\r\n      \"@media (max-width: 900px)\": {\r\n        flexFlow: \"column\",\r\n      },\r\n    },\r\n    ...fileInputStyles,\r\n    inputLabel: {\r\n      ...fieldBasic.inputLabel,\r\n      fontWeight: \"normal\",\r\n    },\r\n    textBoxContainer: {\r\n      ...fieldBasic.textBoxContainer,\r\n      maxWidth: \"100%\",\r\n      border: \"1px solid #eaeaea\",\r\n      paddingLeft: \"15px\",\r\n    },\r\n  });\r\n\r\nconst FileSelector = ({\r\n  label,\r\n  classes,\r\n  onChange,\r\n  id,\r\n  name,\r\n  disabled = false,\r\n  tooltip = \"\",\r\n  required,\r\n  error = \"\",\r\n  accept = \"\",\r\n  value = \"\",\r\n}: InputBoxProps) => {\r\n  const [showFileSelector, setShowSelector] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\r\n          classes.fieldContainer\r\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\r\n      >\r\n        {label !== \"\" && (\r\n          <InputLabel\r\n            htmlFor={id}\r\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\r\n              classes.inputLabel\r\n            }`}\r\n          >\r\n            <span>\r\n              {label}\r\n              {required ? \"*\" : \"\"}\r\n            </span>\r\n            {tooltip !== \"\" && (\r\n              <div className={classes.tooltipContainer}>\r\n                <Tooltip title={tooltip} placement=\"top-start\">\r\n                  <div className={classes.tooltip}>\r\n                    <HelpIcon />\r\n                  </div>\r\n                </Tooltip>\r\n              </div>\r\n            )}\r\n          </InputLabel>\r\n        )}\r\n\r\n        {showFileSelector || value === \"\" ? (\r\n          <div className={classes.textBoxContainer}>\r\n            <input\r\n              type=\"file\"\r\n              name={name}\r\n              onChange={(e) => {\r\n                const fileName = get(e, \"target.files[0].name\", \"\");\r\n                fileProcess(e, (data: any) => {\r\n                  onChange(data, fileName);\r\n                });\r\n              }}\r\n              accept={accept}\r\n              required={required}\r\n              disabled={disabled}\r\n              className={classes.fileInputField}\r\n            />\r\n\r\n            {value !== \"\" && (\r\n              <IconButton\r\n                color=\"primary\"\r\n                aria-label=\"upload picture\"\r\n                component=\"span\"\r\n                onClick={() => {\r\n                  setShowSelector(false);\r\n                }}\r\n                disableRipple={false}\r\n                disableFocusRipple={false}\r\n                size=\"small\"\r\n              >\r\n                <CancelIcon />\r\n              </IconButton>\r\n            )}\r\n\r\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\r\n          </div>\r\n        ) : (\r\n          <div className={classes.fileReselect}>\r\n            <div className={classes.valueString}>{value}</div>\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"upload picture\"\r\n              component=\"span\"\r\n              onClick={() => {\r\n                setShowSelector(true);\r\n              }}\r\n              disableRipple={false}\r\n              disableFocusRipple={false}\r\n              size=\"small\"\r\n            >\r\n              <AttachFileIcon />\r\n            </IconButton>\r\n          </div>\r\n        )}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(FileSelector);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nexport const fileProcess = (evt: any, callback: any) => {\r\n  const file = evt.target.files[0];\r\n  const reader = new FileReader();\r\n  reader.readAsDataURL(file);\r\n\r\n  reader.onload = () => {\r\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\r\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\r\n    const fileBase64 = reader.result;\r\n    if (fileBase64) {\r\n      const fileArray = fileBase64.toString().split(\"base64,\");\r\n\r\n      if (fileArray.length === 2) {\r\n        callback(fileArray[1]);\r\n      }\r\n    }\r\n  };\r\n};\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React from \"react\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { ICertificateInfo } from \"../../Tenants/types\";\r\nimport LanguageIcon from \"@mui/icons-material/Language\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\r\nimport Moment from \"react-moment\";\r\nimport CertificateIcon from \"../../../../icons/CertificateIcon\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    certificateIcon: {\r\n      float: \"left\",\r\n      paddingTop: \"5px !important\",\r\n      paddingRight: \"10px !important\",\r\n    },\r\n    certificateInfo: { float: \"right\" },\r\n    certificateWrapper: {\r\n      height: \"auto\",\r\n      margin: 5,\r\n      border: \"1px solid #E2E2E2\",\r\n      userSelect: \"text\",\r\n      borderRadius: 4,\r\n      \"& h6\": {\r\n        fontWeight: \"bold\",\r\n      },\r\n      \"& div\": {\r\n        padding: 0,\r\n      },\r\n    },\r\n    certificateExpiry: {\r\n      color: \"#616161\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      flexWrap: \"wrap\",\r\n      marginBottom: 5,\r\n      \"& .label\": {\r\n        fontWeight: \"bold\",\r\n      },\r\n    },\r\n    certificateDomains: {\r\n      color: \"#616161\",\r\n      \"& .label\": {\r\n        fontWeight: \"bold\",\r\n      },\r\n    },\r\n    certificatesList: {\r\n      border: \"1px solid #E2E2E2\",\r\n      borderRadius: 4,\r\n      color: \"#616161\",\r\n      textTransform: \"lowercase\",\r\n      overflowY: \"scroll\",\r\n      maxHeight: 145,\r\n      marginBottom: 10,\r\n    },\r\n    certificatesListItem: {\r\n      padding: \"0px 16px\",\r\n      borderBottom: \"1px solid #E2E2E2\",\r\n      \"& div\": {\r\n        minWidth: 0,\r\n      },\r\n      \"& svg\": {\r\n        fontSize: 12,\r\n        marginRight: 10,\r\n        opacity: 0.5,\r\n      },\r\n      \"& span\": {\r\n        fontSize: 12,\r\n      },\r\n    },\r\n  });\r\n\r\ninterface ITLSCertificate {\r\n  classes: any;\r\n  certificateInfo: ICertificateInfo;\r\n  onDelete: any;\r\n}\r\n\r\nconst TLSCertificate = ({\r\n  classes,\r\n  certificateInfo,\r\n  onDelete = () => {},\r\n}: ITLSCertificate) => {\r\n  const certificates = certificateInfo.domains || [];\r\n  return (\r\n    <Chip\r\n      key={certificateInfo.name}\r\n      variant=\"outlined\"\r\n      color=\"primary\"\r\n      className={classes.certificateWrapper}\r\n      label={\r\n        <Container>\r\n          <Grid item xs={1} className={classes.certificateIcon}>\r\n            <CertificateIcon />\r\n          </Grid>\r\n          <Grid item xs={11} className={classes.certificateInfo}>\r\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\r\n              {certificateInfo.name}\r\n            </Typography>\r\n            <Box className={classes.certificateExpiry}>\r\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\r\n              &nbsp;\r\n              <span className={\"label\"}>Expiry:&nbsp;</span>\r\n              <span>\r\n                <Moment format=\"YYYY/MM/DD\">{certificateInfo.expiry}</Moment>\r\n              </span>\r\n            </Box>\r\n            <Divider />\r\n            <br />\r\n            <Box className={classes.certificateDomains}>\r\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\r\n            </Box>\r\n            <List className={classes.certificatesList}>\r\n              {certificates.map((dom) => (\r\n                <ListItem className={classes.certificatesListItem}>\r\n                  <ListItemAvatar>\r\n                    <LanguageIcon />\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary={dom} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Grid>\r\n        </Container>\r\n      }\r\n      onDelete={onDelete}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(TLSCertificate);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport {\r\n  ICertificateInfo,\r\n  ISecurityContext,\r\n  ITenantEncryptionResponse,\r\n} from \"../types\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  containerForHeader,\r\n  createTenantCommon,\r\n  formFieldStyles,\r\n  modalBasic,\r\n  spacingUtils,\r\n  tenantDetailsStyles,\r\n  wizardCommon,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport api from \"../../../../common/api\";\r\nimport { ErrorResponseHandler } from \"../../../../common/types\";\r\n\r\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\r\nimport { Button, DialogContentText } from \"@mui/material\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\nimport { KeyPair } from \"../ListTenants/utils\";\r\nimport { clearValidationError } from \"../utils\";\r\nimport {\r\n  commonFormValidation,\r\n  IValidation,\r\n} from \"../../../../utils/validationFunctions\";\r\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\r\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\r\nimport SectionTitle from \"../../Common/SectionTitle\";\r\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\r\n\r\ninterface ITenantEncryption {\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...tenantDetailsStyles,\r\n    ...spacingUtils,\r\n    bold: { fontWeight: \"bold\" },\r\n    italic: { fontStyle: \"italic\" },\r\n    fileItem: {\r\n      marginRight: 10,\r\n      display: \"flex\",\r\n      \"& div label\": {\r\n        minWidth: 50,\r\n      },\r\n\r\n      \"@media (max-width: 900px)\": {\r\n        flexFlow: \"column\",\r\n      },\r\n    },\r\n    ...containerForHeader(theme.spacing(4)),\r\n    ...createTenantCommon,\r\n    ...formFieldStyles,\r\n    ...modalBasic,\r\n    ...wizardCommon,\r\n  });\r\n\r\nconst TenantEncryption = ({ classes }: ITenantEncryption) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\r\n\r\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\r\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\r\n  const [replicas, setReplicas] = useState<string>(\"2\");\r\n  const [image, setImage] = useState<string>(\"\");\r\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\r\n    useState<boolean>(false);\r\n  const [securityContext, setSecurityContext] = useState<ISecurityContext>({\r\n    fsGroup: \"1000\",\r\n    fsGroupChangePolicy: \"Always\",\r\n    runAsGroup: \"1000\",\r\n    runAsNonRoot: true,\r\n    runAsUser: \"1000\",\r\n  });\r\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\r\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\r\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\r\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\r\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\r\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\r\n    useState<boolean>(false);\r\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\r\n  const [serverTLSCertificateSecret, setServerTLSCertificateSecret] =\r\n    useState<ICertificateInfo | null>(null);\r\n  const [mTLSCertificateSecret, setMTLSCertificateSecret] =\r\n    useState<ICertificateInfo | null>(null);\r\n  const [mTLSCertificate, setMTLSCertificate] = useState<KeyPair | null>(null);\r\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\r\n    string[]\r\n  >([]);\r\n  const [showVaultAppRoleID, setShowVaultAppRoleID] = useState<boolean>(false);\r\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\r\n  const [showVaultAppRoleSecret, setShowVaultAppRoleSecret] =\r\n    useState<boolean>(false);\r\n  const [vaultClientCertificateSecret, setVaultClientCertificateSecret] =\r\n    useState<ICertificateInfo | null>(null);\r\n  const [vaultCACertificateSecret, setVaultCACertificateSecret] =\r\n    useState<ICertificateInfo | null>(null);\r\n  const [vaultClientCertificate, setVaultClientCertificate] =\r\n    useState<KeyPair | null>(null);\r\n  const [serverCertificate, setServerCertificate] = useState<KeyPair | null>(\r\n    null\r\n  );\r\n  const [vaultCACertificate, setVaultCACertificate] = useState<KeyPair | null>(\r\n    null\r\n  );\r\n  const [gemaltoCACertificateSecret, setGemaltoCACertificateSecret] =\r\n    useState<ICertificateInfo | null>(null);\r\n  const [gemaltoCACertificate, setGemaltotCACertificate] =\r\n    useState<KeyPair | null>(null);\r\n  const [validationErrors, setValidationErrors] = useState<any>({});\r\n  const cleanValidation = (fieldName: string) => {\r\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\r\n  };\r\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\r\n\r\n  // Validation\r\n  useEffect(() => {\r\n    let encryptionValidation: IValidation[] = [];\r\n\r\n    if (encryptionEnabled) {\r\n      encryptionValidation = [\r\n        ...encryptionValidation,\r\n        {\r\n          fieldKey: \"replicas\",\r\n          required: true,\r\n          value: replicas,\r\n          customValidation: parseInt(replicas) < 1,\r\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\r\n        },\r\n        {\r\n          fieldKey: \"kes_securityContext_runAsUser\",\r\n          required: true,\r\n          value: securityContext.runAsUser,\r\n          customValidation:\r\n            securityContext.runAsUser === \"\" ||\r\n            parseInt(securityContext.runAsUser) < 0,\r\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\r\n        },\r\n        {\r\n          fieldKey: \"kes_securityContext_runAsGroup\",\r\n          required: true,\r\n          value: securityContext.runAsGroup,\r\n          customValidation:\r\n            securityContext.runAsGroup === \"\" ||\r\n            parseInt(securityContext.runAsGroup) < 0,\r\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\r\n        },\r\n        {\r\n          fieldKey: \"kes_securityContext_fsGroup\",\r\n          required: true,\r\n          value: securityContext.fsGroup,\r\n          customValidation:\r\n            securityContext.fsGroup === \"\" ||\r\n            parseInt(securityContext.fsGroup) < 0,\r\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\r\n        },\r\n      ];\r\n\r\n      if (enabledCustomCertificates) {\r\n        encryptionValidation = [\r\n          ...encryptionValidation,\r\n          {\r\n            fieldKey: \"serverKey\",\r\n            required: false,\r\n            value: serverCertificate?.encoded_key || \"\",\r\n          },\r\n          {\r\n            fieldKey: \"serverCert\",\r\n            required: false,\r\n            value: serverCertificate?.encoded_cert || \"\",\r\n          },\r\n          {\r\n            fieldKey: \"clientKey\",\r\n            required: false,\r\n            value: mTLSCertificate?.encoded_key || \"\",\r\n          },\r\n          {\r\n            fieldKey: \"clientCert\",\r\n            required: false,\r\n            value: mTLSCertificate?.encoded_cert || \"\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      if (encryptionType === \"vault\") {\r\n        encryptionValidation = [\r\n          ...encryptionValidation,\r\n          {\r\n            fieldKey: \"vault_endpoint\",\r\n            required: true,\r\n            value: vaultConfiguration?.endpoint,\r\n          },\r\n          {\r\n            fieldKey: \"vault_id\",\r\n            required: true,\r\n            value: vaultConfiguration?.approle?.id,\r\n          },\r\n          {\r\n            fieldKey: \"vault_secret\",\r\n            required: true,\r\n            value: vaultConfiguration?.approle?.secret,\r\n          },\r\n          {\r\n            fieldKey: \"vault_ping\",\r\n            required: false,\r\n            value: vaultConfiguration?.status?.ping,\r\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\r\n            customValidationMessage: \"Value needs to be 0 or greater\",\r\n          },\r\n          {\r\n            fieldKey: \"vault_retry\",\r\n            required: false,\r\n            value: vaultConfiguration?.approle?.retry,\r\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\r\n            customValidationMessage: \"Value needs to be 0 or greater\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      if (encryptionType === \"aws\") {\r\n        encryptionValidation = [\r\n          ...encryptionValidation,\r\n          {\r\n            fieldKey: \"aws_endpoint\",\r\n            required: true,\r\n            value: awsConfiguration?.secretsmanager?.endpoint,\r\n          },\r\n          {\r\n            fieldKey: \"aws_region\",\r\n            required: true,\r\n            value: awsConfiguration?.secretsmanager?.region,\r\n          },\r\n          {\r\n            fieldKey: \"aws_accessKey\",\r\n            required: true,\r\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\r\n          },\r\n          {\r\n            fieldKey: \"aws_secretKey\",\r\n            required: true,\r\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\r\n          },\r\n        ];\r\n      }\r\n\r\n      if (encryptionType === \"gemalto\") {\r\n        encryptionValidation = [\r\n          ...encryptionValidation,\r\n          {\r\n            fieldKey: \"gemalto_endpoint\",\r\n            required: true,\r\n            value: gemaltoConfiguration?.keysecure?.endpoint,\r\n          },\r\n          {\r\n            fieldKey: \"gemalto_token\",\r\n            required: true,\r\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\r\n          },\r\n          {\r\n            fieldKey: \"gemalto_domain\",\r\n            required: true,\r\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\r\n          },\r\n          {\r\n            fieldKey: \"gemalto_retry\",\r\n            required: false,\r\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\r\n            customValidation:\r\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\r\n            customValidationMessage: \"Value needs to be 0 or greater\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      if (encryptionType === \"azure\") {\r\n        encryptionValidation = [\r\n          ...encryptionValidation,\r\n          {\r\n            fieldKey: \"azure_endpoint\",\r\n            required: true,\r\n            value: azureConfiguration?.keyvault?.endpoint,\r\n          },\r\n          {\r\n            fieldKey: \"azure_tenant_id\",\r\n            required: true,\r\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\r\n          },\r\n          {\r\n            fieldKey: \"azure_client_id\",\r\n            required: true,\r\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\r\n          },\r\n          {\r\n            fieldKey: \"azure_client_secret\",\r\n            required: true,\r\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\r\n          },\r\n        ];\r\n      }\r\n    }\r\n\r\n    const commonVal = commonFormValidation(encryptionValidation);\r\n\r\n    setIsFormValid(Object.keys(commonVal).length === 0);\r\n\r\n    setValidationErrors(commonVal);\r\n  }, [\r\n    enabledCustomCertificates,\r\n    encryptionEnabled,\r\n    encryptionType,\r\n    serverCertificate?.encoded_key,\r\n    serverCertificate?.encoded_cert,\r\n    mTLSCertificate?.encoded_key,\r\n    mTLSCertificate?.encoded_cert,\r\n    vaultClientCertificate?.encoded_key,\r\n    vaultClientCertificate?.encoded_cert,\r\n    vaultCACertificate?.encoded_key,\r\n    vaultCACertificate?.encoded_cert,\r\n    securityContext,\r\n    vaultConfiguration,\r\n    awsConfiguration,\r\n    gemaltoConfiguration,\r\n    azureConfiguration,\r\n    gcpConfiguration,\r\n    replicas,\r\n  ]);\r\n\r\n  const fetchEncryptionInfo = () => {\r\n    if (!refreshEncryptionInfo) {\r\n      setRefreshEncryptionInfo(true);\r\n      api\r\n        .invoke(\r\n          \"GET\",\r\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`\r\n        )\r\n        .then((resp: ITenantEncryptionResponse) => {\r\n          if (resp.vault) {\r\n            setEncryptionType(\"vault\");\r\n            setVaultConfiguration(resp.vault);\r\n            if (resp.vault.tls) {\r\n              setVaultClientCertificateSecret(resp.vault.tls.crt);\r\n              setVaultCACertificateSecret(resp.vault.tls.ca);\r\n            }\r\n          } else if (resp.aws) {\r\n            setEncryptionType(\"aws\");\r\n            setAWSConfiguration(resp.aws);\r\n          } else if (resp.gemalto) {\r\n            setEncryptionType(\"gemalto\");\r\n            setGemaltoConfiguration(resp.gemalto);\r\n            if (resp.gemalto.keysecure.tls) {\r\n              setGemaltoCACertificateSecret(resp.gemalto.keysecure.tls.ca);\r\n            }\r\n          } else if (resp.gcp) {\r\n            setEncryptionType(\"gcp\");\r\n            setGCPConfiguration(resp.gcp);\r\n          } else if (resp.azure) {\r\n            setEncryptionType(\"azure\");\r\n            setAzureConfiguration(resp.azure);\r\n          }\r\n\r\n          setEncryptionEnabled(true);\r\n          setImage(resp.image);\r\n          setReplicas(resp.replicas);\r\n          if (resp.securityContext) {\r\n            setSecurityContext(resp.securityContext);\r\n          }\r\n          if (resp.server || resp.mtls_client) {\r\n            setEnabledCustomCertificates(true);\r\n          }\r\n          if (resp.server) {\r\n            setServerTLSCertificateSecret(resp.server);\r\n          }\r\n          if (resp.mtls_client) {\r\n            setMTLSCertificateSecret(resp.mtls_client);\r\n          }\r\n          setRefreshEncryptionInfo(false);\r\n        })\r\n        .catch((err: ErrorResponseHandler) => {\r\n          console.error(err);\r\n          setRefreshEncryptionInfo(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEncryptionInfo();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\r\n    setCertificatesToBeRemoved([\r\n      ...certificatesToBeRemoved,\r\n      certificateInfo.name,\r\n    ]);\r\n    if (certificateInfo.name === serverTLSCertificateSecret?.name) {\r\n      setServerTLSCertificateSecret(null);\r\n    }\r\n    if (certificateInfo.name === mTLSCertificateSecret?.name) {\r\n      setMTLSCertificateSecret(null);\r\n    }\r\n    if (certificateInfo.name === vaultClientCertificateSecret?.name) {\r\n      setVaultClientCertificateSecret(null);\r\n    }\r\n    if (certificateInfo.name === vaultCACertificateSecret?.name) {\r\n      setVaultCACertificateSecret(null);\r\n    }\r\n    if (certificateInfo.name === gemaltoCACertificateSecret?.name) {\r\n      setGemaltoCACertificateSecret(null);\r\n    }\r\n  };\r\n\r\n  const updateEncryptionConfiguration = () => {\r\n    if (encryptionEnabled) {\r\n      let insertEncrypt = {};\r\n      switch (encryptionType) {\r\n        case \"gemalto\":\r\n          let gemaltoCAIntroduce = {};\r\n\r\n          if (gemaltoCACertificate?.encoded_cert) {\r\n            gemaltoCAIntroduce = {\r\n              tls: {\r\n                ca: gemaltoCACertificate?.encoded_cert,\r\n              },\r\n            };\r\n          }\r\n          insertEncrypt = {\r\n            gemalto: {\r\n              keysecure: {\r\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\r\n                credentials: {\r\n                  token:\r\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\r\n                  domain:\r\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\r\n                  retry: parseInt(\r\n                    gemaltoConfiguration?.keysecure?.credentials?.retry\r\n                  ),\r\n                },\r\n                ...gemaltoCAIntroduce,\r\n              },\r\n            },\r\n          };\r\n          break;\r\n        case \"aws\":\r\n          insertEncrypt = {\r\n            aws: {\r\n              secretsmanager: {\r\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\r\n                region: awsConfiguration?.secretsmanager?.region || \"\",\r\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\r\n                credentials: {\r\n                  accesskey:\r\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\r\n                    \"\",\r\n                  secretkey:\r\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\r\n                    \"\",\r\n                  token:\r\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\r\n                },\r\n              },\r\n            },\r\n          };\r\n          break;\r\n        case \"azure\":\r\n          insertEncrypt = {\r\n            azure: {\r\n              keyvault: {\r\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\r\n                credentials: {\r\n                  tenant_id:\r\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\r\n                  client_id:\r\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\r\n                  client_secret:\r\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\r\n                    \"\",\r\n                },\r\n              },\r\n            },\r\n          };\r\n          break;\r\n        case \"gcp\":\r\n          insertEncrypt = {\r\n            gcp: {\r\n              secretmanager: {\r\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\r\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\r\n                credentials: {\r\n                  client_email:\r\n                    gcpConfiguration?.secretmanager?.credentials\r\n                      ?.client_email || \"\",\r\n                  client_id:\r\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\r\n                    \"\",\r\n                  private_key_id:\r\n                    gcpConfiguration?.secretmanager?.credentials\r\n                      ?.private_key_id || \"\",\r\n                  private_key:\r\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\r\n                    \"\",\r\n                },\r\n              },\r\n            },\r\n          };\r\n          break;\r\n        case \"vault\":\r\n          let vaultKeyPair = null;\r\n          let vaultCAInsert = null;\r\n          if (\r\n            vaultClientCertificate?.encoded_key &&\r\n            vaultClientCertificate?.encoded_cert\r\n          ) {\r\n            vaultKeyPair = {\r\n              key: vaultClientCertificate?.encoded_key,\r\n              crt: vaultClientCertificate?.encoded_cert,\r\n            };\r\n          }\r\n          if (vaultCACertificate?.encoded_cert) {\r\n            vaultCAInsert = {\r\n              ca: vaultCACertificate?.encoded_cert,\r\n            };\r\n          }\r\n          let vaultTLS = null;\r\n          if (vaultKeyPair || vaultCAInsert) {\r\n            vaultTLS = {\r\n              tls: {\r\n                ...vaultKeyPair,\r\n                ...vaultCAInsert,\r\n              },\r\n            };\r\n          }\r\n          insertEncrypt = {\r\n            vault: {\r\n              endpoint: vaultConfiguration?.endpoint || \"\",\r\n              engine: vaultConfiguration?.engine || \"\",\r\n              namespace: vaultConfiguration?.namespace || \"\",\r\n              prefix: vaultConfiguration?.prefix || \"\",\r\n              approle: {\r\n                engine: vaultConfiguration?.approle?.engine || \"\",\r\n                id: vaultConfiguration?.approle?.id || \"\",\r\n                secret: vaultConfiguration?.approle?.secret || \"\",\r\n                retry: parseInt(vaultConfiguration?.approle?.retry),\r\n              },\r\n              ...vaultTLS,\r\n              status: {\r\n                ping: parseInt(vaultConfiguration?.status?.ping),\r\n              },\r\n            },\r\n          };\r\n          break;\r\n      }\r\n\r\n      let encryptionServerKeyPair: any = {};\r\n      let encryptionClientKeyPair: any = {};\r\n\r\n      if (mTLSCertificate?.encoded_key && mTLSCertificate?.encoded_cert) {\r\n        encryptionClientKeyPair = {\r\n          client: {\r\n            key: mTLSCertificate?.encoded_key,\r\n            crt: mTLSCertificate?.encoded_cert,\r\n          },\r\n        };\r\n      }\r\n\r\n      if (serverCertificate?.encoded_key && serverCertificate?.encoded_cert) {\r\n        encryptionServerKeyPair = {\r\n          server: {\r\n            key: serverCertificate?.encoded_key,\r\n            crt: serverCertificate?.encoded_cert,\r\n          },\r\n        };\r\n      }\r\n      const dataSend = {\r\n        secretsToBeDeleted: certificatesToBeRemoved || [],\r\n        replicas: replicas,\r\n        securityContext: securityContext,\r\n        image: image,\r\n        ...encryptionClientKeyPair,\r\n        ...encryptionServerKeyPair,\r\n        ...insertEncrypt,\r\n      };\r\n      if (!updatingEncryption) {\r\n        setUpdatingEncryption(true);\r\n        api\r\n          .invoke(\r\n            \"PUT\",\r\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\r\n            dataSend\r\n          )\r\n          .then(() => {\r\n            setConfirmOpen(false);\r\n            setUpdatingEncryption(false);\r\n            fetchEncryptionInfo();\r\n          })\r\n          .catch((err: ErrorResponseHandler) => {\r\n            setUpdatingEncryption(false);\r\n            setConfirmOpen(false);\r\n            dispatch(setErrorSnackMessage(err));\r\n          });\r\n      }\r\n    } else {\r\n      if (!updatingEncryption) {\r\n        setUpdatingEncryption(true);\r\n        api\r\n          .invoke(\r\n            \"DELETE\",\r\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\r\n            {}\r\n          )\r\n          .then(() => {\r\n            fetchEncryptionInfo();\r\n            setUpdatingEncryption(false);\r\n          })\r\n          .catch((err: ErrorResponseHandler) => {\r\n            setUpdatingEncryption(false);\r\n            dispatch(setErrorSnackMessage(err));\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmOpen && (\r\n        <ConfirmDialog\r\n          isOpen={confirmOpen}\r\n          title={\r\n            encryptionEnabled\r\n              ? \"Enable encryption at rest for tenant?\"\r\n              : \"Disable encryption at rest for tenant?\"\r\n          }\r\n          confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\r\n          cancelText=\"Cancel\"\r\n          onClose={() => setConfirmOpen(false)}\r\n          onConfirm={updateEncryptionConfiguration}\r\n          confirmationContent={\r\n            <DialogContentText>\r\n              {encryptionEnabled\r\n                ? \"Data will be encrypted using and external KMS\"\r\n                : \"Current encrypted information will not be accessible\"}\r\n            </DialogContentText>\r\n          }\r\n        />\r\n      )}\r\n      <Grid container spacing={1}>\r\n        <Grid item xs>\r\n          <h1 className={classes.sectionTitle}>Encryption</h1>\r\n        </Grid>\r\n        <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\r\n          <FormSwitchWrapper\r\n            label={\"\"}\r\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\r\n            checked={encryptionEnabled}\r\n            value={\"tenant_encryption\"}\r\n            id=\"tenant-encryption\"\r\n            name=\"tenant-encryption\"\r\n            onChange={() => {\r\n              setEncryptionEnabled(!encryptionEnabled);\r\n            }}\r\n            description=\"\"\r\n          />\r\n        </Grid>\r\n        <Grid xs={12}>\r\n          <hr className={classes.hrClass} />\r\n        </Grid>\r\n        {encryptionEnabled && (\r\n          <Fragment>\r\n            <Grid item xs={12} className={classes.encryptionTypeOptions}>\r\n              <RadioGroupSelector\r\n                currentSelection={encryptionType}\r\n                id=\"encryptionType\"\r\n                name=\"encryptionType\"\r\n                label=\"Encryption Options\"\r\n                onChange={(e) => {\r\n                  setEncryptionType(e.target.value);\r\n                }}\r\n                selectorOptions={[\r\n                  { label: \"Vault\", value: \"vault\" },\r\n                  { label: \"AWS\", value: \"aws\" },\r\n                  { label: \"Gemalto\", value: \"gemalto\" },\r\n                  { label: \"GCP\", value: \"gcp\" },\r\n                  { label: \"Azure\", value: \"azure\" },\r\n                ]}\r\n              />\r\n            </Grid>\r\n            {encryptionType === \"vault\" && (\r\n              <Fragment>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"vault_endpoint\"\r\n                    name=\"vault_endpoint\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        endpoint: e.target.value,\r\n                      })\r\n                    }\r\n                    label=\"Endpoint\"\r\n                    value={vaultConfiguration?.endpoint || \"\"}\r\n                    error={validationErrors[\"vault_ping\"] || \"\"}\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"vault_engine\"\r\n                    name=\"vault_engine\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        engine: e.target.value,\r\n                      })\r\n                    }\r\n                    label=\"Engine\"\r\n                    value={vaultConfiguration?.engine || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"vault_namespace\"\r\n                    name=\"vault_namespace\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        namespace: e.target.value,\r\n                      })\r\n                    }\r\n                    label=\"Namespace\"\r\n                    value={vaultConfiguration?.namespace || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"vault_prefix\"\r\n                    name=\"vault_prefix\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        prefix: e.target.value,\r\n                      })\r\n                    }\r\n                    label=\"Prefix\"\r\n                    value={vaultConfiguration?.prefix || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <SectionTitle>App Role</SectionTitle>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"vault_approle_engine\"\r\n                    name=\"vault_approle_engine\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        approle: {\r\n                          ...vaultConfiguration?.approle,\r\n                          engine: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Engine\"\r\n                    value={vaultConfiguration?.approle?.engine || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    type={showVaultAppRoleID ? \"text\" : \"password\"}\r\n                    id=\"vault_id\"\r\n                    name=\"vault_id\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        approle: {\r\n                          ...vaultConfiguration?.approle,\r\n                          id: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"AppRole ID\"\r\n                    value={vaultConfiguration?.approle?.id || \"\"}\r\n                    required\r\n                    error={validationErrors[\"vault_id\"] || \"\"}\r\n                    overlayIcon={\r\n                      showVaultAppRoleID ? (\r\n                        <VisibilityOffIcon />\r\n                      ) : (\r\n                        <RemoveRedEyeIcon />\r\n                      )\r\n                    }\r\n                    overlayAction={() =>\r\n                      setShowVaultAppRoleID(!showVaultAppRoleID)\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    type={showVaultAppRoleSecret ? \"text\" : \"password\"}\r\n                    id=\"vault_secret\"\r\n                    name=\"vault_secret\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        approle: {\r\n                          ...vaultConfiguration?.approle,\r\n                          secret: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"AppRole Secret\"\r\n                    value={vaultConfiguration?.approle?.secret || \"\"}\r\n                    required\r\n                    error={validationErrors[\"vault_secret\"] || \"\"}\r\n                    overlayIcon={\r\n                      showVaultAppRoleSecret ? (\r\n                        <VisibilityOffIcon />\r\n                      ) : (\r\n                        <RemoveRedEyeIcon />\r\n                      )\r\n                    }\r\n                    overlayAction={() =>\r\n                      setShowVaultAppRoleSecret(!showVaultAppRoleSecret)\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    id=\"vault_retry\"\r\n                    name=\"vault_retry\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        approle: {\r\n                          ...vaultConfiguration?.approle,\r\n                          retry: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Retry (Seconds)\"\r\n                    error={validationErrors[\"vault_retry\"] || \"\"}\r\n                    value={vaultConfiguration?.approle?.retry || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <SectionTitle>Vault Certificates (optional)</SectionTitle>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      Mutual TLS authentication with Vault (optional)\r\n                    </legend>\r\n                    {vaultClientCertificateSecret ? (\r\n                      <TLSCertificate\r\n                        certificateInfo={vaultClientCertificateSecret}\r\n                        onDelete={() =>\r\n                          removeCertificate(vaultClientCertificateSecret)\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <Fragment>\r\n                        <FileSelector\r\n                          onChange={(encodedValue, fileName) =>\r\n                            setVaultClientCertificate({\r\n                              encoded_key: encodedValue || \"\",\r\n                              id: vaultClientCertificate?.id || \"\",\r\n                              key: fileName || \"\",\r\n                              cert: vaultClientCertificate?.cert || \"\",\r\n                              encoded_cert:\r\n                                vaultClientCertificate?.encoded_cert || \"\",\r\n                            })\r\n                          }\r\n                          accept=\".key,.pem\"\r\n                          id=\"vault_key\"\r\n                          name=\"vault_key\"\r\n                          label=\"Key\"\r\n                          value={vaultClientCertificate?.key || \"\"}\r\n                        />\r\n                        <FileSelector\r\n                          onChange={(encodedValue, fileName) =>\r\n                            setVaultClientCertificate({\r\n                              encoded_key:\r\n                                vaultClientCertificate?.encoded_key || \"\",\r\n                              id: vaultClientCertificate?.id || \"\",\r\n                              key: vaultClientCertificate?.key || \"\",\r\n                              cert: fileName || \"\",\r\n                              encoded_cert: encodedValue || \"\",\r\n                            })\r\n                          }\r\n                          accept=\".cer,.crt,.cert,.pem\"\r\n                          id=\"vault_cert\"\r\n                          name=\"vault_cert\"\r\n                          label=\"Cert\"\r\n                          value={vaultClientCertificate?.cert || \"\"}\r\n                        />\r\n                      </Fragment>\r\n                    )}\r\n                  </fieldset>\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      Vault CA certificate (optional)\r\n                    </legend>\r\n                    {vaultCACertificateSecret ? (\r\n                      <TLSCertificate\r\n                        certificateInfo={vaultCACertificateSecret}\r\n                        onDelete={() =>\r\n                          removeCertificate(vaultCACertificateSecret)\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <FileSelector\r\n                        onChange={(encodedValue, fileName) =>\r\n                          setVaultCACertificate({\r\n                            encoded_key: vaultCACertificate?.encoded_key || \"\",\r\n                            id: vaultCACertificate?.id || \"\",\r\n                            key: vaultCACertificate?.key || \"\",\r\n                            cert: fileName || \"\",\r\n                            encoded_cert: encodedValue || \"\",\r\n                          })\r\n                        }\r\n                        accept=\".cer,.crt,.cert,.pem\"\r\n                        id=\"vault_ca\"\r\n                        name=\"vault_ca\"\r\n                        label=\"CA\"\r\n                        value={vaultCACertificate?.cert || \"\"}\r\n                      />\r\n                    )}\r\n                  </fieldset>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <SectionTitle>Status</SectionTitle>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    id=\"vault_ping\"\r\n                    name=\"vault_ping\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setVaultConfiguration({\r\n                        ...vaultConfiguration,\r\n                        status: {\r\n                          ...vaultConfiguration?.status,\r\n                          ping: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Ping (Seconds)\"\r\n                    error={validationErrors[\"vault_ping\"] || \"\"}\r\n                    value={vaultConfiguration?.status?.ping || \"\"}\r\n                  />\r\n                </Grid>\r\n              </Fragment>\r\n            )}\r\n            {encryptionType === \"azure\" && (\r\n              <Fragment>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"azure_endpoint\"\r\n                    name=\"azure_endpoint\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setAzureConfiguration({\r\n                        ...azureConfiguration,\r\n                        keyvault: {\r\n                          ...azureConfiguration?.keyvault,\r\n                          endpoint: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Endpoint\"\r\n                    error={validationErrors[\"azure_endpoint\"] || \"\"}\r\n                    value={azureConfiguration?.keyvault?.endpoint || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      Credentials\r\n                    </legend>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"azure_tenant_id\"\r\n                        name=\"azure_tenant_id\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setAzureConfiguration({\r\n                            ...azureConfiguration,\r\n                            keyvault: {\r\n                              ...azureConfiguration?.keyvault,\r\n                              credentials: {\r\n                                ...azureConfiguration?.keyvault?.credentials,\r\n                                tenant_id: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Tenant ID\"\r\n                        value={\r\n                          azureConfiguration?.keyvault?.credentials\r\n                            ?.tenant_id || \"\"\r\n                        }\r\n                        error={validationErrors[\"azure_tenant_id\"] || \"\"}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"azure_client_id\"\r\n                        name=\"azure_client_id\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setAzureConfiguration({\r\n                            ...azureConfiguration,\r\n                            keyvault: {\r\n                              ...azureConfiguration?.keyvault,\r\n                              credentials: {\r\n                                ...azureConfiguration?.keyvault?.credentials,\r\n                                client_id: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Client ID\"\r\n                        value={\r\n                          azureConfiguration?.keyvault?.credentials\r\n                            ?.client_id || \"\"\r\n                        }\r\n                        error={validationErrors[\"azure_client_id\"] || \"\"}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"azure_client_secret\"\r\n                        name=\"azure_client_secret\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setAzureConfiguration({\r\n                            ...azureConfiguration,\r\n                            keyvault: {\r\n                              ...azureConfiguration?.keyvault,\r\n                              credentials: {\r\n                                ...azureConfiguration?.keyvault?.credentials,\r\n                                client_secret: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Client Secret\"\r\n                        value={\r\n                          azureConfiguration?.keyvault?.credentials\r\n                            ?.client_secret || \"\"\r\n                        }\r\n                        error={validationErrors[\"azure_client_secret\"] || \"\"}\r\n                      />\r\n                    </Grid>\r\n                  </fieldset>\r\n                </Grid>\r\n              </Fragment>\r\n            )}\r\n            {encryptionType === \"gcp\" && (\r\n              <Fragment>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"gcp_project_id\"\r\n                    name=\"gcp_project_id\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setGCPConfiguration({\r\n                        ...gcpConfiguration,\r\n                        secretmanager: {\r\n                          ...gcpConfiguration?.secretmanager,\r\n                          project_id: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Project ID\"\r\n                    value={gcpConfiguration?.secretmanager.project_id || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"gcp_endpoint\"\r\n                    name=\"gcp_endpoint\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setGCPConfiguration({\r\n                        ...gcpConfiguration,\r\n                        secretmanager: {\r\n                          ...gcpConfiguration?.secretmanager,\r\n                          endpoint: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Endpoint\"\r\n                    value={gcpConfiguration?.secretmanager.endpoint || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      Credentials\r\n                    </legend>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"gcp_client_email\"\r\n                        name=\"gcp_client_email\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setGCPConfiguration({\r\n                            ...gcpConfiguration,\r\n                            secretmanager: {\r\n                              ...gcpConfiguration?.secretmanager,\r\n                              credentials: {\r\n                                ...gcpConfiguration?.secretmanager.credentials,\r\n                                client_email: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Client Email\"\r\n                        value={\r\n                          gcpConfiguration?.secretmanager.credentials\r\n                            ?.client_email || \"\"\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"gcp_client_id\"\r\n                        name=\"gcp_client_id\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setGCPConfiguration({\r\n                            ...gcpConfiguration,\r\n                            secretmanager: {\r\n                              ...gcpConfiguration?.secretmanager,\r\n                              credentials: {\r\n                                ...gcpConfiguration?.secretmanager.credentials,\r\n                                client_id: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Client ID\"\r\n                        value={\r\n                          gcpConfiguration?.secretmanager.credentials\r\n                            ?.client_id || \"\"\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"gcp_private_key_id\"\r\n                        name=\"gcp_private_key_id\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setGCPConfiguration({\r\n                            ...gcpConfiguration,\r\n                            secretmanager: {\r\n                              ...gcpConfiguration?.secretmanager,\r\n                              credentials: {\r\n                                ...gcpConfiguration?.secretmanager.credentials,\r\n                                private_key_id: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Private Key ID\"\r\n                        value={\r\n                          gcpConfiguration?.secretmanager.credentials\r\n                            ?.private_key_id || \"\"\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"gcp_private_key\"\r\n                        name=\"gcp_private_key\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setGCPConfiguration({\r\n                            ...gcpConfiguration,\r\n                            secretmanager: {\r\n                              ...gcpConfiguration?.secretmanager,\r\n                              credentials: {\r\n                                ...gcpConfiguration?.secretmanager.credentials,\r\n                                private_key: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Private Key\"\r\n                        value={\r\n                          gcpConfiguration?.secretmanager.credentials\r\n                            ?.private_key || \"\"\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                  </fieldset>\r\n                </Grid>\r\n              </Fragment>\r\n            )}\r\n            {encryptionType === \"aws\" && (\r\n              <Fragment>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"aws_endpoint\"\r\n                    name=\"aws_endpoint\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setAWSConfiguration({\r\n                        ...awsConfiguration,\r\n                        secretsmanager: {\r\n                          ...awsConfiguration?.secretsmanager,\r\n                          endpoint: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Endpoint\"\r\n                    value={awsConfiguration?.secretsmanager?.endpoint || \"\"}\r\n                    required\r\n                    error={validationErrors[\"aws_endpoint\"] || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"aws_region\"\r\n                    name=\"aws_region\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setAWSConfiguration({\r\n                        ...awsConfiguration,\r\n                        secretsmanager: {\r\n                          ...awsConfiguration?.secretsmanager,\r\n                          region: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Region\"\r\n                    value={awsConfiguration?.secretsmanager?.region || \"\"}\r\n                    error={validationErrors[\"aws_region\"] || \"\"}\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"aws_kmsKey\"\r\n                    name=\"aws_kmsKey\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setAWSConfiguration({\r\n                        ...awsConfiguration,\r\n                        secretsmanager: {\r\n                          ...awsConfiguration?.secretsmanager,\r\n                          kmskey: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"KMS Key\"\r\n                    value={awsConfiguration?.secretsmanager?.kmskey || \"\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      Credentials\r\n                    </legend>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"aws_accessKey\"\r\n                        name=\"aws_accessKey\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setAWSConfiguration({\r\n                            ...awsConfiguration,\r\n                            secretsmanager: {\r\n                              ...awsConfiguration?.secretsmanager,\r\n                              credentials: {\r\n                                ...awsConfiguration?.secretsmanager\r\n                                  ?.credentials,\r\n                                accesskey: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Access Key\"\r\n                        value={\r\n                          awsConfiguration?.secretsmanager?.credentials\r\n                            ?.accesskey || \"\"\r\n                        }\r\n                        error={validationErrors[\"aws_accessKey\"] || \"\"}\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"aws_secretKey\"\r\n                        name=\"aws_secretKey\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setAWSConfiguration({\r\n                            ...awsConfiguration,\r\n                            secretsmanager: {\r\n                              ...awsConfiguration?.secretsmanager,\r\n                              credentials: {\r\n                                ...awsConfiguration?.secretsmanager\r\n                                  ?.credentials,\r\n                                secretkey: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Secret Key\"\r\n                        value={\r\n                          awsConfiguration?.secretsmanager?.credentials\r\n                            ?.secretkey || \"\"\r\n                        }\r\n                        error={validationErrors[\"aws_secretKey\"] || \"\"}\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"aws_token\"\r\n                        name=\"aws_token\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setAWSConfiguration({\r\n                            ...awsConfiguration,\r\n                            secretsmanager: {\r\n                              ...awsConfiguration?.secretsmanager,\r\n                              credentials: {\r\n                                ...awsConfiguration?.secretsmanager\r\n                                  ?.credentials,\r\n                                token: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Token\"\r\n                        value={\r\n                          awsConfiguration?.secretsmanager?.credentials\r\n                            ?.token || \"\"\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                  </fieldset>\r\n                </Grid>\r\n              </Fragment>\r\n            )}\r\n            {encryptionType === \"gemalto\" && (\r\n              <Fragment>\r\n                <Grid item xs={12}>\r\n                  <InputBoxWrapper\r\n                    id=\"gemalto_endpoint\"\r\n                    name=\"gemalto_endpoint\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                      setGemaltoConfiguration({\r\n                        ...gemaltoConfiguration,\r\n                        keysecure: {\r\n                          ...gemaltoConfiguration?.keysecure,\r\n                          endpoint: e.target.value,\r\n                        },\r\n                      })\r\n                    }\r\n                    label=\"Endpoint\"\r\n                    value={gemaltoConfiguration?.keysecure?.endpoint || \"\"}\r\n                    error={validationErrors[\"gemalto_endpoint\"] || \"\"}\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{\r\n                    marginBottom: 15,\r\n                  }}\r\n                >\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      Credentials\r\n                    </legend>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"gemalto_token\"\r\n                        name=\"gemalto_token\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setGemaltoConfiguration({\r\n                            ...gemaltoConfiguration,\r\n                            keysecure: {\r\n                              ...gemaltoConfiguration?.keysecure,\r\n                              credentials: {\r\n                                ...gemaltoConfiguration?.keysecure?.credentials,\r\n                                token: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Token\"\r\n                        value={\r\n                          gemaltoConfiguration?.keysecure?.credentials?.token ||\r\n                          \"\"\r\n                        }\r\n                        error={validationErrors[\"gemalto_token\"] || \"\"}\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"gemalto_domain\"\r\n                        name=\"gemalto_domain\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setGemaltoConfiguration({\r\n                            ...gemaltoConfiguration,\r\n                            keysecure: {\r\n                              ...gemaltoConfiguration?.keysecure,\r\n                              credentials: {\r\n                                ...gemaltoConfiguration?.keysecure?.credentials,\r\n                                domain: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Domain\"\r\n                        value={\r\n                          gemaltoConfiguration?.keysecure?.credentials\r\n                            ?.domain || \"\"\r\n                        }\r\n                        error={validationErrors[\"gemalto_domain\"] || \"\"}\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        id=\"gemalto_retry\"\r\n                        name=\"gemalto_retry\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                          setGemaltoConfiguration({\r\n                            ...gemaltoConfiguration,\r\n                            keysecure: {\r\n                              ...gemaltoConfiguration?.keysecure,\r\n                              credentials: {\r\n                                ...gemaltoConfiguration?.keysecure?.credentials,\r\n                                retry: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Retry (seconds)\"\r\n                        value={\r\n                          gemaltoConfiguration?.keysecure?.credentials?.retry ||\r\n                          \"\"\r\n                        }\r\n                        error={validationErrors[\"gemalto_retry\"] || \"\"}\r\n                      />\r\n                    </Grid>\r\n                  </fieldset>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{\r\n                    marginBottom: 15,\r\n                  }}\r\n                >\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      Custom CA Root certificate verification\r\n                    </legend>\r\n                    {gemaltoCACertificateSecret ? (\r\n                      <TLSCertificate\r\n                        certificateInfo={gemaltoCACertificateSecret}\r\n                        onDelete={() =>\r\n                          removeCertificate(gemaltoCACertificateSecret)\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <FileSelector\r\n                        onChange={(encodedValue, fileName) =>\r\n                          setGemaltotCACertificate({\r\n                            encoded_key:\r\n                              gemaltoCACertificate?.encoded_key || \"\",\r\n                            id: gemaltoCACertificate?.id || \"\",\r\n                            key: gemaltoCACertificate?.key || \"\",\r\n                            cert: fileName || \"\",\r\n                            encoded_cert: encodedValue || \"\",\r\n                          })\r\n                        }\r\n                        accept=\".cer,.crt,.cert,.pem\"\r\n                        id=\"gemalto_ca\"\r\n                        name=\"gemalto_ca\"\r\n                        label=\"CA\"\r\n                        value={gemaltoCACertificate?.cert || \"\"}\r\n                      />\r\n                    )}\r\n                  </fieldset>\r\n                </Grid>\r\n              </Fragment>\r\n            )}\r\n            <Grid item xs={12}>\r\n              <SectionTitle>Additional Configuration for KES</SectionTitle>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormSwitchWrapper\r\n                value=\"enableCustomCertsForKES\"\r\n                id=\"enableCustomCertsForKES\"\r\n                name=\"enableCustomCertsForKES\"\r\n                checked={enabledCustomCertificates}\r\n                onChange={() =>\r\n                  setEnabledCustomCertificates(!enabledCustomCertificates)\r\n                }\r\n                label={\"Custom Certificates\"}\r\n              />\r\n            </Grid>\r\n            {enabledCustomCertificates && (\r\n              <Fragment>\r\n                <Grid item xs={12}>\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      KES server TLS Certificates (optional)\r\n                    </legend>\r\n                    {serverTLSCertificateSecret ? (\r\n                      <TLSCertificate\r\n                        certificateInfo={serverTLSCertificateSecret}\r\n                        onDelete={() =>\r\n                          removeCertificate(serverTLSCertificateSecret)\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <Fragment>\r\n                        <FileSelector\r\n                          onChange={(encodedValue, fileName) => {\r\n                            setServerCertificate({\r\n                              encoded_key: encodedValue || \"\",\r\n                              id: serverCertificate?.id || \"\",\r\n                              key: fileName || \"\",\r\n                              cert: serverCertificate?.cert || \"\",\r\n                              encoded_cert:\r\n                                serverCertificate?.encoded_cert || \"\",\r\n                            });\r\n                            cleanValidation(\"serverKey\");\r\n                          }}\r\n                          accept=\".key,.pem\"\r\n                          id=\"serverKey\"\r\n                          name=\"serverKey\"\r\n                          label=\"Key\"\r\n                          value={serverCertificate?.key}\r\n                        />\r\n                        <FileSelector\r\n                          onChange={(encodedValue, fileName) => {\r\n                            setServerCertificate({\r\n                              encoded_key: serverCertificate?.encoded_key || \"\",\r\n                              id: serverCertificate?.id || \"\",\r\n                              key: serverCertificate?.key || \"\",\r\n                              cert: fileName || \"\",\r\n                              encoded_cert: encodedValue || \"\",\r\n                            });\r\n                            cleanValidation(\"serverCert\");\r\n                          }}\r\n                          accept=\".cer,.crt,.cert,.pem\"\r\n                          id=\"serverCert\"\r\n                          name=\"serverCert\"\r\n                          label=\"Cert\"\r\n                          value={serverCertificate?.cert}\r\n                        />\r\n                      </Fragment>\r\n                    )}\r\n                  </fieldset>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <fieldset className={classes.fieldGroup}>\r\n                    <legend className={classes.descriptionText}>\r\n                      Mutual TLS authentication with MinIO (optional)\r\n                    </legend>\r\n                    {mTLSCertificateSecret ? (\r\n                      <TLSCertificate\r\n                        certificateInfo={mTLSCertificateSecret}\r\n                        onDelete={() =>\r\n                          removeCertificate(mTLSCertificateSecret)\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <Fragment>\r\n                        <FileSelector\r\n                          onChange={(encodedValue, fileName) => {\r\n                            setMTLSCertificate({\r\n                              encoded_key: encodedValue || \"\",\r\n                              id: mTLSCertificate?.id || \"\",\r\n                              key: fileName || \"\",\r\n                              cert: mTLSCertificate?.cert || \"\",\r\n                              encoded_cert: mTLSCertificate?.encoded_cert || \"\",\r\n                            });\r\n                            cleanValidation(\"clientKey\");\r\n                          }}\r\n                          accept=\".key,.pem\"\r\n                          id=\"clientKey\"\r\n                          name=\"clientKey\"\r\n                          label=\"Key\"\r\n                          value={mTLSCertificate?.key}\r\n                        />\r\n                        <FileSelector\r\n                          onChange={(encodedValue, fileName) => {\r\n                            setMTLSCertificate({\r\n                              encoded_key: mTLSCertificate?.encoded_key || \"\",\r\n                              id: mTLSCertificate?.id || \"\",\r\n                              key: mTLSCertificate?.key || \"\",\r\n                              cert: fileName || \"\",\r\n                              encoded_cert: encodedValue || \"\",\r\n                            });\r\n                            cleanValidation(\"clientCert\");\r\n                          }}\r\n                          accept=\".cer,.crt,.cert,.pem\"\r\n                          id=\"clientCert\"\r\n                          name=\"clientCert\"\r\n                          label=\"Cert\"\r\n                          value={mTLSCertificate?.cert}\r\n                        />\r\n                      </Fragment>\r\n                    )}\r\n                  </fieldset>\r\n                </Grid>\r\n              </Fragment>\r\n            )}\r\n            <Grid item xs={12}>\r\n              <InputBoxWrapper\r\n                type=\"text\"\r\n                id=\"image\"\r\n                name=\"image\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                  setImage(e.target.value)\r\n                }\r\n                label=\"Image\"\r\n                placeholder=\"minio/kes:v0.17.6\"\r\n                value={image}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <InputBoxWrapper\r\n                type=\"number\"\r\n                min=\"1\"\r\n                id=\"replicas\"\r\n                name=\"replicas\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                  setReplicas(e.target.value)\r\n                }\r\n                label=\"Replicas\"\r\n                value={replicas}\r\n                required\r\n                error={validationErrors[\"replicas\"] || \"\"}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <SectionTitle>SecurityContext for KES</SectionTitle>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div\r\n                className={`${classes.multiContainer} ${classes.responsiveContainer}`}\r\n              >\r\n                <div\r\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\r\n                >\r\n                  <InputBoxWrapper\r\n                    type=\"number\"\r\n                    id=\"kes_securityContext_runAsUser\"\r\n                    name=\"kes_securityContext_runAsUser\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                      setSecurityContext({\r\n                        ...securityContext,\r\n                        runAsUser: e.target.value,\r\n                      });\r\n                    }}\r\n                    label=\"Run As User\"\r\n                    value={securityContext.runAsUser}\r\n                    required\r\n                    error={\r\n                      validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\r\n                    }\r\n                    min=\"0\"\r\n                  />\r\n                </div>\r\n                <div\r\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\r\n                >\r\n                  <InputBoxWrapper\r\n                    type=\"number\"\r\n                    id=\"kes_securityContext_runAsGroup\"\r\n                    name=\"kes_securityContext_runAsGroup\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                      setSecurityContext({\r\n                        ...securityContext,\r\n                        runAsGroup: e.target.value,\r\n                      });\r\n                    }}\r\n                    label=\"Run As Group\"\r\n                    value={securityContext.runAsGroup}\r\n                    required\r\n                    error={\r\n                      validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\r\n                    }\r\n                    min=\"0\"\r\n                  />\r\n                </div>\r\n                <div\r\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\r\n                >\r\n                  <InputBoxWrapper\r\n                    type=\"number\"\r\n                    id=\"kes_securityContext_fsGroup\"\r\n                    name=\"kes_securityContext_fsGroup\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                      setSecurityContext({\r\n                        ...securityContext,\r\n                        fsGroup: e.target.value,\r\n                      });\r\n                    }}\r\n                    label=\"FsGroup\"\r\n                    value={securityContext.fsGroup}\r\n                    required\r\n                    error={\r\n                      validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\r\n                    }\r\n                    min=\"0\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormSwitchWrapper\r\n                value=\"kesSecurityContextRunAsNonRoot\"\r\n                id=\"kes_securityContext_runAsNonRoot\"\r\n                name=\"kes_securityContext_runAsNonRoot\"\r\n                checked={securityContext.runAsNonRoot}\r\n                onChange={(e) => {\r\n                  const targetD = e.target;\r\n                  const checked = targetD.checked;\r\n                  setSecurityContext({\r\n                    ...securityContext,\r\n                    runAsNonRoot: checked,\r\n                  });\r\n                }}\r\n                label={\"Do not run as Root\"}\r\n              />\r\n            </Grid>\r\n          </Fragment>\r\n        )}\r\n        <Grid item xs={12} textAlign={\"right\"}>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={!isFormValid}\r\n            onClick={() => setConfirmOpen(true)}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(TenantEncryption);\r\n","import React from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Theme } from \"@mui/material/styles\";\r\n\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    errorBlock: {\r\n      color: theme.palette?.error.main || \"#C83B51\",\r\n    },\r\n  });\r\n\r\ninterface IErrorBlockProps {\r\n  classes: any;\r\n  errorMessage: string;\r\n  withBreak?: boolean;\r\n}\r\n\r\nconst ErrorBlock = ({\r\n  classes,\r\n  errorMessage,\r\n  withBreak = true,\r\n}: IErrorBlockProps) => {\r\n  return (\r\n    <React.Fragment>\r\n      {withBreak && <br />}\r\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\r\n        {errorMessage}\r\n      </Typography>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ErrorBlock);\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'RemoveRedEye');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"\n}), 'VisibilityOff');\n\nexports.default = _default;"],"names":["props","xmlns","className","fill","viewBox","id","d","transform","clipPath","withStyles","theme","createStyles","fieldBasic","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","inputLabel","fontWeight","textBoxContainer","border","paddingLeft","label","classes","onChange","name","disabled","tooltip","required","error","accept","value","useState","showFileSelector","setShowSelector","Grid","item","xs","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","title","placement","HelpIcon","type","e","fileName","get","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","color","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","certificateIcon","float","paddingTop","paddingRight","certificateInfo","certificateWrapper","height","userSelect","borderRadius","padding","certificateExpiry","display","alignItems","flexWrap","marginBottom","certificateDomains","certificatesList","textTransform","overflowY","maxHeight","certificatesListItem","borderBottom","minWidth","fontSize","marginRight","opacity","onDelete","certificates","domains","variant","gutterBottom","format","expiry","map","dom","primary","tenantDetailsStyles","spacingUtils","bold","italic","fontStyle","fileItem","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","encryptionEnabled","setEncryptionEnabled","encryptionType","setEncryptionType","replicas","setReplicas","image","setImage","refreshEncryptionInfo","setRefreshEncryptionInfo","fsGroup","fsGroupChangePolicy","runAsGroup","runAsNonRoot","runAsUser","securityContext","setSecurityContext","vaultConfiguration","setVaultConfiguration","awsConfiguration","setAWSConfiguration","gemaltoConfiguration","setGemaltoConfiguration","azureConfiguration","setAzureConfiguration","gcpConfiguration","setGCPConfiguration","enabledCustomCertificates","setEnabledCustomCertificates","updatingEncryption","setUpdatingEncryption","serverTLSCertificateSecret","setServerTLSCertificateSecret","mTLSCertificateSecret","setMTLSCertificateSecret","mTLSCertificate","setMTLSCertificate","certificatesToBeRemoved","setCertificatesToBeRemoved","showVaultAppRoleID","setShowVaultAppRoleID","isFormValid","setIsFormValid","showVaultAppRoleSecret","setShowVaultAppRoleSecret","vaultClientCertificateSecret","setVaultClientCertificateSecret","vaultCACertificateSecret","setVaultCACertificateSecret","vaultClientCertificate","setVaultClientCertificate","serverCertificate","setServerCertificate","vaultCACertificate","setVaultCACertificate","gemaltoCACertificateSecret","setGemaltoCACertificateSecret","gemaltoCACertificate","setGemaltotCACertificate","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","fieldKey","customValidation","parseInt","customValidationMessage","encoded_key","encoded_cert","endpoint","approle","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","Object","keys","fetchEncryptionInfo","api","namespace","then","resp","vault","tls","crt","ca","aws","gemalto","gcp","azure","server","mtls_client","catch","err","console","removeCertificate","isOpen","confirmText","cancelText","onClose","onConfirm","insertEncrypt","gemaltoCAIntroduce","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","key","vaultTLS","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","client","dataSend","secretsToBeDeleted","setErrorSnackMessage","confirmationContent","container","sectionTitle","justifyContent","textAlign","indicatorLabels","checked","description","hrClass","Fragment","encryptionTypeOptions","currentSelection","selectorOptions","overlayIcon","overlayAction","min","fieldGroup","descriptionText","encodedValue","cert","style","placeholder","multiContainer","responsiveContainer","formFieldRow","rightSpacer","errorBlock","palette","main","withBreak","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx"],"sourceRoot":""}