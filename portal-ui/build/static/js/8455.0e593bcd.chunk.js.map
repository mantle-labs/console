{"version":3,"file":"static/js/8455.0e593bcd.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EditAccessRule.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport { Button, Grid } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalStyleUtils,\n  spacingUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\n\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { AddAccessRuleIcon } from \"../../../../icons\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { useTranslation } from 'react-i18next';\n\ninterface IEditAccessRule {\n  classes: any;\n  modalOpen: boolean;\n  onClose: () => any;\n  bucket: string;\n  toEdit: string;\n  initial: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...spacingUtils,\n  });\n\nconst EditAccessRule = ({\n  modalOpen,\n  onClose,\n  classes,\n  bucket,\n  toEdit,\n  initial,\n}: IEditAccessRule) => {\n  const dispatch = useAppDispatch();\n  const [selectedAccess, setSelectedAccess] = useState<any>(initial);\n\n  const { t } = useTranslation();\n\n  const accessOptions = [\n    { label: t(\"readonly\"), value: \"readonly\" },\n    { label: t(\"writeonly\"), value: \"writeonly\" },\n    { label: t(\"readwrite\"), value: \"readwrite\" },\n  ];\n\n  const resetForm = () => {\n    setSelectedAccess(initial);\n  };\n\n  const createProcess = () => {\n    api\n      .invoke(\"PUT\", `/api/v1/bucket/${bucket}/access-rules`, {\n        prefix: toEdit,\n        access: selectedAccess,\n      })\n      .then((res: any) => {\n        onClose();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        onClose();\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title={t(\"edit_access_rule\")+` ${`${bucket}/${toEdit || \"\"}`}`}\n        onClose={onClose}\n        titleIcon={<AddAccessRuleIcon />}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.spacerTop}>\n            <SelectWrapper\n              id=\"access\"\n              name=\"Access\"\n              onChange={(e) => {\n                setSelectedAccess(e.target.value);\n              }}\n              label={t(\"access\")}\n              value={selectedAccess}\n              options={accessOptions}\n              disabled={false}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={resetForm}\n            >\n              {t(\"clear\")}\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={createProcess}\n            >\n              {t(\"save\")}\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(EditAccessRule);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title} style={{zIndex: 1}}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n"],"names":["withStyles","theme","createStyles","modalStyleUtils","spacingUtils","modalOpen","onClose","classes","bucket","toEdit","initial","dispatch","useAppDispatch","useState","selectedAccess","setSelectedAccess","t","useTranslation","accessOptions","label","value","title","titleIcon","container","item","xs","className","spacerTop","id","name","onChange","e","target","options","disabled","modalButtonBar","type","color","variant","onClick","api","prefix","access","then","res","catch","err","setErrorSnackMessage","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","style","zIndex","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}