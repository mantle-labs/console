{"version":3,"file":"static/js/343.22fd6963.chunk.js","mappings":"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","sources":["screens/Console/Account/ChangePasswordModal.tsx","screens/Console/Account/Account.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport { Button, LinearProgress } from \"@mui/material\";\r\nimport {\r\n  containerForHeader,\r\n  formFieldStyles,\r\n  modalStyleUtils,\r\n  spacingUtils,\r\n} from \"../Common/FormComponents/common/styleLibrary\";\r\nimport { ChangePasswordRequest } from \"../Buckets/types\";\r\nimport { ErrorResponseHandler } from \"../../../common/types\";\r\nimport api from \"../../../common/api\";\r\nimport { ChangePasswordIcon } from \"../../../icons\";\r\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../store\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...modalStyleUtils,\r\n    ...formFieldStyles,\r\n    ...spacingUtils,\r\n    ...containerForHeader(theme.spacing(4)),\r\n  });\r\n\r\ninterface IChangePasswordProps {\r\n  classes: any;\r\n  open: boolean;\r\n  closeModal: () => void;\r\n}\r\n\r\nconst ChangePassword = ({\r\n  classes,\r\n  open,\r\n  closeModal,\r\n}: IChangePasswordProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const [currentPassword, setCurrentPassword] = useState<string>(\"\");\r\n  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n  const [reNewPassword, setReNewPassword] = useState<string>(\"\");\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [showPassword, setShowPassword] = useState<boolean>(false);\r\n\r\n  const userLoggedIn = localStorage.getItem(\"userLoggedIn\") || \"\";\r\n\r\n  const changePassword = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (newPassword !== reNewPassword) {\r\n      dispatch(\r\n        setModalErrorSnackMessage({\r\n          errorMessage: t(\"new_password_dont_match\"),\r\n          detailedError: \"\",\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (newPassword.length < 8) {\r\n      dispatch(\r\n        setModalErrorSnackMessage({\r\n          errorMessage: t(\"password_not_long_enough\"),\r\n          detailedError: \"\",\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (loading) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n\r\n    let request: ChangePasswordRequest = {\r\n      current_secret_key: currentPassword,\r\n      new_secret_key: newPassword,\r\n    };\r\n\r\n    api\r\n      .invoke(\"POST\", \"/api/v1/account/change-password\", request)\r\n      .then(() => {\r\n        setLoading(false);\r\n        setNewPassword(\"\");\r\n        setReNewPassword(\"\");\r\n        setCurrentPassword(\"\");\r\n        closeModal();\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        setLoading(false);\r\n        setNewPassword(\"\");\r\n        setReNewPassword(\"\");\r\n        setCurrentPassword(\"\");\r\n        dispatch(setModalErrorSnackMessage(err));\r\n      });\r\n  };\r\n\r\n  return open ? (\r\n    <ModalWrapper\r\n      title={`Change Password for ${userLoggedIn}`}\r\n      modalOpen={open}\r\n      onClose={() => {\r\n        setNewPassword(\"\");\r\n        setReNewPassword(\"\");\r\n        setCurrentPassword(\"\");\r\n        closeModal();\r\n      }}\r\n      titleIcon={<ChangePasswordIcon />}\r\n    >\r\n      <div>\r\n      {t(\"new_password_write_down\")}\r\n      </div>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\r\n          changePassword(e);\r\n        }}\r\n      >\r\n        <Grid container>\r\n          <Grid item xs={12} className={classes.modalFormScrollable}>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"current-password\"\r\n                name=\"current-password\"\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setCurrentPassword(event.target.value);\r\n                }}\r\n                label={t(\"current_password\")}\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                value={currentPassword}\r\n                overlayAction={() => setShowPassword(!showPassword)}\r\n                overlayIcon={\r\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"new-password\"\r\n                name=\"new-password\"\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setNewPassword(event.target.value);\r\n                }}\r\n                label={t(\"new_password\")}\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                value={newPassword}\r\n                overlayAction={() => setShowPassword(!showPassword)}\r\n                overlayIcon={\r\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"re-new-password\"\r\n                name=\"re-new-password\"\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setReNewPassword(event.target.value);\r\n                }}\r\n                label={t('type_new_password_again')}\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                value={reNewPassword}\r\n                overlayAction={() => setShowPassword(!showPassword)}\r\n                overlayIcon={\r\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.modalButtonBar}>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={\r\n                loading ||\r\n                !(\r\n                  currentPassword.length > 0 &&\r\n                  newPassword.length > 0 &&\r\n                  reNewPassword.length > 0\r\n                )\r\n              }\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n          {loading && (\r\n            <Grid item xs={12}>\r\n              <LinearProgress />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </form>\r\n    </ModalWrapper>\r\n  ) : null;\r\n};\r\n\r\nexport default withStyles(styles)(ChangePassword);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport api from \"../../../common/api\";\r\nimport { Box } from \"@mui/material\";\r\n\r\nimport {\r\n  AccountIcon,\r\n  AddIcon,\r\n  DeleteIcon,\r\n  PasswordKeyIcon,\r\n} from \"../../../icons\";\r\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\r\nimport { stringSort } from \"../../../utils/sortFunctions\";\r\nimport PageHeader from \"../Common/PageHeader/PageHeader\";\r\nimport {\r\n  actionsTray,\r\n  containerForHeader,\r\n  searchField,\r\n  tableStyles,\r\n} from \"../Common/FormComponents/common/styleLibrary\";\r\n\r\nimport { ErrorResponseHandler } from \"../../../common/types\";\r\nimport ChangePasswordModal from \"./ChangePasswordModal\";\r\nimport HelpBox from \"../../../common/HelpBox\";\r\nimport PageLayout from \"../Common/Layout/PageLayout\";\r\nimport SearchBox from \"../Common/SearchBox\";\r\nimport withSuspense from \"../Common/Components/withSuspense\";\r\nimport {\r\n  CONSOLE_UI_RESOURCE,\r\n  IAM_PAGES,\r\n  IAM_SCOPES,\r\n} from \"../../../common/SecureComponent/permissions\";\r\nimport { SecureComponent } from \"../../../common/SecureComponent\";\r\nimport RBIconButton from \"../Buckets/BucketDetails/SummaryItems/RBIconButton\";\r\nimport { selectSAs } from \"../Configurations/utils\";\r\nimport DeleteMultipleServiceAccounts from \"../Users/DeleteMultipleServiceAccounts\";\r\nimport ServiceAccountPolicy from \"./ServiceAccountPolicy\";\r\nimport { setErrorSnackMessage, setSnackBarMessage } from \"../../../systemSlice\";\r\nimport makeStyles from \"@mui/styles/makeStyles\";\r\nimport { selFeatures } from \"../consoleSlice\";\r\nimport { useAppDispatch } from \"../../../store\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst DeleteServiceAccount = withSuspense(\r\n  React.lazy(() => import(\"./DeleteServiceAccount\"))\r\n);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    ...actionsTray,\r\n    ...searchField,\r\n    searchField: {\r\n      ...searchField.searchField,\r\n      marginRight: \"auto\",\r\n      maxWidth: 380,\r\n    },\r\n    ...tableStyles,\r\n    ...containerForHeader(theme.spacing(4)),\r\n  })\r\n);\r\n\r\nconst Account = () => {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { t } = useTranslation();\r\n\r\n  const classes = useStyles();\r\n  const features = useSelector(selFeatures);\r\n\r\n  const [records, setRecords] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\r\n  const [selectedServiceAccount, setSelectedServiceAccount] = useState<\r\n    string | null\r\n  >(null);\r\n  const [changePasswordModalOpen, setChangePasswordModalOpen] =\r\n    useState<boolean>(false);\r\n  const [selectedSAs, setSelectedSAs] = useState<string[]>([]);\r\n  const [deleteMultipleOpen, setDeleteMultipleOpen] = useState<boolean>(false);\r\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\r\n\r\n  const userIDP = (features && features.includes(\"external-idp\")) || false;\r\n\r\n  useEffect(() => {\r\n    fetchRecords();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      api\r\n        .invoke(\"GET\", `/api/v1/service-accounts`)\r\n        .then((res: string[]) => {\r\n          const serviceAccounts = res.sort(stringSort);\r\n\r\n          setLoading(false);\r\n          setRecords(serviceAccounts);\r\n        })\r\n        .catch((err: ErrorResponseHandler) => {\r\n          dispatch(setErrorSnackMessage(err));\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [loading, setLoading, setRecords, dispatch]);\r\n\r\n  const fetchRecords = () => {\r\n    setLoading(true);\r\n  };\r\n\r\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\r\n    setDeleteOpen(false);\r\n\r\n    if (refresh) {\r\n      fetchRecords();\r\n    }\r\n  };\r\n\r\n  const closeDeleteMultipleModalAndRefresh = (refresh: boolean) => {\r\n    setDeleteMultipleOpen(false);\r\n    if (refresh) {\r\n      dispatch(setSnackBarMessage(t(\"delete_service_account_successful\")));\r\n      setSelectedSAs([]);\r\n      setLoading(true);\r\n    }\r\n  };\r\n\r\n  const policyModalOpen = (selectedServiceAccount: string) => {\r\n    setSelectedServiceAccount(selectedServiceAccount);\r\n    setPolicyOpen(true);\r\n  };\r\n\r\n  const selectAllItems = () => {\r\n    if (selectedSAs.length === records.length) {\r\n      setSelectedSAs([]);\r\n      return;\r\n    }\r\n    setSelectedSAs(records);\r\n  };\r\n\r\n  const closePolicyModal = () => {\r\n    setPolicyOpen(false);\r\n    setLoading(true);\r\n  };\r\n\r\n  const confirmDeleteServiceAccount = (selectedServiceAccount: string) => {\r\n    setSelectedServiceAccount(selectedServiceAccount);\r\n    setDeleteOpen(true);\r\n  };\r\n\r\n  const tableActions = [\r\n    { type: \"view\", onClick: policyModalOpen },\r\n    { type: \"delete\", onClick: confirmDeleteServiceAccount },\r\n  ];\r\n\r\n  const filteredRecords = records.filter((elementItem) =>\r\n    elementItem.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {deleteOpen && (\r\n        <DeleteServiceAccount\r\n          deleteOpen={deleteOpen}\r\n          selectedServiceAccount={selectedServiceAccount}\r\n          closeDeleteModalAndRefresh={(refresh: boolean) => {\r\n            closeDeleteModalAndRefresh(refresh);\r\n          }}\r\n        />\r\n      )}\r\n      {deleteMultipleOpen && (\r\n        <DeleteMultipleServiceAccounts\r\n          deleteOpen={deleteMultipleOpen}\r\n          selectedSAs={selectedSAs}\r\n          closeDeleteModalAndRefresh={closeDeleteMultipleModalAndRefresh}\r\n        />\r\n      )}\r\n\r\n      {policyOpen && (\r\n        <ServiceAccountPolicy\r\n          open={policyOpen}\r\n          selectedAccessKey={selectedServiceAccount}\r\n          closeModalAndRefresh={closePolicyModal}\r\n        />\r\n      )}\r\n      <ChangePasswordModal\r\n        open={changePasswordModalOpen}\r\n        closeModal={() => setChangePasswordModalOpen(false)}\r\n      />\r\n      <PageHeader label={t(\"service_accounts\")} />\r\n      <PageLayout>\r\n        <Grid item={true} xs={12} className={classes.actionsTray}>\r\n          <SearchBox\r\n            placeholder={t(\"search_service_accounts\")}\r\n            onChange={setFilter}\r\n            overrideClass={classes.searchField}\r\n            value={filter}\r\n          />\r\n\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n            }}\r\n          >\r\n            {\" \"}\r\n            <RBIconButton\r\n              tooltip={t(\"delete_selected\")}\r\n              onClick={() => {\r\n                setDeleteMultipleOpen(true);\r\n              }}\r\n              text={t(\"delete_selected\")}\r\n              icon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              disabled={selectedSAs.length === 0}\r\n              variant={\"outlined\"}\r\n            />\r\n            <SecureComponent\r\n              scopes={[IAM_SCOPES.ADMIN_CREATE_USER]}\r\n              resource={CONSOLE_UI_RESOURCE}\r\n              matchAll\r\n              errorProps={{ disabled: true }}\r\n            >\r\n              <RBIconButton\r\n                onClick={() => setChangePasswordModalOpen(true)}\r\n                text={t(\"change_password\")}\r\n                icon={<PasswordKeyIcon />}\r\n                color={\"primary\"}\r\n                variant={\"outlined\"}\r\n                disabled={userIDP}\r\n              />\r\n            </SecureComponent>\r\n            <RBIconButton\r\n              onClick={(e) => {\r\n                navigate(`${IAM_PAGES.ACCOUNT_ADD}`);\r\n              }}\r\n              text={t('create_service_account')}\r\n              icon={<AddIcon />}\r\n              color={\"primary\"}\r\n              variant={\"contained\"}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.tableBlock}>\r\n          <TableWrapper\r\n            isLoading={loading}\r\n            records={filteredRecords}\r\n            entityName={t(\"service_account\")}\r\n            idField={\"\"}\r\n            columns={[{ label: t(\"service_account\"), elementKey: \"\" }]}\r\n            itemActions={tableActions}\r\n            selectedItems={selectedSAs}\r\n            onSelect={(e) => selectSAs(e, setSelectedSAs, selectedSAs)}\r\n            onSelectAll={selectAllItems}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} marginTop={\"15px\"}>\r\n          <HelpBox\r\n            title={t(\"service_accounts_learn_more\")}\r\n            iconComponent={<AccountIcon />}\r\n            help={\r\n              <Fragment>\r\n                {t(\"service_accounts_info\")}\r\n                <br />\r\n              </Fragment>\r\n            }\r\n          />\r\n        </Grid>\r\n      </PageLayout>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n"],"names":["withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","spacingUtils","containerForHeader","spacing","classes","open","closeModal","dispatch","useAppDispatch","t","useTranslation","useState","currentPassword","setCurrentPassword","newPassword","setNewPassword","reNewPassword","setReNewPassword","loading","setLoading","showPassword","setShowPassword","userLoggedIn","localStorage","getItem","ModalWrapper","title","modalOpen","onClose","titleIcon","noValidate","autoComplete","onSubmit","e","event","preventDefault","length","setModalErrorSnackMessage","errorMessage","detailedError","request","current_secret_key","new_secret_key","api","then","catch","err","changePassword","Grid","container","item","xs","className","modalFormScrollable","formFieldRow","InputBoxWrapper","id","name","onChange","target","value","label","type","overlayAction","overlayIcon","VisibilityOff","RemoveRedEye","modalButtonBar","Button","variant","color","disabled","LinearProgress","DeleteServiceAccount","withSuspense","React","useStyles","makeStyles","actionsTray","searchField","marginRight","maxWidth","tableStyles","navigate","useNavigate","features","useSelector","selFeatures","records","setRecords","filter","setFilter","deleteOpen","setDeleteOpen","selectedServiceAccount","setSelectedServiceAccount","changePasswordModalOpen","setChangePasswordModalOpen","selectedSAs","setSelectedSAs","deleteMultipleOpen","setDeleteMultipleOpen","policyOpen","setPolicyOpen","userIDP","includes","useEffect","fetchRecords","res","serviceAccounts","sort","stringSort","setErrorSnackMessage","tableActions","onClick","filteredRecords","elementItem","toLowerCase","closeDeleteModalAndRefresh","refresh","DeleteMultipleServiceAccounts","setSnackBarMessage","ServiceAccountPolicy","selectedAccessKey","closeModalAndRefresh","ChangePasswordModal","PageHeader","PageLayout","SearchBox","placeholder","overrideClass","Box","sx","display","RBIconButton","tooltip","text","icon","SecureComponent","scopes","IAM_SCOPES","resource","CONSOLE_UI_RESOURCE","matchAll","errorProps","IAM_PAGES","tableBlock","TableWrapper","isLoading","entityName","idField","columns","elementKey","itemActions","selectedItems","onSelect","selectSAs","onSelectAll","marginTop","HelpBox","iconComponent","help","Fragment"],"sourceRoot":""}