{"version":3,"file":"static/js/247.dc3a0059.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddBucketTagModal.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport { Button, Grid } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  formFieldStyles,\r\n  modalStyleUtils,\r\n  spacingUtils,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\nimport { ErrorResponseHandler } from \"../../../../common/types\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\r\nimport api from \"../../../../common/api\";\r\nimport { AddNewTagIcon } from \"../../../../icons\";\r\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../../store\";\r\n\r\ninterface IBucketTagModal {\r\n  modalOpen: boolean;\r\n  currentTags: any;\r\n  bucketName: string;\r\n  onCloseAndUpdate: (refresh: boolean) => void;\r\n\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...formFieldStyles,\r\n    ...modalStyleUtils,\r\n    ...spacingUtils,\r\n  });\r\n\r\nconst AddBucketTagModal = ({\r\n  modalOpen,\r\n  currentTags,\r\n  onCloseAndUpdate,\r\n  bucketName,\r\n\r\n  classes,\r\n}: IBucketTagModal) => {\r\n  const dispatch = useAppDispatch();\r\n  const [newKey, setNewKey] = useState<string>(\"\");\r\n  const [newLabel, setNewLabel] = useState<string>(\"\");\r\n  const [isSending, setIsSending] = useState<boolean>(false);\r\n\r\n  const resetForm = () => {\r\n    setNewLabel(\"\");\r\n    setNewKey(\"\");\r\n  };\r\n\r\n  const addTagProcess = () => {\r\n    setIsSending(true);\r\n    const newTag: any = {};\r\n\r\n    newTag[newKey] = newLabel;\r\n    const newTagList = { ...currentTags, ...newTag };\r\n\r\n    api\r\n      .invoke(\"PUT\", `/api/v1/buckets/${bucketName}/tags`, {\r\n        tags: newTagList,\r\n      })\r\n      .then((res: any) => {\r\n        setIsSending(false);\r\n        onCloseAndUpdate(true);\r\n      })\r\n      .catch((error: ErrorResponseHandler) => {\r\n        dispatch(setModalErrorSnackMessage(error));\r\n        setIsSending(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ModalWrapper\r\n      modalOpen={modalOpen}\r\n      title={`Add New Tag `}\r\n      onClose={() => {\r\n        onCloseAndUpdate(false);\r\n      }}\r\n      titleIcon={<AddNewTagIcon />}\r\n    >\r\n      <Grid container>\r\n        <div className={classes.spacerBottom}>\r\n          <strong>Bucket</strong>: {bucketName}\r\n        </div>\r\n        <Grid item xs={12} className={classes.formFieldRow}>\r\n          <InputBoxWrapper\r\n            value={newKey}\r\n            label={\"New Tag Key\"}\r\n            id={\"newTagKey\"}\r\n            name={\"newTagKey\"}\r\n            placeholder={\"Enter New Tag Key\"}\r\n            onChange={(e: any) => {\r\n              setNewKey(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.formFieldRow}>\r\n          <InputBoxWrapper\r\n            value={newLabel}\r\n            label={\"New Tag Label\"}\r\n            id={\"newTagLabel\"}\r\n            name={\"newTagLabel\"}\r\n            placeholder={\"Enter New Tag Label\"}\r\n            onChange={(e: any) => {\r\n              setNewLabel(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.modalButtonBar}>\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={resetForm}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={\r\n              newLabel.trim() === \"\" || newKey.trim() === \"\" || isSending\r\n            }\r\n            onClick={addTagProcess}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(AddBucketTagModal);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  deleteDialogStyles,\r\n  snackBarCommon,\r\n} from \"../FormComponents/common/styleLibrary\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport MainError from \"../MainError/MainError\";\r\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\r\n\r\ninterface IModalProps {\r\n  classes: any;\r\n  onClose: () => void;\r\n  modalOpen: boolean;\r\n  title: string | React.ReactNode;\r\n  children: any;\r\n  wideLimit?: boolean;\r\n  noContentPadding?: boolean;\r\n  titleIcon?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...deleteDialogStyles,\r\n    content: {\r\n      padding: 25,\r\n      paddingBottom: 0,\r\n    },\r\n    customDialogSize: {\r\n      width: \"100%\",\r\n      maxWidth: 765,\r\n    },\r\n    ...snackBarCommon,\r\n  });\r\n\r\nconst ModalWrapper = ({\r\n  onClose,\r\n  modalOpen,\r\n  title,\r\n  children,\r\n  classes,\r\n  wideLimit = true,\r\n  noContentPadding,\r\n  titleIcon = null,\r\n}: IModalProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n\r\n  const modalSnackMessage = useSelector(\r\n    (state: AppState) => state.system.modalSnackBar\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (modalSnackMessage) {\r\n      if (modalSnackMessage.message === \"\") {\r\n        setOpenSnackbar(false);\r\n        return;\r\n      }\r\n      // Open SnackBar\r\n      if (modalSnackMessage.type !== \"error\") {\r\n        setOpenSnackbar(true);\r\n      }\r\n    }\r\n  }, [modalSnackMessage]);\r\n\r\n  const closeSnackBar = () => {\r\n    setOpenSnackbar(false);\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  };\r\n\r\n  const customSize = wideLimit\r\n    ? {\r\n        classes: {\r\n          paper: classes.customDialogSize,\r\n        },\r\n      }\r\n    : { maxWidth: \"lg\" as const, fullWidth: true };\r\n\r\n  let message = \"\";\r\n\r\n  if (modalSnackMessage) {\r\n    message = modalSnackMessage.detailedErrorMsg;\r\n    if (\r\n      modalSnackMessage.detailedErrorMsg === \"\" ||\r\n      modalSnackMessage.detailedErrorMsg.length < 5\r\n    ) {\r\n      message = modalSnackMessage.message;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={modalOpen}\r\n      classes={classes}\r\n      {...customSize}\r\n      scroll={\"paper\"}\r\n      onClose={(event, reason) => {\r\n        if (reason !== \"backdropClick\") {\r\n          onClose(); // close on Esc but not on click outside\r\n        }\r\n      }}\r\n      className={classes.root}\r\n    >\r\n      <DialogTitle className={classes.title}>\r\n        <div className={classes.titleText}>\r\n          {titleIcon} {title}\r\n        </div>\r\n        <div className={classes.closeContainer}>\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            id={\"close\"}\r\n            className={classes.closeButton}\r\n            onClick={onClose}\r\n            disableRipple\r\n            size=\"small\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <MainError isModal={true} />\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        className={classes.snackBarModal}\r\n        onClose={() => {\r\n          closeSnackBar();\r\n        }}\r\n        message={message}\r\n        ContentProps={{\r\n          className: `${classes.snackBar} ${\r\n            modalSnackMessage && modalSnackMessage.type === \"error\"\r\n              ? classes.errorSnackBar\r\n              : \"\"\r\n          }`,\r\n        }}\r\n        autoHideDuration={\r\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\r\n        }\r\n      />\r\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ModalWrapper);\r\n"],"names":["withStyles","theme","createStyles","formFieldStyles","modalStyleUtils","spacingUtils","modalOpen","currentTags","onCloseAndUpdate","bucketName","classes","dispatch","useAppDispatch","useState","newKey","setNewKey","newLabel","setNewLabel","isSending","setIsSending","title","onClose","titleIcon","container","className","spacerBottom","item","xs","formFieldRow","value","label","id","name","placeholder","onChange","e","target","modalButtonBar","type","variant","color","onClick","disabled","trim","newTag","newTagList","api","tags","then","res","catch","error","setModalErrorSnackMessage","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}