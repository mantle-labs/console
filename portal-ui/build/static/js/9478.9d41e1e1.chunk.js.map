{"version":3,"file":"static/js/9478.9d41e1e1.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper.tsx","screens/Console/Common/FormComponents/CSVMultiSelector/CSVMultiSelector.tsx","screens/Console/NotificationEndpoints/ConfTargetGeneric.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Grid, InputLabel, TextField, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface CommentBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: 14,\n      margin: 0,\n      alignItems: \"flex-start\",\n      paddingTop: \"20px\",\n      flexWrap: \"wrap\",\n      display: \"flex\",\n    },\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    cssOutlinedInput: {\n      borderColor: \"#EAEAEA\",\n      padding: 16,\n    },\n    rootContainer: {\n      \"& .MuiOutlinedInput-inputMultiline\": {\n        ...fieldBasic.inputLabel,\n        fontSize: 13,\n        minHeight: 150,\n      },\n      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"#07193E\",\n        borderWidth: 1,\n      },\n      \"& textarea\": {\n        color: \"#07193E\",\n        fontSize: 13,\n        fontWeight: 600,\n        \"&:placeholder\": {\n          color: \"#858585\",\n          opacity: 1,\n          fontWeight: 400,\n        },\n      },\n    },\n  });\n\nconst CommentBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  classes,\n}: CommentBoxProps) => {\n  let inputProps: any = { \"data-index\": index };\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fieldContainer} ${\n          error !== \"\" ? classes.errorInField : \"\"\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <TextField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            multiline\n            rows={5}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            InputProps={{\n              classes: {\n                notchedOutline: classes.cssOutlinedInput,\n                root: classes.rootContainer,\n              },\n            }}\n            variant=\"outlined\"\n          />\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CommentBoxWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport { InputLabel, Tooltip } from \"@mui/material\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport InputBoxWrapper from \"../InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\n\ninterface ICSVMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  commonPlaceholder?: string;\n  classes: any;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst styles = (theme: Theme) => {\n  return createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputWithBorder: {\n      border: \"1px solid #EAEAEA\",\n      padding: 15,\n      height: 150,\n      overflowY: \"auto\",\n      position: \"relative\",\n      marginTop: 15,\n      flex: 1,\n    },\n    inputBoxSpacer: {\n      marginBottom: 7,\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      margin: 0,\n      alignItems: \"flex-start\",\n      paddingTop: \"20px\",\n      minWidth: 162,\n    },\n  });\n};\n\nconst CSVMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  commonPlaceholder = \"\",\n  onChange,\n  withBorder = false,\n  classes,\n}: ICSVMultiSelector) => {\n  const [currentElements, setCurrentElements] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentElements.length === 1 &&\n      currentElements[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\",\");\n      elementsSplit.push(\"\");\n\n      setCurrentElements(elementsSplit);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elements, currentElements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    if (currentElements.length > 1) {\n      const refScroll = bottomList.current;\n      if (refScroll) {\n        refScroll.scrollIntoView(false);\n      }\n    }\n  }, [currentElements, bottomList]);\n\n  const onChangeCallback = useCallback(\n    (newString: string) => {\n      onChange(newString);\n    },\n    [onChange]\n  );\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    const elementsString = currentElements\n      .filter((element) => element.trim() !== \"\")\n      .join(\",\");\n\n    onChangeCallback(elementsString);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElements]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = (elementsUp: string[]) => {\n    if (elementsUp[elementsUp.length - 1].trim() !== \"\") {\n      const cpList = [...elementsUp];\n      cpList.push(\"\");\n      setCurrentElements(cpList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeElement = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentElements];\n    const index = get(e.target, \"dataset.index\", 0);\n    updatedElement[index] = e.target.value;\n\n    setCurrentElements(updatedElement);\n  };\n\n  const inputs = currentElements.map((element, index) => {\n    return (\n      <div\n        className={classes.inputBoxSpacer}\n        key={`csv-multi-${name}-${index.toString()}`}\n      >\n        <InputBoxWrapper\n          id={`${name}-${index.toString()}`}\n          label={\"\"}\n          name={`${name}-${index.toString()}`}\n          value={currentElements[index]}\n          onChange={onChangeElement}\n          index={index}\n          key={`csv-${name}-${index.toString()}`}\n          placeholder={commonPlaceholder}\n          overlayIcon={\n            index === currentElements.length - 1 ? <AddIcon /> : null\n          }\n          overlayAction={() => {\n            addEmptyLine(currentElements);\n          }}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} className={classes.fieldContainer}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n        <Grid\n          item\n          xs={12}\n          className={`${withBorder ? classes.inputWithBorder : \"\"}`}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\nexport default withStyles(styles)(CSVMultiSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport { IElementValue, KVField } from \"../Configurations/types\";\nimport {\n  formFieldStyles,\n  modalBasic,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport CSVMultiSelector from \"../Common/FormComponents/CSVMultiSelector/CSVMultiSelector\";\nimport CommentBoxWrapper from \"../Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next'\n\ninterface IConfGenericProps {\n  onChange: (newValue: IElementValue[]) => void;\n  fields: KVField[];\n  defaultVals?: IElementValue[];\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    formFieldRow: {\n      ...formFieldStyles.formFieldRow,\n    },\n    ...modalBasic,\n  });\n\n// Function to get defined values,\n//we make this because the backed sometimes don't return all the keys when there is an initial configuration\nexport const valueDef = (\n  key: string,\n  type: string,\n  defaults: IElementValue[]\n) => {\n  let defValue = type === \"on|off\" ? \"off\" : \"\";\n\n  if (defaults.length > 0) {\n    const storedConfig = defaults.find((element) => element.key === key);\n\n    if (storedConfig) {\n      defValue = storedConfig.value || \"\";\n    }\n  }\n\n  return defValue;\n};\n\nconst ConfTargetGeneric = ({\n  onChange,\n  fields,\n  defaultVals,\n  classes,\n}: IConfGenericProps) => {\n  const { t } = useTranslation();\n\n  const [valueHolder, setValueHolder] = useState<IElementValue[]>([]);\n  const fieldsElements = !fields ? [] : fields;\n  const defValList = !defaultVals ? [] : defaultVals;\n\n  // Effect to create all the values to hold\n  useEffect(() => {\n    const values: IElementValue[] = fields.map((field) => {\n      const stateInsert: IElementValue = {\n        key: field.name,\n        value: valueDef(field.name, field.type, defValList),\n      };\n      return stateInsert;\n    });\n\n    setValueHolder(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fields, defaultVals]);\n\n  useEffect(() => {\n    onChange(valueHolder);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [valueHolder]);\n\n  const setValueElement = (key: string, value: string, index: number) => {\n    const valuesDup = [...valueHolder];\n    valuesDup[index] = { key, value };\n\n    setValueHolder(valuesDup);\n  };\n\n  const updateLanguage = (event: SelectChangeEvent) => {\n    i18next.changeLanguage(event.target.value)\n    window.location.reload();\n  };\n\n  const fieldDefinition = (field: KVField, item: number) => {\n    switch (field.type) {\n      case \"on|off\":\n        const value = valueHolder[item] ? valueHolder[item].value : \"off\";\n\n        return (\n          <FormSwitchWrapper\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              const value = e.target.checked ? \"on\" : \"off\";\n              setValueElement(field.name, value, item);\n            }}\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            value={\"switch_on\"}\n            tooltip={field.tooltip}\n            checked={value === \"on\"}\n          />\n        );\n      case \"csv\":\n        return (\n          <CSVMultiSelector\n            elements={valueHolder[item] ? valueHolder[item].value : \"\"}\n            label={field.label}\n            name={field.name}\n            onChange={(value: string) => {\n              setValueElement(field.name, value, item);\n            }}\n            tooltip={field.tooltip}\n            commonPlaceholder={field.placeholder}\n            withBorder={true}\n          />\n        );\n      case \"comment\":\n        return (\n          <CommentBoxWrapper\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={valueHolder[item] ? valueHolder[item].value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            placeholder={field.placeholder}\n          />\n        );\n        case \"dropdown\":\n        return (\n          <FormControl fullWidth>\n            <InputLabel>{t(\"languages\")}</InputLabel>\n            <Select\n              value={i18next.language}\n              label=\"language\"\n              onChange={updateLanguage}\n            >\n              <MenuItem value=\"en\">English</MenuItem>\n              <MenuItem value=\"fr\">Français</MenuItem>\n            </Select>\n          </FormControl>\n        );\n      default:\n        return (\n          <InputBoxWrapper\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={valueHolder[item] ? valueHolder[item].value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            multiline={!!field.multiline}\n            placeholder={field.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <Grid container>\n      <Grid xs={12} item className={classes.fieldBox}>\n        {fieldsElements.map((field, item) => (\n          <Grid item xs={12} key={field.name} className={classes.formFieldRow}>\n            {fieldDefinition(field, item)}\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(ConfTargetGeneric);\n"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","inputLabel","fontSize","margin","alignItems","paddingTop","flexWrap","display","textBoxContainer","flexGrow","position","cssOutlinedInput","borderColor","padding","rootContainer","minHeight","borderWidth","color","fontWeight","opacity","label","onChange","value","id","name","disabled","tooltip","index","error","required","placeholder","classes","inputProps","item","xs","className","fieldContainer","errorInField","htmlFor","tooltipContainer","title","placement","fullWidth","multiline","rows","helperText","InputLabelProps","shrink","InputProps","notchedOutline","root","variant","inputWithBorder","border","height","overflowY","marginTop","flex","inputBoxSpacer","marginBottom","minWidth","elements","commonPlaceholder","withBorder","useState","currentElements","setCurrentElements","bottomList","createRef","useEffect","length","elementsSplit","split","push","refScroll","current","scrollIntoView","onChangeCallback","useCallback","newString","firstUpdate","useRef","elementsString","filter","element","trim","join","onChangeElement","e","persist","updatedElement","get","target","inputs","map","InputBoxWrapper","toString","overlayIcon","AddIcon","overlayAction","elementsUp","cpList","addEmptyLine","Grid","InputLabel","Tooltip","HelpIcon","ref","valueDef","key","type","defaults","defValue","storedConfig","find","formFieldStyles","formFieldRow","modalBasic","fields","defaultVals","t","useTranslation","valueHolder","setValueHolder","fieldsElements","defValList","values","field","setValueElement","valuesDup","updateLanguage","event","i18next","window","location","reload","fieldDefinition","FormSwitchWrapper","checked","CommentBoxWrapper","FormControl","Select","MenuItem","container","fieldBox"],"sourceRoot":""}