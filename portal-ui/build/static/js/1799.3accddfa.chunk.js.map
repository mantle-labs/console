{"version":3,"file":"static/js/1799.3accddfa.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/DirectPV/FormatDrives.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { predefinedList } from \"../common/styleLibrary\";\r\n\r\ninterface IPredefinedList {\r\n  classes: any;\r\n  label?: string;\r\n  content: any;\r\n  multiLine?: boolean;\r\n  actionButton?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...predefinedList,\r\n  });\r\n\r\nconst PredefinedList = ({\r\n  classes,\r\n  label = \"\",\r\n  content,\r\n  multiLine = false,\r\n  actionButton,\r\n}: IPredefinedList) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid className={classes.prefinedContainer}>\r\n        {label !== \"\" && (\r\n          <Grid item xs={12} className={classes.predefinedTitle}>\r\n            {label}\r\n          </Grid>\r\n        )}\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          className={`${classes.predefinedList} ${\r\n            actionButton ? classes.includesActionButton : \"\"\r\n          }`}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            className={\r\n              multiLine ? classes.innerContentMultiline : classes.innerContent\r\n            }\r\n          >\r\n            {content}\r\n          </Grid>\r\n          {actionButton && (\r\n            <div className={classes.overlayShareOption}>{actionButton}</div>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(PredefinedList);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { DialogContentText, Grid, LinearProgress } from \"@mui/material\";\r\nimport { IDirectPVFormatResItem, IDirectPVFormatResult } from \"./types\";\r\nimport { ErrorResponseHandler } from \"../../../common/types\";\r\nimport api from \"../../../common/api\";\r\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\r\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\r\nimport { FormatDrivesIcon } from \"../../../icons\";\r\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../store\";\r\n\r\ninterface IFormatAllDrivesProps {\r\n  closeFormatModalAndRefresh: (\r\n    refresh: boolean,\r\n    formatIssuesList: IDirectPVFormatResItem[]\r\n  ) => void;\r\n  deleteOpen: boolean;\r\n  allDrives: boolean;\r\n  drivesToFormat: string[];\r\n}\r\n\r\nconst FormatDrives = ({\r\n  closeFormatModalAndRefresh,\r\n  deleteOpen,\r\n  allDrives,\r\n  drivesToFormat,\r\n}: IFormatAllDrivesProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\r\n  const [formatAll, setFormatAll] = useState<string>(\"\");\r\n  const [force, setForce] = useState<boolean>(false);\r\n\r\n  const removeRecord = () => {\r\n    if (deleteLoading) {\r\n      return;\r\n    }\r\n    setDeleteLoading(true);\r\n    api\r\n      .invoke(\"POST\", `/api/v1/directpv/drives/format`, {\r\n        drives: drivesToFormat,\r\n        force,\r\n      })\r\n      .then((res: IDirectPVFormatResult) => {\r\n        setDeleteLoading(false);\r\n        closeFormatModalAndRefresh(true, res.formatIssuesList);\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        setDeleteLoading(false);\r\n        dispatch(setErrorSnackMessage(err));\r\n      });\r\n  };\r\n  return (\r\n    <ConfirmDialog\r\n      title={`Format ${allDrives ? \"All \" : \"\"} Drives`}\r\n      confirmText={`Format Drive${\r\n        drivesToFormat.length > 1 || allDrives ? \"s\" : \"\"\r\n      }`}\r\n      confirmButtonProps={{\r\n        disabled: formatAll !== \"YES, PROCEED\",\r\n      }}\r\n      isOpen={deleteOpen}\r\n      isLoading={deleteLoading}\r\n      onConfirm={removeRecord}\r\n      onClose={() => {\r\n        closeFormatModalAndRefresh(false, []);\r\n      }}\r\n      titleIcon={<FormatDrivesIcon />}\r\n      confirmationContent={\r\n        <React.Fragment>\r\n          <DialogContentText>\r\n            {!allDrives && (\r\n              <Fragment>\r\n                <PredefinedList\r\n                  label={`Selected Drive${\r\n                    drivesToFormat.length > 1 ? \"s\" : \"\"\r\n                  }`}\r\n                  content={drivesToFormat.join(\", \")}\r\n                />\r\n                <br />\r\n              </Fragment>\r\n            )}\r\n            <Grid item xs={12}>\r\n              <FormSwitchWrapper\r\n                value=\"force\"\r\n                id=\"force\"\r\n                name=\"force\"\r\n                checked={force}\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setForce(event.target.checked);\r\n                }}\r\n                label={\"Force Format\"}\r\n                indicatorLabels={[\"Yes\", \"No\"]}\r\n              />\r\n            </Grid>\r\n            Are you sure you want to format{\" \"}\r\n            {allDrives ? <strong>All</strong> : \"the selected\"} drive\r\n            {drivesToFormat.length > 1 || allDrives ? \"s\" : \"\"}?.\r\n            <br />\r\n            <br />\r\n            <strong>\r\n              All information contained will be erased and cannot be recovered\r\n            </strong>\r\n            <br />\r\n            <br />\r\n            To continue please type <b>YES, PROCEED</b> in the box.\r\n            <Grid item xs={12}>\r\n              <InputBoxWrapper\r\n                id=\"format-confirm\"\r\n                name=\"format-confirm\"\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setFormatAll(event.target.value);\r\n                }}\r\n                label=\"\"\r\n                value={formatAll}\r\n              />\r\n            </Grid>\r\n          </DialogContentText>\r\n          {deleteLoading && <LinearProgress />}\r\n        </React.Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default FormatDrives;\r\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","actionButton","Fragment","className","prefinedContainer","item","xs","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","closeFormatModalAndRefresh","deleteOpen","allDrives","drivesToFormat","dispatch","useAppDispatch","useState","deleteLoading","setDeleteLoading","formatAll","setFormatAll","force","setForce","title","confirmText","length","confirmButtonProps","disabled","isOpen","isLoading","onConfirm","api","drives","then","res","formatIssuesList","catch","err","setErrorSnackMessage","onClose","titleIcon","confirmationContent","join","value","id","name","checked","onChange","event","target","indicatorLabels"],"sourceRoot":""}