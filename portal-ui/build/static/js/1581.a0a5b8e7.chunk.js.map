{"version":3,"file":"static/js/1581.a0a5b8e7.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EnableQuota.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, LinearProgress } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {\r\n  calculateBytes,\r\n  getBytes,\r\n  k8sScalarUnitsExcluding,\r\n} from \"../../../../common/utils\";\r\nimport { BucketQuota } from \"../types\";\r\n\r\nimport { ErrorResponseHandler } from \"../../../../common/types\";\r\nimport {\r\n  formFieldStyles,\r\n  modalStyleUtils,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\r\nimport api from \"../../../../common/api\";\r\nimport { BucketQuotaIcon } from \"../../../../icons\";\r\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\r\n\r\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../../store\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...formFieldStyles,\r\n    ...modalStyleUtils,\r\n  });\r\n\r\ninterface IEnableQuotaProps {\r\n  classes: any;\r\n  open: boolean;\r\n  enabled: boolean;\r\n  cfg: BucketQuota | null;\r\n  selectedBucket: string;\r\n  closeModalAndRefresh: () => void;\r\n}\r\n\r\nconst EnableQuota = ({\r\n  classes,\r\n  open,\r\n  enabled,\r\n  cfg,\r\n  selectedBucket,\r\n  closeModalAndRefresh,\r\n}: IEnableQuotaProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [quotaEnabled, setQuotaEnabled] = useState<boolean>(false);\r\n  const [quotaSize, setQuotaSize] = useState<string>(\"1\");\r\n  const [quotaUnit, setQuotaUnit] = useState<string>(\"Ti\");\r\n  const [validInput, setValidInput] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (enabled) {\r\n      setQuotaEnabled(true);\r\n      if (cfg) {\r\n        const unitCalc = calculateBytes(cfg.quota, true, false, true);\r\n\r\n        setQuotaSize(unitCalc.total.toString());\r\n        setQuotaUnit(unitCalc.unit);\r\n        setValidInput(true);\r\n      }\r\n    }\r\n  }, [enabled, cfg]);\r\n\r\n  useEffect(() => {\r\n    const valRegExp = /^\\d*(?:\\.\\d{1,2})?$/;\r\n\r\n    if (!quotaEnabled) {\r\n      setValidInput(true);\r\n      return;\r\n    }\r\n\r\n    setValidInput(valRegExp.test(quotaSize));\r\n  }, [quotaEnabled, quotaSize]);\r\n\r\n  const enableBucketEncryption = () => {\r\n    if (loading || !validInput) {\r\n      return;\r\n    }\r\n    let req = {\r\n      enabled: quotaEnabled,\r\n      amount: parseInt(getBytes(quotaSize, quotaUnit, true)),\r\n      quota_type: \"hard\",\r\n    };\r\n\r\n    api\r\n      .invoke(\"PUT\", `/api/v1/buckets/${selectedBucket}/quota`, req)\r\n      .then(() => {\r\n        setLoading(false);\r\n        closeModalAndRefresh();\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        setLoading(false);\r\n        dispatch(setModalErrorSnackMessage(err));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ModalWrapper\r\n      modalOpen={open}\r\n      onClose={() => {\r\n        closeModalAndRefresh();\r\n      }}\r\n      title=\"Enable Bucket Quota\"\r\n      titleIcon={<BucketQuotaIcon />}\r\n    >\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\r\n          e.preventDefault();\r\n          enableBucketEncryption();\r\n        }}\r\n      >\r\n        <Grid container>\r\n          <Grid item xs={12} className={classes.formScrollable}>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <FormSwitchWrapper\r\n                value=\"bucket_quota\"\r\n                id=\"bucket_quota\"\r\n                name=\"bucket_quota\"\r\n                checked={quotaEnabled}\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setQuotaEnabled(event.target.checked);\r\n                }}\r\n                label={\"Enabled\"}\r\n              />\r\n            </Grid>\r\n            {quotaEnabled && (\r\n              <React.Fragment>\r\n                <Grid item xs={12} className={classes.formFieldRow}>\r\n                  <Grid container>\r\n                    <Grid item xs={12}>\r\n                      <InputBoxWrapper\r\n                        id=\"quota_size\"\r\n                        name=\"quota_size\"\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                          setQuotaSize(e.target.value);\r\n                          if (!e.target.validity.valid) {\r\n                            setValidInput(false);\r\n                          } else {\r\n                            setValidInput(true);\r\n                          }\r\n                        }}\r\n                        label=\"Quota\"\r\n                        value={quotaSize}\r\n                        required\r\n                        min=\"1\"\r\n                        overlayObject={\r\n                          <InputUnitMenu\r\n                            id={\"quota_unit\"}\r\n                            onUnitChange={(newValue) => {\r\n                              setQuotaUnit(newValue);\r\n                            }}\r\n                            unitSelected={quotaUnit}\r\n                            unitsList={k8sScalarUnitsExcluding([\"Ki\"])}\r\n                            disabled={false}\r\n                          />\r\n                        }\r\n                        error={!validInput ? \"Please enter a valid quota\" : \"\"}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </React.Fragment>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.modalButtonBar}>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              disabled={loading}\r\n              onClick={() => {\r\n                closeModalAndRefresh();\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={loading || !validInput}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n          {loading && (\r\n            <Grid item xs={12}>\r\n              <LinearProgress />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </form>\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(EnableQuota);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  deleteDialogStyles,\r\n  snackBarCommon,\r\n} from \"../FormComponents/common/styleLibrary\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport MainError from \"../MainError/MainError\";\r\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\r\n\r\ninterface IModalProps {\r\n  classes: any;\r\n  onClose: () => void;\r\n  modalOpen: boolean;\r\n  title: string | React.ReactNode;\r\n  children: any;\r\n  wideLimit?: boolean;\r\n  noContentPadding?: boolean;\r\n  titleIcon?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...deleteDialogStyles,\r\n    content: {\r\n      padding: 25,\r\n      paddingBottom: 0,\r\n    },\r\n    customDialogSize: {\r\n      width: \"100%\",\r\n      maxWidth: 765,\r\n    },\r\n    ...snackBarCommon,\r\n  });\r\n\r\nconst ModalWrapper = ({\r\n  onClose,\r\n  modalOpen,\r\n  title,\r\n  children,\r\n  classes,\r\n  wideLimit = true,\r\n  noContentPadding,\r\n  titleIcon = null,\r\n}: IModalProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n\r\n  const modalSnackMessage = useSelector(\r\n    (state: AppState) => state.system.modalSnackBar\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (modalSnackMessage) {\r\n      if (modalSnackMessage.message === \"\") {\r\n        setOpenSnackbar(false);\r\n        return;\r\n      }\r\n      // Open SnackBar\r\n      if (modalSnackMessage.type !== \"error\") {\r\n        setOpenSnackbar(true);\r\n      }\r\n    }\r\n  }, [modalSnackMessage]);\r\n\r\n  const closeSnackBar = () => {\r\n    setOpenSnackbar(false);\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  };\r\n\r\n  const customSize = wideLimit\r\n    ? {\r\n        classes: {\r\n          paper: classes.customDialogSize,\r\n        },\r\n      }\r\n    : { maxWidth: \"lg\" as const, fullWidth: true };\r\n\r\n  let message = \"\";\r\n\r\n  if (modalSnackMessage) {\r\n    message = modalSnackMessage.detailedErrorMsg;\r\n    if (\r\n      modalSnackMessage.detailedErrorMsg === \"\" ||\r\n      modalSnackMessage.detailedErrorMsg.length < 5\r\n    ) {\r\n      message = modalSnackMessage.message;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={modalOpen}\r\n      classes={classes}\r\n      {...customSize}\r\n      scroll={\"paper\"}\r\n      onClose={(event, reason) => {\r\n        if (reason !== \"backdropClick\") {\r\n          onClose(); // close on Esc but not on click outside\r\n        }\r\n      }}\r\n      className={classes.root}\r\n    >\r\n      <DialogTitle className={classes.title}>\r\n        <div className={classes.titleText}>\r\n          {titleIcon} {title}\r\n        </div>\r\n        <div className={classes.closeContainer}>\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            id={\"close\"}\r\n            className={classes.closeButton}\r\n            onClick={onClose}\r\n            disableRipple\r\n            size=\"small\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <MainError isModal={true} />\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        className={classes.snackBarModal}\r\n        onClose={() => {\r\n          closeSnackBar();\r\n        }}\r\n        message={message}\r\n        ContentProps={{\r\n          className: `${classes.snackBar} ${\r\n            modalSnackMessage && modalSnackMessage.type === \"error\"\r\n              ? classes.errorSnackBar\r\n              : \"\"\r\n          }`,\r\n        }}\r\n        autoHideDuration={\r\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\r\n        }\r\n      />\r\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ModalWrapper);\r\n"],"names":["withStyles","theme","createStyles","formFieldStyles","modalStyleUtils","classes","open","enabled","cfg","selectedBucket","closeModalAndRefresh","dispatch","useAppDispatch","useState","loading","setLoading","quotaEnabled","setQuotaEnabled","quotaSize","setQuotaSize","quotaUnit","setQuotaUnit","validInput","setValidInput","useEffect","unitCalc","calculateBytes","quota","total","toString","unit","test","modalOpen","onClose","title","titleIcon","noValidate","autoComplete","onSubmit","e","preventDefault","req","amount","parseInt","getBytes","quota_type","api","then","catch","err","setModalErrorSnackMessage","enableBucketEncryption","container","item","xs","className","formScrollable","formFieldRow","value","id","name","checked","onChange","event","target","label","validity","valid","required","min","overlayObject","onUnitChange","newValue","unitSelected","unitsList","k8sScalarUnitsExcluding","disabled","error","modalButtonBar","type","variant","color","onClick","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","scroll","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}