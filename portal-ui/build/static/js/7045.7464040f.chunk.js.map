{"version":3,"file":"static/js/7045.7464040f.chunk.js","mappings":"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","sources":["screens/Console/Common/ContentBox.tsx","screens/Console/NotificationEndpoints/NotificationTypeSelector.tsx","screens/Console/NotificationEndpoints/utils.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Box } from \"@mui/material\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst ContentBox: React.FC<Props> = ({ children }) => {\n  return (\n    <Box\n      sx={{\n        border: \"1px solid #eaeaea\",\n        padding: {\n          lg: \"40px\",\n          xs: \"15px\",\n        },\n      }}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport default ContentBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { useNavigate } from \"react-router-dom\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { servicesList } from \"./utils\";\nimport {\n  settingsCommon,\n  typesSelection,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport PageHeader from \"../Common/PageHeader/PageHeader\";\nimport BackLink from \"../../../common/BackLink\";\nimport PageLayout from \"../Common/Layout/PageLayout\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport ContentBox from \"../Common/ContentBox\";\n\ninterface INotificationTypeSelector {\n  classes: any;\n}\n\nconst withLogos = servicesList.filter((elService) => elService.logo !== \"\");\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...settingsCommon,\n    ...typesSelection,\n  });\n\nconst NotificationTypeSelector = ({ classes }: INotificationTypeSelector) => {\n  const navigate = useNavigate();\n  return (\n    <Fragment>\n      <PageHeader\n        label={\n          <Fragment>\n            <BackLink\n              to={IAM_PAGES.NOTIFICATIONS_ENDPOINTS}\n              label=\"Notification Targets\"\n            />\n          </Fragment>\n        }\n        actions={<React.Fragment />}\n      />\n      <PageLayout>\n        <ContentBox>\n          <div style={{ fontSize: 16, fontWeight: 600, paddingBottom: 15 }}>\n            Select Target Type\n          </div>\n          <div className={classes.iconContainer}>\n            {withLogos.map((item) => {\n              return (\n                <button\n                  key={`icon-${item.targetTitle}`}\n                  className={classes.lambdaNotif}\n                  onClick={() => {\n                    navigate(\n                      `${IAM_PAGES.NOTIFICATIONS_ENDPOINTS_ADD}/${item.actionTrigger}`\n                    );\n                  }}\n                >\n                  <div className={classes.lambdaNotifIcon}>\n                    <img\n                      src={item.logo}\n                      className={classes.logoButton}\n                      alt={item.targetTitle}\n                    />\n                  </div>\n\n                  <div className={classes.lambdaNotifTitle}>\n                    <b>{item.targetTitle}</b>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n        </ContentBox>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(NotificationTypeSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { NotificationEndpointItem } from \"./types\";\n\nimport { IElementValue } from \"../Configurations/types\";\n\nexport const notifyPostgres = \"notify_postgres\";\nexport const notifyMysql = \"notify_mysql\";\nexport const notifyKafka = \"notify_kafka\";\nexport const notifyAmqp = \"notify_amqp\";\nexport const notifyMqtt = \"notify_mqtt\";\nexport const notifyRedis = \"notify_redis\";\nexport const notifyNats = \"notify_nats\";\nexport const notifyElasticsearch = \"notify_elasticsearch\";\nexport const notifyWebhooks = \"notify_webhook\";\nexport const notifyNsq = \"notify_nsq\";\n\nexport const notificationTransform = (\n  notificationElements: NotificationEndpointItem[]\n) => {\n  return notificationElements.map((element) => {\n    return {\n      service_name: `${element.service}:${element.account_id}`,\n      name: element.service,\n      account_id: element.account_id,\n      status: element.status,\n    };\n  });\n};\n\nexport const servicesList = [\n  {\n    actionTrigger: notifyPostgres,\n    targetTitle: \"PostgreSQL\",\n    logo: \"/postgres-logo.svg\",\n  },\n  {\n    actionTrigger: notifyKafka,\n    targetTitle: \"Kafka\",\n    logo: \"/kafka-logo.svg\",\n  },\n  {\n    actionTrigger: notifyAmqp,\n    targetTitle: \"AMQP\",\n    logo: \"/amqp-logo.svg\",\n  },\n  {\n    actionTrigger: notifyMqtt,\n    targetTitle: \"MQTT\",\n    logo: \"/mqtt-logo.svg\",\n  },\n  {\n    actionTrigger: notifyRedis,\n    targetTitle: \"Redis\",\n    logo: \"/redis-logo.svg\",\n  },\n  {\n    actionTrigger: notifyNats,\n    targetTitle: \"NATS\",\n    logo: \"/nats-logo.svg\",\n  },\n  {\n    actionTrigger: notifyMysql,\n    targetTitle: \"Mysql\",\n    logo: \"/mysql-logo.svg\",\n  },\n  {\n    actionTrigger: notifyElasticsearch,\n    targetTitle: \"Elastic Search\",\n    logo: \"/elasticsearch-logo.svg\",\n  },\n  {\n    actionTrigger: notifyWebhooks,\n    targetTitle: \"Webhook\",\n    logo: \"/webhooks-logo.svg\",\n  },\n  {\n    actionTrigger: notifyNsq,\n    targetTitle: \"NSQ\",\n    logo: \"/nsq-logo.svg\",\n  },\n];\n\nconst commonFields = [\n  {\n    name: \"queue-dir\",\n    label: \"Queue Directory\",\n    required: true,\n\n    tooltip: \"staging dir for undelivered messages e.g. '/home/events'\",\n    type: \"string\",\n    placeholder: \"Enter Queue Directory\",\n  },\n  {\n    name: \"queue-limit\",\n    label: \"Queue Limit\",\n    required: false,\n\n    tooltip: \"maximum limit for undelivered messages, defaults to '10000'\",\n    type: \"number\",\n    placeholder: \"Enter Queue Limit\",\n  },\n  {\n    name: \"comment\",\n    label: \"Comment\",\n    required: false,\n    type: \"comment\",\n    placeholder: \"Enter custom notes if any\",\n  },\n];\n\nexport const removeEmptyFields = (formFields: IElementValue[]) => {\n  const nonEmptyFields = formFields.filter((field) => field.value !== \"\");\n\n  return nonEmptyFields;\n};\n\nexport const notificationEndpointsFields: any = {\n  [notifyKafka]: [\n    {\n      name: \"brokers\",\n      label: \"Brokers\",\n      required: true,\n\n      tooltip: \"Comma separated list of Kafka broker addresses\",\n      type: \"string\",\n      placeholder: \"Enter Brokers\",\n    },\n    {\n      name: \"topic\",\n      label: \"Topic\",\n      tooltip: \"Kafka topic used for bucket notifications\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"sasl_username\",\n      label: \"SASL Username\",\n      tooltip: \"Username for SASL/PLAIN or SASL/SCRAM authentication\",\n      type: \"string\",\n      placeholder: \"Enter SASL Username\",\n    },\n    {\n      name: \"sasl_password\",\n      label: \"SASL Password\",\n      tooltip: \"Password for SASL/PLAIN or SASL/SCRAM authentication\",\n      type: \"string\",\n      placeholder: \"Enter SASL Password\",\n    },\n    {\n      name: \"sasl_mechanism\",\n      label: \"SASL Mechanism\",\n      tooltip: \"SASL authentication mechanism, default 'PLAIN'\",\n      type: \"string\",\n    },\n    {\n      name: \"tls_client_auth\",\n      label: \"TLS Client Auth\",\n      tooltip:\n        \"Client Auth determines the Kafka server's policy for TLS client auth\",\n      type: \"string\",\n      placeholder: \"Enter TLS Client Auth\",\n    },\n    {\n      name: \"sasl\",\n      label: \"SASL\",\n      tooltip: \"Set to 'on' to enable SASL authentication\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"Set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS skip verify\",\n      tooltip:\n        'Trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    {\n      name: \"client_tls_cert\",\n      label: \"client TLS cert\",\n      tooltip: \"Path to client certificate for mTLS auth\",\n      type: \"path\",\n      placeholder: \"Enter TLS Client Cert\",\n    },\n    {\n      name: \"client_tls_key\",\n      label: \"client TLS key\",\n      tooltip: \"Path to client key for mTLS auth\",\n      type: \"path\",\n      placeholder: \"Enter TLS Client Key\",\n    },\n    {\n      name: \"version\",\n      label: \"Version\",\n      tooltip: \"Specify the version of the Kafka cluster e.g '2.2.0'\",\n      type: \"string\",\n      placeholder: \"Enter Kafka Version\",\n    },\n    ...commonFields,\n  ],\n  [notifyAmqp]: [\n    {\n      name: \"url\",\n      required: true,\n      label: \"URL\",\n      tooltip:\n        \"AMQP server endpoint e.g. `amqp://myuser:mypassword@localhost:5672`\",\n      type: \"url\",\n    },\n    {\n      name: \"exchange\",\n      label: \"Exchange\",\n      tooltip: \"Name of the AMQP exchange\",\n      type: \"string\",\n      placeholder: \"Enter Exchange\",\n    },\n    {\n      name: \"exchange_type\",\n      label: \"Exchange Type\",\n      tooltip: \"AMQP exchange type\",\n      type: \"string\",\n      placeholder: \"Enter Exchange Type\",\n    },\n    {\n      name: \"routing_key\",\n      label: \"Routing Key\",\n      tooltip: \"Routing key for publishing\",\n      type: \"string\",\n      placeholder: \"Enter Routing Key\",\n    },\n    {\n      name: \"mandatory\",\n      label: \"Mandatory\",\n      tooltip:\n        \"Quietly ignore undelivered messages when set to 'off', default is 'on'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"durable\",\n      label: \"Durable\",\n      tooltip:\n        \"Persist queue across broker restarts when set to 'on', default is 'off'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"no_wait\",\n      label: \"No Wait\",\n      tooltip:\n        \"Non-blocking message delivery when set to 'on', default is 'off'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"internal\",\n      label: \"Internal\",\n      tooltip:\n        \"Set to 'on' for exchange to be not used directly by publishers, but only when bound to other exchanges\",\n      type: \"on|off\",\n    },\n    {\n      name: \"auto_deleted\",\n      label: \"Auto Deleted\",\n      tooltip:\n        \"Auto delete queue when set to 'on', when there are no consumers\",\n      type: \"on|off\",\n    },\n    {\n      name: \"delivery_mode\",\n      label: \"Delivery Mode\",\n      tooltip: \"Set to '1' for non-persistent or '2' for persistent queue\",\n      type: \"number\",\n      placeholder: \"Enter Delivery Mode\",\n    },\n    ...commonFields,\n  ],\n  [notifyRedis]: [\n    {\n      name: \"address\",\n      required: true,\n      label: \"Address\",\n      tooltip: \"Redis server's address. For example: `localhost:6379`\",\n      type: \"address\",\n      placeholder: \"Enter Address\",\n    },\n    {\n      name: \"key\",\n      required: true,\n      label: \"Key\",\n      tooltip: \"Redis key to store/update events, key is auto-created\",\n      type: \"string\",\n      placeholder: \"Enter Key\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"Redis server password\",\n      type: \"string\",\n      placeholder: \"Enter Password\",\n    },\n    ...commonFields,\n  ],\n  [notifyMqtt]: [\n    {\n      name: \"broker\",\n      required: true,\n      label: \"Broker\",\n      tooltip: \"MQTT server endpoint e.g. `tcp://localhost:1883`\",\n      type: \"uri\",\n      placeholder: \"Enter Brokers\",\n    },\n    {\n      name: \"topic\",\n      required: true,\n      label: \"Topic\",\n      tooltip: \"name of the MQTT topic to publish\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"username\",\n      label: \"Username\",\n      tooltip: \"MQTT username\",\n      type: \"string\",\n      placeholder: \"Enter Username\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"MQTT password\",\n      type: \"string\",\n      placeholder: \"Enter Password\",\n    },\n    {\n      name: \"qos\",\n      label: \"QOS\",\n      tooltip: \"Set the quality of service priority, defaults to '0'\",\n      type: \"number\",\n      placeholder: \"Enter QOS\",\n    },\n    {\n      name: \"keep_alive_interval\",\n      label: \"Keep Alive Interval\",\n      tooltip: \"Keep-alive interval for MQTT connections in s,m,h,d\",\n      type: \"duration\",\n      placeholder: \"Enter Keep Alive Internal\",\n    },\n    {\n      name: \"reconnect_interval\",\n      label: \"Reconnect Interval\",\n      tooltip: \"Reconnect interval for MQTT connections in s,m,h,d\",\n      type: \"duration\",\n      placeholder: \"Enter Reconnect Interval\",\n    },\n    ...commonFields,\n  ],\n  [notifyNats]: [\n    {\n      name: \"address\",\n      required: true,\n      label: \"Address\",\n      tooltip: \"NATS server address e.g. '0.0.0.0:4222'\",\n      type: \"address\",\n      placeholder: \"Enter Address\",\n    },\n    {\n      name: \"subject\",\n      required: true,\n      label: \"Subject\",\n      tooltip: \"NATS subscription subject\",\n      type: \"string\",\n      placeholder: \"Enter NATS Subject\",\n    },\n    {\n      name: \"username\",\n      label: \"Username\",\n      tooltip: \"NATS username\",\n      type: \"string\",\n      placeholder: \"Enter NATS Username\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"NATS password\",\n      type: \"string\",\n      placeholder: \"Enter NATS password\",\n    },\n    {\n      name: \"token\",\n      label: \"Token\",\n      tooltip: \"NATS token\",\n      type: \"string\",\n      placeholder: \"Enter NATS token\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"Set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS Skip Verify\",\n      tooltip:\n        'Trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    {\n      name: \"ping_interval\",\n      label: \"Ping Interval\",\n      tooltip: \"Client ping commands interval in s,m,h,d. Disabled by default\",\n      type: \"duration\",\n      placeholder: \"Enter Ping Interval\",\n    },\n    {\n      name: \"streaming\",\n      label: \"Streaming\",\n      tooltip: \"Set to 'on', to use streaming NATS server\",\n      type: \"on|off\",\n    },\n    {\n      name: \"streaming_async\",\n      label: \"Streaming async\",\n      tooltip: \"Set to 'on', to enable asynchronous publish\",\n      type: \"on|off\",\n    },\n    {\n      name: \"streaming_max_pub_acks_in_flight\",\n      label: \"Streaming max publish ACKS in flight\",\n      tooltip: \"Number of messages to publish without waiting for ACKs\",\n      type: \"number\",\n      placeholder: \"Enter Streaming in flight value\",\n    },\n    {\n      name: \"streaming_cluster_id\",\n      label: \"Streaming Cluster ID\",\n      tooltip: \"Unique ID for NATS streaming cluster\",\n      type: \"string\",\n      placeholder: \"Enter Streaming Cluster ID\",\n    },\n    {\n      name: \"cert_authority\",\n      label: \"Cert Authority\",\n      tooltip: \"Path to certificate chain of the target NATS server\",\n      type: \"string\",\n      placeholder: \"Enter Cert Authority\",\n    },\n    {\n      name: \"client_cert\",\n      label: \"Client Cert\",\n      tooltip: \"Client cert for NATS mTLS auth\",\n      type: \"string\",\n      placeholder: \"Enter Client Cert\",\n    },\n    {\n      name: \"client_key\",\n      label: \"Client Key\",\n      tooltip: \"Client cert key for NATS mTLS auth\",\n      type: \"string\",\n      placeholder: \"Enter Client Key\",\n    },\n    ...commonFields,\n  ],\n  [notifyElasticsearch]: [\n    {\n      name: \"url\",\n      required: true,\n      label: \"URL\",\n      tooltip:\n        \"Elasticsearch server's address, with optional authentication info\",\n      type: \"url\",\n      placeholder: \"Enter URL\",\n    },\n    {\n      name: \"index\",\n      required: true,\n      label: \"Index\",\n      tooltip:\n        \"Elasticsearch index to store/update events, index is auto-created\",\n      type: \"string\",\n      placeholder: \"Enter Index\",\n    },\n    {\n      name: \"format\",\n      required: true,\n      label: \"Format\",\n      tooltip:\n        \"'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\",\n      type: \"enum\",\n      placeholder: \"Enter Format\",\n    },\n    ...commonFields,\n  ],\n  [notifyWebhooks]: [\n    {\n      name: \"endpoint\",\n      required: true,\n      label: \"Endpoint\",\n      tooltip:\n        \"webhook server endpoint e.g. http://localhost:8080/minio/events\",\n      type: \"url\",\n      placeholder: \"Enter Endpoint\",\n    },\n    {\n      name: \"auth_token\",\n      label: \"Auth Token\",\n      tooltip: \"opaque string or JWT authorization token\",\n      type: \"string\",\n      placeholder: \"Enter auth_token\",\n    },\n    ...commonFields,\n  ],\n  [notifyNsq]: [\n    {\n      name: \"nsqd_address\",\n      required: true,\n      label: \"NSQD Address\",\n      tooltip: \"NSQ server address e.g. '127.0.0.1:4150'\",\n      type: \"address\",\n      placeholder: \"Enter nsqd_address\",\n    },\n    {\n      name: \"topic\",\n      required: true,\n      label: \"Topic\",\n      tooltip: \"NSQ topic\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS Skip Verify\",\n      tooltip:\n        'trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    ...commonFields,\n  ],\n};\n\nconst serviceToConfigMap: Record<string, string> = {\n  webhook: \"notify_webhook\",\n  amqp: \"notify_amqp\",\n  kafka: \"notify_kafka\",\n  mqtt: \"notify_mqtt\",\n  nats: \"notify_nats\",\n  nsq: \"notify_nsq\",\n  mysql: \"notify_mysql\",\n  postgresql: \"notify_postgres\", //looks different in server response(postgresql as opposed to postgres) from restapi/admin_notification_endpoints.go\n  elasticsearch: \"notify_elasticsearch\",\n  redis: \"notify_redis\",\n};\n\nexport const getNotificationConfigKey = (serviceName: string) => {\n  return serviceToConfigMap[serviceName];\n};\n"],"names":["children","sx","border","padding","lg","xs","withLogos","servicesList","elService","logo","withStyles","theme","createStyles","settingsCommon","typesSelection","classes","navigate","useNavigate","Fragment","label","to","IAM_PAGES","actions","style","fontSize","fontWeight","paddingBottom","className","iconContainer","map","item","lambdaNotif","onClick","actionTrigger","lambdaNotifIcon","src","logoButton","alt","targetTitle","lambdaNotifTitle","notifyPostgres","notifyMysql","notifyKafka","notifyAmqp","notifyMqtt","notifyRedis","notifyNats","notifyElasticsearch","notifyWebhooks","notifyNsq","notificationTransform","notificationElements","element","service_name","service","account_id","name","status","commonFields","required","tooltip","type","placeholder","removeEmptyFields","formFields","filter","field","value","notificationEndpointsFields","serviceToConfigMap","webhook","amqp","kafka","mqtt","nats","nsq","mysql","postgresql","elasticsearch","redis","getNotificationConfigKey","serviceName"],"sourceRoot":""}