{"version":3,"file":"static/js/8391.824bba1f.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EnableBucketEncryption.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Button, LinearProgress, SelectChangeEvent } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  formFieldStyles,\r\n  modalStyleUtils,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\nimport { BucketEncryptionInfo } from \"../types\";\r\nimport { ErrorResponseHandler } from \"../../../../common/types\";\r\nimport api from \"../../../../common/api\";\r\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\r\nimport { BucketEncryptionIcon } from \"../../../../icons\";\r\n\r\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../../store\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...modalStyleUtils,\r\n    ...formFieldStyles,\r\n  });\r\n\r\ninterface IEnableBucketEncryptionProps {\r\n  classes: any;\r\n  open: boolean;\r\n  encryptionEnabled: boolean;\r\n  encryptionCfg: BucketEncryptionInfo | null;\r\n  selectedBucket: string;\r\n  closeModalAndRefresh: () => void;\r\n}\r\n\r\nconst EnableBucketEncryption = ({\r\n  classes,\r\n  open,\r\n  encryptionCfg,\r\n  selectedBucket,\r\n  closeModalAndRefresh,\r\n}: IEnableBucketEncryptionProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [kmsKeyID, setKmsKeyID] = useState<string>(\"\");\r\n  const [encryptionType, setEncryptionType] = useState<string>(\"disabled\");\r\n\r\n  useEffect(() => {\r\n    if (encryptionCfg) {\r\n      if (encryptionCfg.algorithm === \"AES256\") {\r\n        setEncryptionType(\"sse-s3\");\r\n      } else {\r\n        setEncryptionType(\"sse-kms\");\r\n        setKmsKeyID(encryptionCfg.kmsMasterKeyID);\r\n      }\r\n    }\r\n  }, [encryptionCfg]);\r\n\r\n  const enableBucketEncryption = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    if (loading) {\r\n      return;\r\n    }\r\n    if (encryptionType === \"disabled\") {\r\n      api\r\n        .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/encryption/disable`)\r\n        .then(() => {\r\n          setLoading(false);\r\n          closeModalAndRefresh();\r\n        })\r\n        .catch((err: ErrorResponseHandler) => {\r\n          setLoading(false);\r\n          dispatch(setModalErrorSnackMessage(err));\r\n        });\r\n    } else {\r\n      api\r\n        .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/encryption/enable`, {\r\n          encType: encryptionType,\r\n          kmsKeyID: kmsKeyID,\r\n        })\r\n        .then(() => {\r\n          setLoading(false);\r\n          closeModalAndRefresh();\r\n        })\r\n        .catch((err: ErrorResponseHandler) => {\r\n          setLoading(false);\r\n          dispatch(setModalErrorSnackMessage(err));\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ModalWrapper\r\n      modalOpen={open}\r\n      onClose={() => {\r\n        closeModalAndRefresh();\r\n      }}\r\n      title=\"Enable Bucket Encryption\"\r\n      titleIcon={<BucketEncryptionIcon />}\r\n    >\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\r\n          enableBucketEncryption(e);\r\n        }}\r\n      >\r\n        <Grid container>\r\n          <Grid item xs={12} className={classes.modalFormScrollable}>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <SelectWrapper\r\n                onChange={(e: SelectChangeEvent<string>) => {\r\n                  setEncryptionType(e.target.value as string);\r\n                }}\r\n                id=\"select-encryption-type\"\r\n                name=\"select-encryption-type\"\r\n                label={\"Encryption Type\"}\r\n                value={encryptionType}\r\n                options={[\r\n                  {\r\n                    label: \"Disabled\",\r\n                    value: \"disabled\",\r\n                  },\r\n                  {\r\n                    label: \"SSE-S3\",\r\n                    value: \"sse-s3\",\r\n                  },\r\n                  {\r\n                    label: \"SSE-KMS\",\r\n                    value: \"sse-kms\",\r\n                  },\r\n                ]}\r\n              />\r\n            </Grid>\r\n\r\n            {encryptionType === \"sse-kms\" && (\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <InputBoxWrapper\r\n                  id=\"kms-key-id\"\r\n                  name=\"kms-key-id\"\r\n                  label=\"KMS Key ID\"\r\n                  value={kmsKeyID}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                    setKmsKeyID(e.target.value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.modalButtonBar}>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                closeModalAndRefresh();\r\n              }}\r\n              disabled={loading}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={loading}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n          {loading && (\r\n            <Grid item xs={12}>\r\n              <LinearProgress />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </form>\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(EnableBucketEncryption);\r\n","// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport {\r\n  deleteDialogStyles,\r\n  snackBarCommon,\r\n} from \"../FormComponents/common/styleLibrary\";\r\nimport { AppState, useAppDispatch } from \"../../../../store\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport MainError from \"../MainError/MainError\";\r\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\r\n\r\ninterface IModalProps {\r\n  classes: any;\r\n  onClose: () => void;\r\n  modalOpen: boolean;\r\n  title: string | React.ReactNode;\r\n  children: any;\r\n  wideLimit?: boolean;\r\n  noContentPadding?: boolean;\r\n  titleIcon?: React.ReactNode;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    ...deleteDialogStyles,\r\n    content: {\r\n      padding: 25,\r\n      paddingBottom: 0,\r\n    },\r\n    customDialogSize: {\r\n      width: \"100%\",\r\n      maxWidth: 765,\r\n    },\r\n    ...snackBarCommon,\r\n  });\r\n\r\nconst ModalWrapper = ({\r\n  onClose,\r\n  modalOpen,\r\n  title,\r\n  children,\r\n  classes,\r\n  wideLimit = true,\r\n  noContentPadding,\r\n  titleIcon = null,\r\n}: IModalProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n\r\n  const modalSnackMessage = useSelector(\r\n    (state: AppState) => state.system.modalSnackBar\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (modalSnackMessage) {\r\n      if (modalSnackMessage.message === \"\") {\r\n        setOpenSnackbar(false);\r\n        return;\r\n      }\r\n      // Open SnackBar\r\n      if (modalSnackMessage.type !== \"error\") {\r\n        setOpenSnackbar(true);\r\n      }\r\n    }\r\n  }, [modalSnackMessage]);\r\n\r\n  const closeSnackBar = () => {\r\n    setOpenSnackbar(false);\r\n    dispatch(setModalSnackMessage(\"\"));\r\n  };\r\n\r\n  const customSize = wideLimit\r\n    ? {\r\n        classes: {\r\n          paper: classes.customDialogSize,\r\n        },\r\n      }\r\n    : { maxWidth: \"lg\" as const, fullWidth: true };\r\n\r\n  let message = \"\";\r\n\r\n  if (modalSnackMessage) {\r\n    message = modalSnackMessage.detailedErrorMsg;\r\n    if (\r\n      modalSnackMessage.detailedErrorMsg === \"\" ||\r\n      modalSnackMessage.detailedErrorMsg.length < 5\r\n    ) {\r\n      message = modalSnackMessage.message;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={modalOpen}\r\n      classes={classes}\r\n      {...customSize}\r\n      scroll={\"paper\"}\r\n      onClose={(event, reason) => {\r\n        if (reason !== \"backdropClick\") {\r\n          onClose(); // close on Esc but not on click outside\r\n        }\r\n      }}\r\n      className={classes.root}\r\n    >\r\n      <DialogTitle className={classes.title}>\r\n        <div className={classes.titleText}>\r\n          {titleIcon} {title}\r\n        </div>\r\n        <div className={classes.closeContainer}>\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            id={\"close\"}\r\n            className={classes.closeButton}\r\n            onClick={onClose}\r\n            disableRipple\r\n            size=\"small\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <MainError isModal={true} />\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        className={classes.snackBarModal}\r\n        onClose={() => {\r\n          closeSnackBar();\r\n        }}\r\n        message={message}\r\n        ContentProps={{\r\n          className: `${classes.snackBar} ${\r\n            modalSnackMessage && modalSnackMessage.type === \"error\"\r\n              ? classes.errorSnackBar\r\n              : \"\"\r\n          }`,\r\n        }}\r\n        autoHideDuration={\r\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\r\n        }\r\n      />\r\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ModalWrapper);\r\n"],"names":["withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","classes","open","encryptionCfg","selectedBucket","closeModalAndRefresh","dispatch","useAppDispatch","useState","loading","setLoading","kmsKeyID","setKmsKeyID","encryptionType","setEncryptionType","useEffect","algorithm","kmsMasterKeyID","modalOpen","onClose","title","titleIcon","noValidate","autoComplete","onSubmit","e","preventDefault","api","then","catch","err","setModalErrorSnackMessage","encType","container","item","xs","className","modalFormScrollable","formFieldRow","onChange","target","value","id","name","label","options","modalButtonBar","type","variant","color","onClick","disabled","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}