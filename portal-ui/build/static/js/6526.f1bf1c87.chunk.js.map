{"version":3,"file":"static/js/6526.f1bf1c87.chunk.js","mappings":"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","sources":["screens/Console/Support/Register.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport {\r\n  actionsTray,\r\n  containerForHeader,\r\n  searchField,\r\n  spacingUtils,\r\n} from \"../Common/FormComponents/common/styleLibrary\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { Box, Button, Link } from \"@mui/material\";\r\nimport PageHeader from \"../Common/PageHeader/PageHeader\";\r\nimport PageLayout from \"../Common/Layout/PageLayout\";\r\nimport { CopyIcon, UsersIcon } from \"../../../icons\";\r\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport OnlineRegistrationIcon from \"../../../icons/OnlineRegistrationIcon\";\r\nimport OfflineRegistrationIcon from \"../../../icons/OfflineRegistrationIcon\";\r\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport api from \"../../../common/api\";\r\n\r\nimport {\r\n  SubnetInfo,\r\n  SubnetLoginRequest,\r\n  SubnetLoginResponse,\r\n  SubnetLoginWithMFARequest,\r\n  SubnetOrganization,\r\n  SubnetRegisterRequest,\r\n  SubnetRegTokenResponse,\r\n} from \"../License/types\";\r\nimport { ErrorResponseHandler } from \"../../../common/types\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport SelectWrapper from \"../Common/FormComponents/SelectWrapper/SelectWrapper\";\r\nimport { hasPermission } from \"../../../common/SecureComponent\";\r\nimport {\r\n  CONSOLE_UI_RESOURCE,\r\n  IAM_PAGES,\r\n  IAM_PAGES_PERMISSIONS,\r\n} from \"../../../common/SecureComponent/permissions\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport RegisterHelpBox from \"./RegisterHelpBox\";\r\nimport { selOpMode, setErrorSnackMessage } from \"../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../store\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport { TabPanel } from \"../../shared/tabs\";\r\nimport { ClusterRegistered, FormTitle, ProxyConfiguration } from \"./utils\";\r\nimport ApiKeyRegister from \"./ApiKeyRegister\";\r\ninterface IRegister {\r\n  classes: any;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    registerActivationIcon: {\r\n      color: theme.palette.primary.main,\r\n      fontSize: 16,\r\n      fontWeight: \"bold\",\r\n      marginBottom: 20,\r\n      \"& .min-icon\": {\r\n        width: 32.12,\r\n        height: 25,\r\n        marginRight: 10,\r\n        verticalAlign: \"middle\",\r\n      },\r\n    },\r\n    registerActivationMode: {\r\n      textAlign: \"right\",\r\n      \"& a\": {\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    subnetDescription: {\r\n      textAlign: \"left\",\r\n      Font: \"normal normal normal 14px/17px Lato\",\r\n      letterSpacing: 0,\r\n      color: \"#000000\",\r\n      \"& span\": {\r\n        fontWeight: \"bold\",\r\n      },\r\n    },\r\n    registeredStatus: {\r\n      border: \"1px solid #E2E2E2\",\r\n      padding: \"24px 24px 24px 24px\",\r\n      borderRadius: 2,\r\n      marginBottom: 25,\r\n      backgroundColor: \"#FBFAFA\",\r\n      \"& .min-icon\": {\r\n        width: 20,\r\n        height: 20,\r\n        marginLeft: 48,\r\n        marginRight: 13,\r\n        verticalAlign: \"middle\",\r\n        marginTop: -3,\r\n      },\r\n      \"& span\": {\r\n        fontWeight: \"bold\",\r\n      },\r\n    },\r\n    copyInputBox: {\r\n      \"& button\": {\r\n        border: \"1px solid #5E5E5E\",\r\n        borderRadius: 2,\r\n      },\r\n    },\r\n    link: {\r\n      color: \"#2781B0\",\r\n      cursor: \"pointer\",\r\n    },\r\n    sizedLabel: {\r\n      minWidth: \"75px\",\r\n    },\r\n    ...actionsTray,\r\n    ...searchField,\r\n    ...spacingUtils,\r\n    ...containerForHeader(theme.spacing(4)),\r\n  });\r\n\r\nconst Register = ({ classes }: IRegister) => {\r\n  const dispatch = useAppDispatch();\r\n  const operatorMode = useSelector(selOpMode);\r\n  const [license, setLicense] = useState<string>(\"\");\r\n  const [subnetPassword, setSubnetPassword] = useState<string>(\"\");\r\n  const [subnetEmail, setSubnetEmail] = useState<string>(\"\");\r\n  const [subnetMFAToken, setSubnetMFAToken] = useState<string>(\"\");\r\n  const [subnetOTP, setSubnetOTP] = useState<string>(\"\");\r\n  const [subnetAccessToken, setSubnetAccessToken] = useState<string>(\"\");\r\n  const [selectedSubnetOrganization, setSelectedSubnetOrganization] =\r\n    useState<string>(\"\");\r\n  const [subnetRegToken, setSubnetRegToken] = useState<string>(\"\");\r\n  const [subnetOrganizations, setSubnetOrganizations] = useState<\r\n    SubnetOrganization[]\r\n  >([]);\r\n  const [showPassword, setShowPassword] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [loadingLicenseInfo, setLoadingLicenseInfo] = useState<boolean>(false);\r\n  const [clusterRegistered, setClusterRegistered] = useState<boolean>(false);\r\n  const [licenseInfo, setLicenseInfo] = useState<SubnetInfo | undefined>();\r\n  const [curTab, setCurTab] = useState<number>(0);\r\n\r\n  const [initialLicenseLoading, setInitialLicenseLoading] =\r\n    useState<boolean>(true);\r\n  const clearForm = () => {\r\n    setSubnetAccessToken(\"\");\r\n    setSelectedSubnetOrganization(\"\");\r\n    setSubnetRegToken(\"\");\r\n    setShowPassword(false);\r\n    setSubnetOrganizations([]);\r\n    setLicense(\"\");\r\n    setSubnetPassword(\"\");\r\n    setSubnetEmail(\"\");\r\n    setSubnetMFAToken(\"\");\r\n    setSubnetOTP(\"\");\r\n  };\r\n\r\n  const getSubnetInfo = hasPermission(\r\n    CONSOLE_UI_RESOURCE,\r\n    IAM_PAGES_PERMISSIONS[IAM_PAGES.LICENSE],\r\n    true\r\n  );\r\n\r\n  const fetchLicenseInfo = useCallback(() => {\r\n    if (loadingLicenseInfo) {\r\n      return;\r\n    }\r\n    if (getSubnetInfo) {\r\n      setLoadingLicenseInfo(true);\r\n      api\r\n        .invoke(\"GET\", `/api/v1/subnet/info`)\r\n        .then((res: SubnetInfo) => {\r\n          setLicenseInfo(res);\r\n          setClusterRegistered(true);\r\n          setLoadingLicenseInfo(false);\r\n        })\r\n        .catch((err: ErrorResponseHandler) => {\r\n          if (\r\n            err.detailedError.toLowerCase() !==\r\n            \"License is not present\".toLowerCase()\r\n          ) {\r\n            dispatch(setErrorSnackMessage(err));\r\n          }\r\n          setClusterRegistered(false);\r\n          setLoadingLicenseInfo(false);\r\n        });\r\n    } else {\r\n      setLoadingLicenseInfo(false);\r\n    }\r\n  }, [loadingLicenseInfo, getSubnetInfo, dispatch]);\r\n\r\n  const fetchSubnetRegToken = () => {\r\n    if (loading || subnetRegToken) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    api\r\n      .invoke(\"GET\", \"/api/v1/subnet/registration-token\")\r\n      .then((resp: SubnetRegTokenResponse) => {\r\n        setLoading(false);\r\n        if (resp && resp.regToken) {\r\n          setSubnetRegToken(resp.regToken);\r\n        }\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        console.error(err);\r\n        dispatch(setErrorSnackMessage(err));\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const callRegister = (token: string, account_id: string) => {\r\n    const request: SubnetRegisterRequest = {\r\n      token: token,\r\n      account_id: account_id,\r\n    };\r\n    api\r\n      .invoke(\"POST\", \"/api/v1/subnet/register\", request)\r\n      .then(() => {\r\n        setLoading(false);\r\n        clearForm();\r\n        fetchLicenseInfo();\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n        setLoading(false);\r\n      });\r\n  };\r\n  const subnetRegister = () => {\r\n    if (loading) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    if (subnetAccessToken && selectedSubnetOrganization) {\r\n      callRegister(subnetAccessToken, selectedSubnetOrganization);\r\n    }\r\n  };\r\n\r\n  const subnetLoginWithMFA = () => {\r\n    if (loading) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const request: SubnetLoginWithMFARequest = {\r\n      username: subnetEmail,\r\n      otp: subnetOTP,\r\n      mfa_token: subnetMFAToken,\r\n    };\r\n    api\r\n      .invoke(\"POST\", \"/api/v1/subnet/login/mfa\", request)\r\n      .then((resp: SubnetLoginResponse) => {\r\n        setLoading(false);\r\n        if (resp && resp.access_token && resp.organizations.length > 0) {\r\n          if (resp.organizations.length === 1) {\r\n            callRegister(\r\n              resp.access_token,\r\n              resp.organizations[0].accountId.toString()\r\n            );\r\n          } else {\r\n            setSubnetAccessToken(resp.access_token);\r\n            setSubnetOrganizations(resp.organizations);\r\n            setSelectedSubnetOrganization(\r\n              resp.organizations[0].accountId.toString()\r\n            );\r\n          }\r\n        }\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n        setLoading(false);\r\n        setSubnetOTP(\"\");\r\n      });\r\n  };\r\n\r\n  const subnetLogin = () => {\r\n    if (loading) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    let request: SubnetLoginRequest = {\r\n      username: subnetEmail,\r\n      password: subnetPassword,\r\n      apiKey: license,\r\n    };\r\n    api\r\n      .invoke(\"POST\", \"/api/v1/subnet/login\", request)\r\n      .then((resp: SubnetLoginResponse) => {\r\n        setLoading(false);\r\n        if (resp && resp.registered) {\r\n          clearForm();\r\n          fetchLicenseInfo();\r\n        } else if (resp && resp.mfa_token) {\r\n          setSubnetMFAToken(resp.mfa_token);\r\n        } else if (resp && resp.access_token && resp.organizations.length > 0) {\r\n          setSubnetAccessToken(resp.access_token);\r\n          setSubnetOrganizations(resp.organizations);\r\n          setSelectedSubnetOrganization(\r\n            resp.organizations[0].accountId.toString()\r\n          );\r\n        }\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        dispatch(setErrorSnackMessage(err));\r\n        setLoading(false);\r\n        clearForm();\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (initialLicenseLoading) {\r\n      fetchLicenseInfo();\r\n      setInitialLicenseLoading(false);\r\n    }\r\n  }, [fetchLicenseInfo, initialLicenseLoading, setInitialLicenseLoading]);\r\n\r\n  let clusterRegistrationForm: JSX.Element = <Fragment />;\r\n\r\n  if (subnetAccessToken && subnetOrganizations.length > 0) {\r\n    clusterRegistrationForm = (\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexFlow: \"column\",\r\n            flex: \"2\",\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              marginTop: \"15px\",\r\n              marginBottom: \"15px\",\r\n              \"& .title-text\": {\r\n                marginLeft: \"0px\",\r\n              },\r\n            }}\r\n          >\r\n            <FormTitle title={`Register MinIO cluster`} />\r\n          </Box>\r\n          <Box>\r\n            <SelectWrapper\r\n              id=\"subnet-organization\"\r\n              name=\"subnet-organization\"\r\n              onChange={(e) =>\r\n                setSelectedSubnetOrganization(e.target.value as string)\r\n              }\r\n              label=\"Select an organization\"\r\n              value={selectedSubnetOrganization}\r\n              options={subnetOrganizations.map((organization) => ({\r\n                label: organization.company,\r\n                value: organization.accountId.toString(),\r\n              }))}\r\n            />\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"flex-end\",\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <Button\r\n                className={classes.button}\r\n                color=\"primary\"\r\n                onClick={() => subnetRegister()}\r\n                disabled={loading || subnetAccessToken.trim().length === 0}\r\n                variant=\"contained\"\r\n              >\r\n                Register\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <RegisterHelpBox />\r\n      </Box>\r\n    );\r\n  } else if (subnetMFAToken) {\r\n    clusterRegistrationForm = (\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexFlow: \"column\",\r\n            flex: \"2\",\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              fontSize: \"16px\",\r\n              display: \"flex\",\r\n              flexFlow: \"column\",\r\n              marginTop: \"30px\",\r\n              marginBottom: \"30px\",\r\n            }}\r\n          >\r\n            Two-Factor Authentication\r\n          </Box>\r\n\r\n          <Box>\r\n            Please enter the 6-digit verification code that was sent to your\r\n            email address. This code will be valid for 5 minutes.\r\n          </Box>\r\n\r\n          <Box\r\n            sx={{\r\n              flex: \"1\",\r\n              marginTop: \"30px\",\r\n            }}\r\n          >\r\n            <InputBoxWrapper\r\n              overlayIcon={<LockOutlinedIcon />}\r\n              id=\"subnet-otp\"\r\n              name=\"subnet-otp\"\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                setSubnetOTP(event.target.value)\r\n              }\r\n              placeholder=\"\"\r\n              label=\"\"\r\n              value={subnetOTP}\r\n            />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"flex-end\",\r\n            }}\r\n          >\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => subnetLoginWithMFA()}\r\n              disabled={\r\n                loading ||\r\n                subnetOTP.trim().length === 0 ||\r\n                subnetMFAToken.trim().length === 0\r\n              }\r\n              variant=\"contained\"\r\n            >\r\n              Verify\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        <RegisterHelpBox />\r\n      </Box>\r\n    );\r\n  } else {\r\n    clusterRegistrationForm = (\r\n      <Fragment>\r\n        <Box\r\n          sx={{\r\n            \"& .title-text\": {\r\n              marginLeft: \"27px\",\r\n              fontWeight: 600,\r\n            },\r\n          }}\r\n        >\r\n          <FormTitle\r\n            icon={<OnlineRegistrationIcon />}\r\n            title={`Online activation of MinIO Subscription Network License`}\r\n          />\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexFlow: {\r\n              xs: \"column\",\r\n              md: \"row\",\r\n            },\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              flexFlow: \"column\",\r\n              flex: \"2\",\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                fontSize: \"16px\",\r\n                display: \"flex\",\r\n                flexFlow: \"column\",\r\n                marginTop: \"30px\",\r\n                marginBottom: \"30px\",\r\n              }}\r\n            >\r\n              Use your MinIO Subscription Network login credentials to register\r\n              this cluster.\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                flex: \"1\",\r\n              }}\r\n            >\r\n              <InputBoxWrapper\r\n                className={classes.spacerBottom}\r\n                classes={{\r\n                  inputLabel: classes.sizedLabel,\r\n                }}\r\n                id=\"subnet-email\"\r\n                name=\"subnet-email\"\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                  setSubnetEmail(event.target.value)\r\n                }\r\n                label=\"Email\"\r\n                value={subnetEmail}\r\n                overlayIcon={<UsersIcon />}\r\n              />\r\n              <InputBoxWrapper\r\n                className={classes.spacerBottom}\r\n                classes={{\r\n                  inputLabel: classes.sizedLabel,\r\n                }}\r\n                id=\"subnet-password\"\r\n                name=\"subnet-password\"\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                  setSubnetPassword(event.target.value)\r\n                }\r\n                label=\"Password\"\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                value={subnetPassword}\r\n                overlayIcon={\r\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\r\n                }\r\n                overlayAction={() => setShowPassword(!showPassword)}\r\n              />\r\n\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"flex-end\",\r\n                }}\r\n              >\r\n                <Button\r\n                  type=\"submit\"\r\n                  className={classes.spacerRight}\r\n                  variant=\"outlined\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    window.open(\r\n                      `https://min.io/signup?ref=${\r\n                        operatorMode ? \"op\" : \"con\"\r\n                      }`,\r\n                      \"_blank\"\r\n                    );\r\n                  }}\r\n                >\r\n                  Sign up\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={\r\n                    loading ||\r\n                    subnetEmail.trim().length === 0 ||\r\n                    subnetPassword.trim().length === 0\r\n                  }\r\n                  onClick={() => subnetLogin()}\r\n                >\r\n                  Register\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n          <RegisterHelpBox />\r\n        </Box>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  const apiKeyRegistration = (\r\n    <Fragment>\r\n      <Box\r\n        sx={{\r\n          border: \"1px solid #eaeaea\",\r\n          borderRadius: \"2px\",\r\n          display: \"flex\",\r\n          flexFlow: \"column\",\r\n          padding: \"43px\",\r\n        }}\r\n      >\r\n        {clusterRegistered && licenseInfo ? (\r\n          <ClusterRegistered\r\n            email={licenseInfo.email}\r\n            linkClass={classes.link}\r\n          />\r\n        ) : (\r\n          <ApiKeyRegister\r\n            afterRegister={fetchLicenseInfo}\r\n            registerEndpoint={\"/api/v1/subnet/login\"}\r\n          />\r\n        )}\r\n      </Box>\r\n      <ProxyConfiguration linkClass={classes.link} />\r\n    </Fragment>\r\n  );\r\n\r\n  const offlineRegistration = (\r\n    <Fragment>\r\n      <Box\r\n        sx={{\r\n          border: \"1px solid #eaeaea\",\r\n          borderRadius: \"2px\",\r\n          display: \"flex\",\r\n          flexFlow: \"column\",\r\n          padding: \"43px\",\r\n        }}\r\n      >\r\n        {clusterRegistered && licenseInfo ? (\r\n          <ClusterRegistered\r\n            email={licenseInfo.email}\r\n            linkClass={classes.link}\r\n          />\r\n        ) : null}\r\n        <Box\r\n          sx={{\r\n            \"& .title-text\": {\r\n              marginLeft: \"27px\",\r\n              fontWeight: 600,\r\n            },\r\n          }}\r\n        >\r\n          <FormTitle\r\n            icon={<OfflineRegistrationIcon />}\r\n            title={`Register cluster in an Airgap environment`}\r\n          />\r\n        </Box>\r\n\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              flexFlow: \"column\",\r\n              flex: \"2\",\r\n              marginTop: \"15px\",\r\n              \"& .step-number\": {\r\n                color: \"#ffffff\",\r\n                height: \"25px\",\r\n                width: \"25px\",\r\n                background: \"#081C42\",\r\n                marginRight: \"10px\",\r\n                textAlign: \"center\",\r\n                fontWeight: 600,\r\n                borderRadius: \"50%\",\r\n              },\r\n\r\n              \"& .step-row\": {\r\n                fontSize: \"16px\",\r\n                display: \"flex\",\r\n                marginTop: \"15px\",\r\n                marginBottom: \"15px\",\r\n              },\r\n            }}\r\n          >\r\n            <Box>\r\n              <Box className=\"step-row\">\r\n                <div className=\"step-number\">1</div>{\" \"}\r\n                <div className=\"step-text\">\r\n                  Copy the following registration token\r\n                </div>\r\n              </Box>\r\n\r\n              <Box\r\n                sx={{\r\n                  flex: \"1\",\r\n                  marginTop: \"15px\",\r\n                  marginLeft: \"35px\",\r\n                  \"& input\": {\r\n                    color: \"#737373\",\r\n                  },\r\n                }}\r\n              >\r\n                <InputBoxWrapper\r\n                  id=\"registration-token\"\r\n                  name=\"registration-token\"\r\n                  placeholder=\"\"\r\n                  label=\"\"\r\n                  type=\"text\"\r\n                  onChange={() => {}}\r\n                  value={subnetRegToken}\r\n                  overlayIcon={<CopyIcon />}\r\n                  extraInputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                  overlayAction={() =>\r\n                    navigator.clipboard.writeText(subnetRegToken)\r\n                  }\r\n                />\r\n              </Box>\r\n            </Box>\r\n\r\n            <Box>\r\n              <Box className=\"step-row\">\r\n                <div className=\"step-number\">2</div>\r\n                <div className=\"step-text\">\r\n                  Navigate to SUBNET and register your cluster\r\n                </div>\r\n              </Box>\r\n\r\n              <Box\r\n                sx={{\r\n                  flex: \"1\",\r\n                  marginLeft: \"35px\",\r\n                }}\r\n              >\r\n                <Link\r\n                  className={classes.link}\r\n                  color=\"inherit\"\r\n                  href=\"https://subnet.min.io/cluster/register\"\r\n                  target=\"_blank\"\r\n                >\r\n                  https://subnet.min.io/cluster/register\r\n                </Link>\r\n              </Box>\r\n            </Box>\r\n\r\n            <Box\r\n              sx={{\r\n                fontSize: \"16px\",\r\n                display: \"flex\",\r\n                flexFlow: \"column\",\r\n                marginTop: \"15px\",\r\n                marginBottom: \"15px\",\r\n              }}\r\n            >\r\n              <Box className=\"step-row\">\r\n                <div className=\"step-number\">3</div>{\" \"}\r\n                <div className=\"step-text\">\r\n                  Enter the API key generated by SUBNET\r\n                </div>\r\n              </Box>\r\n\r\n              <Box\r\n                sx={{\r\n                  flex: \"1\",\r\n                  marginTop: \"15px\",\r\n                  marginLeft: \"35px\",\r\n                }}\r\n              >\r\n                <InputBoxWrapper\r\n                  value={license}\r\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                    setLicense(event.target.value)\r\n                  }\r\n                  id=\"api-key\"\r\n                  name=\"api-key\"\r\n                  placeholder=\"\"\r\n                  label=\"\"\r\n                  type=\"text\"\r\n                />\r\n              </Box>\r\n            </Box>\r\n\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"flex-end\",\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => subnetLogin()}\r\n                disabled={loading || license.trim().length === 0}\r\n              >\r\n                Register\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n          <RegisterHelpBox />\r\n        </Box>\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n\r\n  const regUi = (\r\n    <Fragment>\r\n      <Box\r\n        sx={{\r\n          border: \"1px solid #eaeaea\",\r\n          borderRadius: \"2px\",\r\n          display: \"flex\",\r\n          flexFlow: \"column\",\r\n          padding: \"43px\",\r\n        }}\r\n      >\r\n        {clusterRegistered && licenseInfo ? (\r\n          <ClusterRegistered\r\n            email={licenseInfo.email}\r\n            linkClass={classes.link}\r\n          />\r\n        ) : (\r\n          clusterRegistrationForm\r\n        )}\r\n      </Box>\r\n\r\n      {!clusterRegistered && <ProxyConfiguration linkClass={classes.link} />}\r\n    </Fragment>\r\n  );\r\n\r\n  const loadingUi = <div>Loading..</div>;\r\n  const uiToShow = loadingLicenseInfo ? loadingUi : regUi;\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageHeader\r\n        label=\"Register to MinIO Subscription Network\"\r\n        actions={<React.Fragment />}\r\n      />\r\n\r\n      <PageLayout>\r\n        <Tabs\r\n          value={curTab}\r\n          onChange={(e: React.ChangeEvent<{}>, newValue: number) => {\r\n            setCurTab(newValue);\r\n          }}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          aria-label=\"cluster-tabs\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n        >\r\n          <Tab\r\n            label=\"Credentials\"\r\n            id=\"simple-tab-0\"\r\n            aria-controls=\"simple-tabpanel-0\"\r\n          />\r\n          <Tab\r\n            label=\"API Key\"\r\n            id=\"simple-tab-1\"\r\n            aria-controls=\"simple-tabpanel-1\"\r\n          />\r\n          <Tab\r\n            label=\"Airgap\"\r\n            id=\"simple-tab-2\"\r\n            aria-controls=\"simple-tabpanel-2\"\r\n            onClick={() => fetchSubnetRegToken()}\r\n          />\r\n        </Tabs>\r\n\r\n        <TabPanel index={0} value={curTab}>\r\n          {uiToShow}\r\n        </TabPanel>\r\n        <TabPanel index={1} value={curTab}>\r\n          {apiKeyRegistration}\r\n        </TabPanel>\r\n        <TabPanel index={2} value={curTab}>\r\n          {offlineRegistration}\r\n        </TabPanel>\r\n      </PageLayout>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Register);\r\n"],"names":["withStyles","theme","createStyles","registerActivationIcon","color","palette","primary","main","fontSize","fontWeight","marginBottom","width","height","marginRight","verticalAlign","registerActivationMode","textAlign","cursor","subnetDescription","Font","letterSpacing","registeredStatus","border","padding","borderRadius","backgroundColor","marginLeft","marginTop","copyInputBox","link","sizedLabel","minWidth","actionsTray","searchField","spacingUtils","containerForHeader","spacing","classes","dispatch","useAppDispatch","operatorMode","useSelector","selOpMode","useState","license","setLicense","subnetPassword","setSubnetPassword","subnetEmail","setSubnetEmail","subnetMFAToken","setSubnetMFAToken","subnetOTP","setSubnetOTP","subnetAccessToken","setSubnetAccessToken","selectedSubnetOrganization","setSelectedSubnetOrganization","subnetRegToken","setSubnetRegToken","subnetOrganizations","setSubnetOrganizations","showPassword","setShowPassword","loading","setLoading","loadingLicenseInfo","setLoadingLicenseInfo","clusterRegistered","setClusterRegistered","licenseInfo","setLicenseInfo","curTab","setCurTab","initialLicenseLoading","setInitialLicenseLoading","clearForm","getSubnetInfo","hasPermission","CONSOLE_UI_RESOURCE","IAM_PAGES_PERMISSIONS","IAM_PAGES","fetchLicenseInfo","useCallback","api","then","res","catch","err","detailedError","toLowerCase","setErrorSnackMessage","callRegister","token","account_id","request","subnetLogin","username","password","apiKey","resp","registered","mfa_token","access_token","organizations","length","accountId","toString","useEffect","clusterRegistrationForm","Fragment","sx","display","flexFlow","flex","title","id","name","onChange","e","target","value","label","options","map","organization","company","alignItems","justifyContent","className","button","onClick","disabled","trim","variant","overlayIcon","event","placeholder","otp","subnetLoginWithMFA","icon","xs","md","spacerBottom","inputLabel","type","overlayAction","spacerRight","preventDefault","window","open","apiKeyRegistration","email","linkClass","afterRegister","registerEndpoint","offlineRegistration","background","extraInputProps","readOnly","navigator","clipboard","writeText","href","regUi","uiToShow","actions","newValue","indicatorColor","textColor","scrollButtons","regToken","console","error","index"],"sourceRoot":""}