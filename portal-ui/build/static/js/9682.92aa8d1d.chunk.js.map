{"version":3,"file":"static/js/9682.92aa8d1d.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/SetAccessPolicy.tsx","screens/Console/Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Policies/utils.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, SelectChangeEvent } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n  spacingUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\n\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport api from \"../../../../common/api\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ChangeAccessPolicyIcon } from \"../../../../icons\";\nimport CodeMirrorWrapper from \"../../Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper\";\n\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { emptyPolicy } from \"../../Policies/utils\";\nimport { useTranslation } from 'react-i18next';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    codeMirrorContainer: {\n      marginBottom: 20,\n      \"& label\": {\n        marginBottom: \".5rem\",\n      },\n      \"& label + div\": {\n        display: \"none\",\n      },\n    },\n    ...formFieldStyles,\n    ...modalStyleUtils,\n    ...spacingUtils,\n  });\ncreateStyles({\n  ...modalStyleUtils,\n  ...spacingUtils,\n});\n\ninterface ISetAccessPolicyProps {\n  classes: any;\n  open: boolean;\n  bucketName: string;\n  actualPolicy: string;\n  actualDefinition: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst SetAccessPolicy = ({\n  classes,\n  open,\n  bucketName,\n  actualPolicy,\n  actualDefinition,\n  closeModalAndRefresh,\n}: ISetAccessPolicyProps) => {\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  \n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [accessPolicy, setAccessPolicy] = useState<string>(\"\");\n  const [policyDefinition, setPolicyDefinition] = useState<string>(emptyPolicy);\n  const addRecord = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (addLoading) {\n      return;\n    }\n    setAddLoading(true);\n    api\n      .invoke(\"PUT\", `/api/v1/buckets/${bucketName}/set-policy`, {\n        access: accessPolicy,\n        definition: policyDefinition,\n      })\n      .then((res) => {\n        setAddLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  useEffect(() => {\n    setAccessPolicy(actualPolicy);\n    setPolicyDefinition(\n      actualDefinition\n        ? JSON.stringify(JSON.parse(actualDefinition), null, 4)\n        : emptyPolicy\n    );\n  }, [setAccessPolicy, actualPolicy, setPolicyDefinition, actualDefinition]);\n\n  return (\n    <ModalWrapper\n      title={t(\"change_access_policy\")}\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      titleIcon={<ChangeAccessPolicyIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          addRecord(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <SelectWrapper\n                value={accessPolicy}\n                label={t(\"access_policy\")}\n                id=\"select-access-policy\"\n                name=\"select-access-policy\"\n                onChange={(e: SelectChangeEvent<string>) => {\n                  setAccessPolicy(e.target.value as string);\n                }}\n                options={[\n                  { value: \"PRIVATE\", label: t(\"private\") },\n                  { value: \"PUBLIC\", label: t(\"public\") },\n                  { value: \"CUSTOM\", label: t(\"custom\") },\n                ]}\n              />\n            </Grid>\n            {accessPolicy === \"CUSTOM\" && (\n              <Grid item xs={12} className={classes.codeMirrorContainer}>\n                <CodeMirrorWrapper\n                  label={t(\"write_policy\")}\n                  value={policyDefinition}\n                  onBeforeChange={(editor, data, value) => {\n                    setPolicyDefinition(value);\n                  }}\n                  editorHeight={\"350px\"}\n                />\n              </Grid>\n            )}\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n              disabled={addLoading}\n            >\n              {t(\"cancel\")}\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={\n                addLoading || (accessPolicy === \"CUSTOM\" && !policyDefinition)\n              }\n            >\n              {t(\"set\")}\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(SetAccessPolicy);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box, InputLabel, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport { fieldBasic } from \"../common/styleLibrary\";\nimport { CopyIcon } from \"../../../../../icons\";\nimport RBIconButton from \"../../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport { useTranslation } from 'react-i18next';\n\ninterface ICodeWrapper {\n  value: string;\n  label?: string;\n  mode?: string;\n  tooltip?: string;\n  classes: any;\n  onChange?: (editor: any, data: any, value: string) => any;\n  onBeforeChange: (editor: any, data: any, value: string) => any;\n  readOnly?: boolean;\n  editorHeight?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n  });\n\nconst CodeMirrorWrapper = ({\n  value,\n  label = \"\",\n  tooltip = \"\",\n  mode = \"json\",\n  classes,\n  onBeforeChange,\n  readOnly = false,\n  editorHeight = \"250px\",\n}: ICodeWrapper) => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} sx={{ marginBottom: \"10px\" }}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n        style={{\n          maxHeight: editorHeight,\n          overflow: \"auto\",\n          border: \"1px solid #eaeaea\",\n        }}\n      >\n        <CodeEditor\n          value={value}\n          language={mode}\n          onChange={(evn) => {\n            onBeforeChange(null, null, evn.target.value);\n          }}\n          id={\"code_wrapper\"}\n          padding={15}\n          style={{\n            fontSize: 12,\n            backgroundColor: \"#fefefe\",\n            fontFamily:\n              \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n            minHeight: editorHeight || \"initial\",\n            color: \"#000000\",\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          background: \"#f7f7f7\",\n          border: \"1px solid #eaeaea\",\n          borderTop: 0,\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: \"2px\",\n            paddingRight: \"5px\",\n            justifyContent: \"flex-end\",\n            \"& button\": {\n              height: \"26px\",\n              width: \"26px\",\n              padding: \"2px\",\n              \" .min-icon\": {\n                marginLeft: \"0\",\n              },\n            },\n          }}\n        >\n          <CopyToClipboard text={value}>\n            <RBIconButton\n              tooltip={t(\"copy_to_clipboard\")}\n              onClick={() => {}}\n              text={\"\"}\n              icon={<CopyIcon />}\n              color={\"primary\"}\n              variant={\"outlined\"}\n            />\n          </CopyToClipboard>\n        </Box>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CodeMirrorWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title} style={{zIndex: 1}}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const emptyPolicy =\n  \"{\\n\" +\n  '    \"Version\": \"2012-10-17\",\\n' +\n  '    \"Statement\": [\\n' +\n  \"        \\n\" +\n  \"    ]\\n\" +\n  \"}\";\n"],"names":["createStyles","modalStyleUtils","spacingUtils","withStyles","theme","codeMirrorContainer","marginBottom","display","formFieldStyles","classes","open","bucketName","actualPolicy","actualDefinition","closeModalAndRefresh","dispatch","useAppDispatch","t","useTranslation","useState","addLoading","setAddLoading","accessPolicy","setAccessPolicy","emptyPolicy","policyDefinition","setPolicyDefinition","useEffect","JSON","stringify","parse","title","modalOpen","onClose","titleIcon","noValidate","autoComplete","onSubmit","e","preventDefault","api","access","definition","then","res","catch","err","setModalErrorSnackMessage","container","item","xs","className","modalFormScrollable","formFieldRow","value","label","id","name","onChange","target","options","onBeforeChange","editor","data","editorHeight","modalButtonBar","type","variant","color","onClick","disabled","fieldBasic","tooltip","mode","readOnly","sx","inputLabel","tooltipContainer","placement","style","maxHeight","overflow","border","language","evn","padding","fontSize","backgroundColor","fontFamily","minHeight","background","borderTop","alignItems","paddingRight","justifyContent","height","width","marginLeft","text","icon","deleteDialogStyles","content","paddingBottom","customDialogSize","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","scroll","event","reason","root","zIndex","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}