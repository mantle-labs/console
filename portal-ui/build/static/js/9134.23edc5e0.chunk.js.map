{"version":3,"file":"static/js/9134.23edc5e0.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title} style={{zIndex: 1}}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport {\n  actionsTray,\n  searchField,\n  selectorsCommon,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { PolicyList } from \"./types\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\n\ninterface ISelectPolicyProps {\n  classes: any;\n  selectedPolicy?: string[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    noFound: {\n      textAlign: \"center\",\n      padding: \"10px 0\",\n    },\n    searchBox: {\n      flex: 1,\n    },\n    fieldLabel: {\n      fontWeight: 400,\n      width: 160,\n      marginRight: 10,\n    },\n    tableBlock: {\n      ...tableStyles.tableBlock,\n    },\n    filterBox: {\n      display: \"flex\",\n      marginBottom: 15,\n      alignItems: \"center\",\n      \"& span\": {\n        fontSize: 14,\n      },\n    },\n    ...searchField,\n    ...tableStyles,\n    ...actionsTray,\n    ...selectorsCommon,\n  });\n\nconst PolicySelectors = ({\n  classes,\n  selectedPolicy = [],\n}: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api\n      .invoke(\"GET\", `/api/v1/policies?limit=1000`)\n      .then((res: PolicyList) => {\n        const policies = res.policies === null ? [] : res.policies;\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter)\n  );\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        {loading && <LinearProgress />}\n        {records.length > 0 ? (\n          <React.Fragment>\n            <Grid item xs={12} className={classes.filterBox}>\n              <span className={classes.fieldLabel}>Assign Policies</span>\n              <div className={classes.searchBox}>\n                <SearchBox\n                  placeholder=\"Start typing to search for a Policy\"\n                  onChange={(value) => {\n                    setFilter(value);\n                  }}\n                  value={filter}\n                />\n              </div>\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              className={classes.tableBlock}\n              style={{ paddingBottom: 16 }}\n            >\n              <TableWrapper\n                columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n                onSelect={selectionChanged}\n                selectedItems={currentPolicies}\n                isLoading={loading}\n                records={filteredRecords}\n                entityName=\"Policies\"\n                idField=\"name\"\n                customPaperHeight={classes.multiSelectTable}\n              />\n            </Grid>\n          </React.Fragment>\n        ) : (\n          <div className={classes.noFound}>No Policies Available</div>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(PolicySelectors);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState, Fragment } from \"react\";\n\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  modalBasic,\n  spacingUtils,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport api from \"../../../common/api\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\n\nimport { useSelector } from \"react-redux\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\n\ninterface ISetPolicyProps {\n  classes: any;\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalBasic,\n    ...spacingUtils,\n    tableBlock: {\n      ...tableStyles.tableBlock,\n      marginTop: 15,\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \".9rem\",\n    },\n  });\n\nconst SetPolicy = ({\n  classes,\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey] || [\" \"];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group?name=${selectedGroups[0]}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <Grid container>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <Grid item xs={12}>\n              <PredefinedList\n                label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n                content={selectedGroups !== null ? selectedGroups[0] : userName}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <PredefinedList\n                label={\"Current Policy\"}\n                content={actualPolicy.join(\", \")}\n              />\n            </Grid>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <PredefinedList\n            label={\"Selected Groups\"}\n            content={selectedGroups.join(\", \")}\n          />\n        )}\n        <Grid item xs={12}>\n          <div className={classes.tableBlock}>\n            <PolicySelectors selectedPolicy={selectedPolicy} />\n          </div>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} className={classes.buttonContainer}>\n        <Button\n          type=\"button\"\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.spacerRight}\n          onClick={resetSelection}\n        >\n          Reset\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n        >\n          Save\n        </Button>\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(SetPolicy);\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","actionButton","Fragment","className","prefinedContainer","item","xs","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","deleteDialogStyles","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","onClose","modalOpen","title","children","wideLimit","noContentPadding","titleIcon","dispatch","useAppDispatch","useState","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","type","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","style","zIndex","titleText","closeContainer","id","closeButton","onClick","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","noFound","textAlign","searchBox","flex","fieldLabel","fontWeight","marginRight","tableBlock","tableStyles","filterBox","display","marginBottom","alignItems","fontSize","searchField","actionsTray","selectorsCommon","selectedPolicy","records","setRecords","loading","isLoading","filter","setFilter","currentPolicies","createUser","selectedPolicies","fetchPolicies","useCallback","api","then","res","policies","sort","policySort","catch","err","setModalErrorSnackMessage","filteredRecords","elementItem","name","includes","container","placeholder","onChange","value","columns","elementKey","onSelect","e","targetD","target","checked","elements","push","element","setSelectedPolicies","selectedItems","entityName","idField","customPaperHeight","multiSelectTable","modalBasic","spacingUtils","marginTop","buttonContainer","closeModalAndRefresh","selectedUser","selectedGroups","setLoading","actualPolicy","setActualPolicy","setSelectedPolicy","groupPolicy","get","split","userPolicy","userName","join","variant","color","spacerRight","disabled","users","groups","accessKey"],"sourceRoot":""}