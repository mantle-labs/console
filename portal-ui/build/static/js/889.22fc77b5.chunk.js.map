{"version":3,"file":"static/js/889.22fc77b5.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddReplicationModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\r\n// Copyright (c) 2021 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Theme } from \"@mui/material/styles\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport { Button, SelectChangeEvent } from \"@mui/material\";\r\nimport get from \"lodash/get\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {\r\n  createTenantCommon,\r\n  formFieldStyles,\r\n  modalStyleUtils,\r\n  spacingUtils,\r\n} from \"../../Common/FormComponents/common/styleLibrary\";\r\nimport { BucketReplicationRule, BulkReplicationResponse } from \"../types\";\r\n\r\nimport { ErrorResponseHandler } from \"../../../../common/types\";\r\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\r\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\r\nimport api from \"../../../../common/api\";\r\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\r\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\r\nimport { getBytes, k8sScalarUnitsExcluding } from \"../../../../common/utils\";\r\nimport QueryMultiSelector from \"../../Common/FormComponents/QueryMultiSelector/QueryMultiSelector\";\r\nimport { BucketReplicationIcon } from \"../../../../icons\";\r\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\r\n\r\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\r\nimport { useAppDispatch } from \"../../../../store\";\r\n\r\ninterface IReplicationModal {\r\n  open: boolean;\r\n  closeModalAndRefresh: () => any;\r\n  classes: any;\r\n  bucketName: string;\r\n\r\n  setReplicationRules: BucketReplicationRule[];\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    multiContainer: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n    },\r\n    sizeFactorContainer: {\r\n      \"& label\": {\r\n        display: \"none\",\r\n      },\r\n      \"& div:first-child\": {\r\n        marginBottom: 0,\r\n        \"@media (max-width: 600px)\": {\r\n          marginTop: \"7px\",\r\n        },\r\n      },\r\n    },\r\n    ...spacingUtils,\r\n    ...createTenantCommon,\r\n    ...formFieldStyles,\r\n    ...modalStyleUtils,\r\n    modalFormScrollable: {\r\n      ...modalStyleUtils.modalFormScrollable,\r\n      paddingRight: 10,\r\n    },\r\n  });\r\n\r\nconst AddReplicationModal = ({\r\n  open,\r\n  closeModalAndRefresh,\r\n  classes,\r\n  bucketName,\r\n\r\n  setReplicationRules,\r\n}: IReplicationModal) => {\r\n  const dispatch = useAppDispatch();\r\n  const [addLoading, setAddLoading] = useState<boolean>(false);\r\n  const [priority, setPriority] = useState<string>(\"1\");\r\n  const [accessKey, setAccessKey] = useState<string>(\"\");\r\n  const [secretKey, setSecretKey] = useState<string>(\"\");\r\n  const [targetURL, setTargetURL] = useState<string>(\"\");\r\n  const [targetStorageClass, setTargetStorageClass] = useState<string>(\"\");\r\n  const [prefix, setPrefix] = useState<string>(\"\");\r\n  const [targetBucket, setTargetBucket] = useState<string>(\"\");\r\n  const [region, setRegion] = useState<string>(\"\");\r\n  const [useTLS, setUseTLS] = useState<boolean>(true);\r\n  const [repDeleteMarker, setRepDeleteMarker] = useState<boolean>(true);\r\n  const [repDelete, setRepDelete] = useState<boolean>(true);\r\n  const [metadataSync, setMetadataSync] = useState<boolean>(true);\r\n  const [tags, setTags] = useState<string>(\"\");\r\n  const [replicationMode, setReplicationMode] = useState<string>(\"async\");\r\n  const [bandwidthScalar, setBandwidthScalar] = useState<string>(\"100\");\r\n  const [bandwidthUnit, setBandwidthUnit] = useState<string>(\"Gi\");\r\n  const [healthCheck, setHealthCheck] = useState<string>(\"60\");\r\n\r\n  useEffect(() => {\r\n    if (setReplicationRules.length === 0) {\r\n      setPriority(\"1\");\r\n      return;\r\n    }\r\n\r\n    const greatestValue = setReplicationRules.reduce((prevAcc, currValue) => {\r\n      if (currValue.priority > prevAcc) {\r\n        return currValue.priority;\r\n      }\r\n      return prevAcc;\r\n    }, 0);\r\n\r\n    const nextPriority = greatestValue + 1;\r\n    setPriority(nextPriority.toString());\r\n  }, [setReplicationRules]);\r\n\r\n  const addRecord = () => {\r\n    const replicate = [\r\n      {\r\n        originBucket: bucketName,\r\n        destinationBucket: targetBucket,\r\n      },\r\n    ];\r\n\r\n    const hc = parseInt(healthCheck);\r\n\r\n    const endURL = `${useTLS ? \"https://\" : \"http://\"}${targetURL}`;\r\n\r\n    const remoteBucketsInfo = {\r\n      accessKey: accessKey,\r\n      secretKey: secretKey,\r\n      targetURL: endURL,\r\n      region: region,\r\n      bucketsRelation: replicate,\r\n      syncMode: replicationMode,\r\n      bandwidth:\r\n        replicationMode === \"async\"\r\n          ? parseInt(getBytes(bandwidthScalar, bandwidthUnit, true))\r\n          : 0,\r\n      healthCheckPeriod: hc,\r\n      prefix: prefix,\r\n      tags: tags,\r\n      replicateDeleteMarkers: repDeleteMarker,\r\n      replicateDeletes: repDelete,\r\n      priority: parseInt(priority),\r\n      storageClass: targetStorageClass,\r\n      replicateMetadata: metadataSync,\r\n    };\r\n\r\n    api\r\n      .invoke(\"POST\", \"/api/v1/buckets-replication\", remoteBucketsInfo)\r\n      .then((response: BulkReplicationResponse) => {\r\n        setAddLoading(false);\r\n\r\n        const states = get(response, \"replicationState\", []);\r\n\r\n        if (states.length > 0) {\r\n          const itemVal = states[0];\r\n\r\n          setAddLoading(false);\r\n\r\n          if (itemVal.errorString && itemVal.errorString !== \"\") {\r\n            dispatch(\r\n              setModalErrorSnackMessage({\r\n                errorMessage: itemVal.errorString,\r\n                detailedError: \"\",\r\n              })\r\n            );\r\n            return;\r\n          }\r\n\r\n          closeModalAndRefresh();\r\n\r\n          return;\r\n        }\r\n        dispatch(\r\n          setModalErrorSnackMessage({\r\n            errorMessage: \"No changes applied\",\r\n            detailedError: \"\",\r\n          })\r\n        );\r\n      })\r\n      .catch((err: ErrorResponseHandler) => {\r\n        setAddLoading(false);\r\n        dispatch(setModalErrorSnackMessage(err));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ModalWrapper\r\n      modalOpen={open}\r\n      onClose={() => {\r\n        closeModalAndRefresh();\r\n      }}\r\n      title=\"Set Bucket Replication\"\r\n      titleIcon={<BucketReplicationIcon />}\r\n    >\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\r\n          e.preventDefault();\r\n          setAddLoading(true);\r\n          addRecord();\r\n        }}\r\n      >\r\n        <Grid container>\r\n          <Grid item xs={12} className={classes.modalFormScrollable}>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"priority\"\r\n                name=\"priority\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  if (e.target.validity.valid) {\r\n                    setPriority(e.target.value);\r\n                  }\r\n                }}\r\n                label=\"Priority\"\r\n                value={priority}\r\n                pattern={\"[0-9]*\"}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"targetURL\"\r\n                name=\"targetURL\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setTargetURL(e.target.value);\r\n                }}\r\n                placeholder=\"play.min.io\"\r\n                label=\"Target URL\"\r\n                value={targetURL}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <FormSwitchWrapper\r\n                checked={useTLS}\r\n                id=\"useTLS\"\r\n                name=\"useTLS\"\r\n                label=\"Use TLS\"\r\n                onChange={(e) => {\r\n                  setUseTLS(e.target.checked);\r\n                }}\r\n                value=\"yes\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"accessKey\"\r\n                name=\"accessKey\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setAccessKey(e.target.value);\r\n                }}\r\n                label=\"Access Key\"\r\n                value={accessKey}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"secretKey\"\r\n                name=\"secretKey\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setSecretKey(e.target.value);\r\n                }}\r\n                label=\"Secret Key\"\r\n                value={secretKey}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"targetBucket\"\r\n                name=\"targetBucket\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setTargetBucket(e.target.value);\r\n                }}\r\n                label=\"Target Bucket\"\r\n                value={targetBucket}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"region\"\r\n                name=\"region\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setRegion(e.target.value);\r\n                }}\r\n                label=\"Region\"\r\n                value={region}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <SelectWrapper\r\n                id=\"replication_mode\"\r\n                name=\"replication_mode\"\r\n                onChange={(e: SelectChangeEvent<string>) => {\r\n                  setReplicationMode(e.target.value as string);\r\n                }}\r\n                label=\"Replication Mode\"\r\n                value={replicationMode}\r\n                options={[\r\n                  { label: \"Asynchronous\", value: \"async\" },\r\n                  { label: \"Synchronous\", value: \"sync\" },\r\n                ]}\r\n              />\r\n            </Grid>\r\n\r\n            {replicationMode === \"async\" && (\r\n              <Grid item xs={12} className={classes.formFieldRow}>\r\n                <div className={classes.multiContainer}>\r\n                  <InputBoxWrapper\r\n                    type=\"number\"\r\n                    id=\"bandwidth_scalar\"\r\n                    name=\"bandwidth_scalar\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                      if (e.target.validity.valid) {\r\n                        setBandwidthScalar(e.target.value as string);\r\n                      }\r\n                    }}\r\n                    label=\"Bandwidth\"\r\n                    value={bandwidthScalar}\r\n                    min=\"0\"\r\n                    pattern={\"[0-9]*\"}\r\n                    overlayObject={\r\n                      <InputUnitMenu\r\n                        id={\"quota_unit\"}\r\n                        onUnitChange={(newValue) => {\r\n                          setBandwidthUnit(newValue);\r\n                        }}\r\n                        unitSelected={bandwidthUnit}\r\n                        unitsList={k8sScalarUnitsExcluding([\"Ki\"])}\r\n                        disabled={false}\r\n                      />\r\n                    }\r\n                  />\r\n                </div>\r\n              </Grid>\r\n            )}\r\n            <Grid item xs={12} className={classes.formFieldRow}>\r\n              <InputBoxWrapper\r\n                id=\"healthCheck\"\r\n                name=\"healthCheck\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setHealthCheck(e.target.value as string);\r\n                }}\r\n                label=\"Health Check Duration\"\r\n                value={healthCheck}\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              className={`${classes.spacerTop} ${classes.formFieldRow}`}\r\n            >\r\n              <InputBoxWrapper\r\n                id=\"storageClass\"\r\n                name=\"storageClass\"\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                  setTargetStorageClass(e.target.value);\r\n                }}\r\n                placeholder=\"STANDARD_IA,REDUCED_REDUNDANCY etc\"\r\n                label=\"Storage Class\"\r\n                value={targetStorageClass}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <fieldset className={classes.fieldGroup}>\r\n                <legend className={classes.descriptionText}>\r\n                  Object Filters\r\n                </legend>\r\n                <Grid item xs={12} className={classes.formFieldRow}>\r\n                  <InputBoxWrapper\r\n                    id=\"prefix\"\r\n                    name=\"prefix\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                      setPrefix(e.target.value);\r\n                    }}\r\n                    placeholder=\"prefix\"\r\n                    label=\"Prefix\"\r\n                    value={prefix}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} className={classes.formFieldRow}>\r\n                  <QueryMultiSelector\r\n                    name=\"tags\"\r\n                    label=\"Tags\"\r\n                    elements={\"\"}\r\n                    onChange={(vl: string) => {\r\n                      setTags(vl);\r\n                    }}\r\n                    keyPlaceholder=\"Tag Key\"\r\n                    valuePlaceholder=\"Tag Value\"\r\n                    withBorder\r\n                  />\r\n                </Grid>\r\n              </fieldset>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <fieldset className={classes.fieldGroup}>\r\n                <legend className={classes.descriptionText}>\r\n                  Replication Options\r\n                </legend>\r\n                <Grid item xs={12} className={classes.formFieldRow}>\r\n                  <FormSwitchWrapper\r\n                    checked={metadataSync}\r\n                    id=\"metadatataSync\"\r\n                    name=\"metadatataSync\"\r\n                    label=\"Metadata Sync\"\r\n                    onChange={(e) => {\r\n                      setMetadataSync(e.target.checked);\r\n                    }}\r\n                    value={metadataSync}\r\n                    description={\"Metadata Sync\"}\r\n                  />\r\n                  <FormSwitchWrapper\r\n                    checked={repDeleteMarker}\r\n                    id=\"deleteMarker\"\r\n                    name=\"deleteMarker\"\r\n                    label=\"Delete Marker\"\r\n                    onChange={(e) => {\r\n                      setRepDeleteMarker(e.target.checked);\r\n                    }}\r\n                    value={repDeleteMarker}\r\n                    description={\"Replicate soft deletes\"}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} className={classes.formFieldRow}>\r\n                  <FormSwitchWrapper\r\n                    checked={repDelete}\r\n                    id=\"repDelete\"\r\n                    name=\"repDelete\"\r\n                    label=\"Deletes\"\r\n                    onChange={(e) => {\r\n                      setRepDelete(e.target.checked);\r\n                    }}\r\n                    value={repDelete}\r\n                    description={\"Replicate versioned deletes\"}\r\n                  />\r\n                </Grid>\r\n              </fieldset>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.modalButtonBar}>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              disabled={addLoading}\r\n              onClick={() => {\r\n                closeModalAndRefresh();\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={addLoading}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </ModalWrapper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(AddReplicationModal);\r\n"],"names":["withStyles","theme","createStyles","multiContainer","display","alignItems","sizeFactorContainer","marginBottom","marginTop","spacingUtils","createTenantCommon","formFieldStyles","modalStyleUtils","modalFormScrollable","paddingRight","open","closeModalAndRefresh","classes","bucketName","setReplicationRules","dispatch","useAppDispatch","useState","addLoading","setAddLoading","priority","setPriority","accessKey","setAccessKey","secretKey","setSecretKey","targetURL","setTargetURL","targetStorageClass","setTargetStorageClass","prefix","setPrefix","targetBucket","setTargetBucket","region","setRegion","useTLS","setUseTLS","repDeleteMarker","setRepDeleteMarker","repDelete","setRepDelete","metadataSync","setMetadataSync","tags","setTags","replicationMode","setReplicationMode","bandwidthScalar","setBandwidthScalar","bandwidthUnit","setBandwidthUnit","healthCheck","setHealthCheck","useEffect","length","greatestValue","reduce","prevAcc","currValue","toString","modalOpen","onClose","title","titleIcon","noValidate","autoComplete","onSubmit","e","preventDefault","replicate","originBucket","destinationBucket","hc","parseInt","endURL","remoteBucketsInfo","bucketsRelation","syncMode","bandwidth","getBytes","healthCheckPeriod","replicateDeleteMarkers","replicateDeletes","storageClass","replicateMetadata","api","then","response","states","get","itemVal","errorString","setModalErrorSnackMessage","errorMessage","detailedError","catch","err","addRecord","container","item","xs","className","formFieldRow","id","name","onChange","target","validity","valid","value","label","pattern","placeholder","checked","options","type","min","overlayObject","onUnitChange","newValue","unitSelected","unitsList","k8sScalarUnitsExcluding","disabled","spacerTop","fieldGroup","descriptionText","elements","vl","keyPlaceholder","valuePlaceholder","withBorder","description","modalButtonBar","variant","color","onClick"],"sourceRoot":""}