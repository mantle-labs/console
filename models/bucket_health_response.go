// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BucketHealthResponse bucket health response
//
// swagger:model BucketHealthResponse
type BucketHealthResponse struct {

	// region
	// Example: us-east-1
	Region string `json:"region,omitempty"`

	// status
	// Example: healthy
	// Enum: ["up","down"]
	Status string `json:"status,omitempty"`

	// url
	// Example: https://s3.example.com
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this bucket health response
func (m *BucketHealthResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bucketHealthResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["up","down"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bucketHealthResponseTypeStatusPropEnum = append(bucketHealthResponseTypeStatusPropEnum, v)
	}
}

const (

	// BucketHealthResponseStatusUp captures enum value "up"
	BucketHealthResponseStatusUp string = "up"

	// BucketHealthResponseStatusDown captures enum value "down"
	BucketHealthResponseStatusDown string = "down"
)

// prop value enum
func (m *BucketHealthResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bucketHealthResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BucketHealthResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *BucketHealthResponse) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bucket health response based on context it is used
func (m *BucketHealthResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BucketHealthResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BucketHealthResponse) UnmarshalBinary(b []byte) error {
	var res BucketHealthResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
