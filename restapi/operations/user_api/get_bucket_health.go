// Code generated by go-swagger; DO NOT EDIT.

package user_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/mantle-labs/console/models"
)

// GetBucketHealthHandlerFunc turns a function with the right signature into a get bucket health handler
type GetBucketHealthHandlerFunc func(GetBucketHealthParams, *models.Principal) middleware.Responder
// Handle executing the request and returning a response
func (fn GetBucketHealthHandlerFunc) Handle(params GetBucketHealthParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetBucketHealthHandler interface for that can handle valid get bucket health params
type GetBucketHealthHandler interface {
	Handle(GetBucketHealthParams, *models.Principal) middleware.Responder
}

// NewGetBucketHealth creates a new http.Handler for the get bucket health operation
func NewGetBucketHealth(ctx *middleware.Context, handler GetBucketHealthHandler) *GetBucketHealth {
	return &GetBucketHealth{Context: ctx, Handler: handler}
}

/*
	GetBucketHealth swagger:route GET /buckets/{name}/health UserAPI getBucketHealth

# Get bucket health status

Returns the health status of buckets including region, URL, and status.
*/
type GetBucketHealth struct {
	Context *middleware.Context
	Handler GetBucketHealthHandler
}

func (o *GetBucketHealth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBucketHealthParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
